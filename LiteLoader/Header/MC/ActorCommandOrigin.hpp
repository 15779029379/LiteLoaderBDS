// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"
#include "CommandOrigin.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class ActorCommandOrigin : public CommandOrigin {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_ACTORCOMMANDORIGIN
public:
    class ActorCommandOrigin& operator=(class ActorCommandOrigin const&) = delete;
    ActorCommandOrigin(class ActorCommandOrigin const&) = delete;
    ActorCommandOrigin() = delete;
#endif

public:
    /*0*/ virtual ~ActorCommandOrigin();
    /*1*/ virtual void __unk_vfn_0();
    /*2*/ virtual std::string getName() const;
    /*3*/ virtual class BlockPos getBlockPosition() const;
    /*4*/ virtual class Vec3 getWorldPosition() const;
    /*5*/ virtual void __unk_vfn_1();
    /*6*/ virtual class Dimension* getDimension() const;
    /*7*/ virtual class Actor* getEntity() const;
    /*8*/ virtual enum CommandPermissionLevel getPermissionsLevel() const;
    /*9*/ virtual std::unique_ptr<class CommandOrigin> clone() const;
    /*10*/ virtual class std::optional<class BlockPos> getCursorHitBlockPos() const;
    /*11*/ virtual class std::optional<class Vec3> getCursorHitPos() const;
    /*12*/ virtual bool canUseAbility(enum AbilitiesIndex) const;
    /*13*/ virtual bool canUseCommandsWithoutCheatsEnabled() const;
    /*14*/ virtual bool isSelectorExpansionAllowed() const;
    /*15*/ virtual unsigned char getSourceSubId() const;
    /*16*/ virtual class CommandOrigin const& getOutputReceiver() const;
    /*17*/ virtual void __unk_vfn_2();
    /*18*/ virtual class mce::UUID const& getUUID() const;
    /*19*/ virtual void handleCommandOutputCallback(class Json::Value&&) const;
    /*20*/ virtual class CompoundTag serialize() const;
    /*21*/ virtual void __unk_vfn_3();
    /*
    inline enum CommandOriginType getOriginType() const{
        enum CommandOriginType (ActorCommandOrigin::*rv)() const;
        *((void**)&rv) = dlsym("?getOriginType@ActorCommandOrigin@@UEBA?AW4CommandOriginType@@XZ");
        return (this->*rv)();
    }
    inline class Level* getLevel() const{
        class Level* (ActorCommandOrigin::*rv)() const;
        *((void**)&rv) = dlsym("?getLevel@ActorCommandOrigin@@UEBAPEAVLevel@@XZ");
        return (this->*rv)();
    }
    inline std::string const& getRequestId() const{
        std::string const& (ActorCommandOrigin::*rv)() const;
        *((void**)&rv) = dlsym("?getRequestId@ActorCommandOrigin@@UEBAAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ");
        return (this->*rv)();
    }
    inline bool isValid() const{
        bool (ActorCommandOrigin::*rv)() const;
        *((void**)&rv) = dlsym("?isValid@ActorCommandOrigin@@UEBA_NXZ");
        return (this->*rv)();
    }
    */
    MCAPI ActorCommandOrigin(class Actor&);
    MCAPI static std::unique_ptr<class ActorCommandOrigin> load(class CompoundTag const&, class Level&);

protected:

private:

};