/**
 * @file  ActorDamageByActorSource.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "ActorDamageSource.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class ActorDamageByActorSource.
 *
 */
class ActorDamageByActorSource : public ActorDamageSource {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_ACTORDAMAGEBYACTORSOURCE
public:
    class ActorDamageByActorSource& operator=(class ActorDamageByActorSource const &) = delete;
    ActorDamageByActorSource(class ActorDamageByActorSource const &) = delete;
    ActorDamageByActorSource() = delete;
#endif

public:
    virtual ~ActorDamageByActorSource();
    virtual bool isEntitySource() const;
    virtual struct std::pair<std::string, std::vector<std::string>> getDeathMessage(std::string, class Actor *) const;
    virtual bool getIsCreative() const;
    virtual bool getIsWorldBuilder() const;
    virtual struct ActorUniqueID getEntityUniqueID() const;
    virtual enum ActorType getEntityType() const;
    virtual enum ActorCategory getEntityCategories() const;
    virtual struct ActorUniqueID getDamagingEntityUniqueID() const;
    virtual enum ActorType getDamagingEntityType() const;
    virtual std::unique_ptr<class ActorDamageSource> clone() const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_ACTORDAMAGEBYACTORSOURCE
#endif
    MCAPI ActorDamageByActorSource(class Actor &, enum ActorDamageCause);

};