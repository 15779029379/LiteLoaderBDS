// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#include "ActorCommandOrigin.hpp"
#define EXTRA_INCLUDE_PART
#include "Extra/ActorServerCommandOriginAPI.hpp"
#undef EXTRA_INCLUDE_PART
class ActorServerCommandOrigin : public ActorCommandOrigin {
#include "Extra/ActorServerCommandOriginAPI.hpp"
public:
    virtual ~ActorServerCommandOrigin();
    virtual std::string const& getRequestId();
    virtual class Level* getLevel();
    virtual int /*enum CommandPermissionLevel*/ getPermissionsLevel();
    virtual std::unique_ptr<class CommandOrigin> clone();
    virtual class std::optional<class BlockPos> getCursorHitBlockPos();
    virtual class std::optional<class Vec3> getCursorHitPos();
    virtual bool canUseAbility(int /*enum AbilitiesIndex*/);
    virtual bool canUseCommandsWithoutCheatsEnabled();
    virtual bool isSelectorExpansionAllowed();
    virtual unsigned char getSourceSubId();
    virtual void unk_vfn_20();
    virtual void unk_vfn_22();
    virtual void unk_vfn_24();
    virtual void handleCommandOutputCallback(class Json::Value&&);
    virtual class CompoundTag serialize();
    virtual bool isValid();

public:
    MCAPI ActorServerCommandOrigin(class Actor&);
    MCAPI void setTargetOther(struct ActorUniqueID);

    MCAPI static std::unique_ptr<class ActorServerCommandOrigin> load(class CompoundTag const&, class Level&);
};