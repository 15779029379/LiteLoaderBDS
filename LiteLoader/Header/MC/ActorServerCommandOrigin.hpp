// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#include "Json.hpp"
#include "ActorCommandOrigin.hpp"
#define EXTRA_INCLUDE_PART_ACTORSERVERCOMMANDORIGIN
#include "Extra/ActorServerCommandOriginAPI.hpp"
#undef EXTRA_INCLUDE_PART_ACTORSERVERCOMMANDORIGIN
class ActorServerCommandOrigin : public ActorCommandOrigin {
#include "Extra/ActorServerCommandOriginAPI.hpp"
public:
    virtual ~ActorServerCommandOrigin();
    virtual std::string const& getRequestId() const;
    virtual class Level* getLevel() const;
    virtual int /*enum CommandPermissionLevel*/ getPermissionsLevel() const;
    virtual std::unique_ptr<class CommandOrigin> clone() const;
    virtual class std::optional<class BlockPos> getCursorHitBlockPos() const;
    virtual class std::optional<class Vec3> getCursorHitPos() const;
    virtual bool canUseAbility(int /*enum AbilitiesIndex*/) const;
    virtual bool canUseCommandsWithoutCheatsEnabled() const;
    virtual bool isSelectorExpansionAllowed() const;
    virtual unsigned char getSourceSubId() const;
    virtual void unk_vfn_20();
    virtual int /*enum CommandOriginType*/ getOriginType() const;
    virtual void unk_vfn_24();
    virtual void handleCommandOutputCallback(class Json::Value&&) const;
    virtual class CompoundTag serialize() const;
    virtual bool isValid() const;

public:
    MCAPI void setTargetOther(struct ActorUniqueID);

    MCAPI static std::unique_ptr<class ActorServerCommandOrigin> load(class CompoundTag const&, class Level&);
};