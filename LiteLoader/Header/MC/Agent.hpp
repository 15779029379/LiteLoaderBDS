// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#include "Mob.hpp"
#define EXTRA_INCLUDE_PART_AGENT
#include "Extra/AgentAPI.hpp"
#undef EXTRA_INCLUDE_PART_AGENT
class Agent : public Mob {
#include "Extra/AgentAPI.hpp"
public:
    virtual void initializeComponents(int /*enum Actor::InitializationMethod*/, class VariantParameterList const&);
    virtual ~Agent();
    virtual bool isRuntimePredictedMovementEnabled() const;
    virtual void unk_vfn_22();
    virtual class Vec3 getInterpolatedRidingOffset(float) const;
    virtual void unk_vfn_41();
    virtual void teleportTo(class Vec3 const&, bool, int, int);
    virtual void normalTick();
    virtual float getRidingHeight();
    virtual bool isInvisible() const;
    virtual bool canShowNameTag() const;
    virtual void unk_vfn_61();
    virtual std::string getFormattedNameTag() const;
    virtual void unk_vfn_68();
    virtual float getCameraOffset() const;
    virtual void unk_vfn_82();
    virtual void unk_vfn_87();
    virtual void playerTouch(class Player&);
    virtual bool isPickable();
    virtual void unk_vfn_94();
    virtual void unk_vfn_97();
    virtual bool isDamageBlocked(class ActorDamageSource const&) const;
    virtual void unk_vfn_104();
    virtual void unk_vfn_106();
    virtual void unk_vfn_107();
    virtual void unk_vfn_108();
    virtual class Actor* findAttackTarget();
    virtual bool isValidTarget(class Actor*) const;
    virtual void adjustDamageAmount(int&) const;
    virtual void onTame();
    virtual void onFailedTame();
    virtual void vehicleLanded(class Vec3 const&, class Vec3 const&);
    virtual void onBounceStarted(class BlockPos const&, class Block const&);
    virtual void handleEntityEvent(int /*enum ActorEvent*/, int);
    virtual void unk_vfn_143();
    virtual void awardKillScore(class Actor&, int);
    virtual void setCarriedItem(class ItemStack const&);
    virtual class HashedString const& queryEntityRenderer() const;
    virtual struct ActorUniqueID getSourceUniqueID() const;
    virtual int getPortalWaitTime() const;
    virtual bool canChangeDimensions() const;
    virtual void unk_vfn_182();
    virtual struct ActorUniqueID getControllingPlayer() const;
    virtual bool canPickupItem(class ItemStack const&) const;
    virtual bool canBePulledIntoVehicle() const;
    virtual void unk_vfn_196();
    virtual bool canSynchronizeNewEntity() const;
    virtual bool canBeAffected(class MobEffectInstance const&) const;
    virtual void unk_vfn_221();
    virtual void unk_vfn_222();
    virtual bool isWorldBuilder() const;
    virtual void unk_vfn_228();
    virtual bool isAdventure() const;
    virtual bool canDestroyBlock(class Block const&) const;
    virtual void setAuxValue(int);
    virtual void stopSpinAttack();
    virtual void unk_vfn_242();
    virtual void unk_vfn_245();
    virtual void kill();
    virtual void updateEntitySpecificMolangVariables(class RenderParams&);
    virtual void unk_vfn_257();
    virtual bool _hurt(class ActorDamageSource const&, int, bool, bool);
    virtual void unk_vfn_265();
    virtual void unk_vfn_274();
    virtual void knockback(class Actor*, int, float, float, float, float, float);
    virtual void spawnAnim();
    virtual void travel(float, float, float);
    virtual void aiStep();
    virtual int getItemUseDuration() const;
    virtual float getItemUseStartupProgress() const;
    virtual float getItemUseIntervalProgress() const;
    virtual void unk_vfn_304();
    virtual bool isAlliedTo(class Mob*);
    virtual void unk_vfn_308();
    virtual void sendArmorDamage(class std::bitset<4> const&);
    virtual bool createAIGoals();
    virtual void onBorn(class Actor&, class Actor&);
    virtual void unk_vfn_336();
    virtual float _getWalkTargetValue(class BlockPos const&);
    virtual bool canExistWhenDisallowMob() const;
    virtual void unk_vfn_339();
    virtual std::unique_ptr<class BodyControl> initBodyControl();
    virtual void _serverAiMobStep();
    virtual void unk_vfn_355();

public:
    MCAPI float getMoveSpeedScalar() const;
    MCAPI int getSelectedSlot() const;
    MCAPI bool isValidSlotNum(int);
    MCAPI void setNameTagFromOwner(class Player const&);
    MCAPI void startCommandMode();
    MCAPI void stopCommandMode();
    MCAPI bool swingAnimationCompleted();
    MCAPI void swingArm();
    MCAPI void tryFireCreateEvent(class Player&);

    MCAPI static class Vec3 roundTeleportPos(class Vec3 const&);
};