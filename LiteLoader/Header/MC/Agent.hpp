/**
 * @file  Agent.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"
#include "Mob.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class Agent.
 *
 */
class Agent : public Mob {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_AGENT
public:
    class Agent& operator=(class Agent const &) = delete;
    Agent(class Agent const &) = delete;
    Agent() = delete;
#endif

public:
    virtual void initializeComponents(enum Actor::InitializationMethod, class VariantParameterList const &);
    virtual ~Agent();
    virtual void __unk_vfn_41();
    virtual void teleportTo(class Vec3 const &, bool, int, int, bool);
    virtual void normalTick();
    virtual bool isInvisible() const;
    virtual bool canShowNameTag() const;
    virtual void __unk_vfn_61();
    virtual std::string getFormattedNameTag() const;
    virtual void __unk_vfn_68();
    virtual void __unk_vfn_82();
    virtual void __unk_vfn_85();
    virtual void __unk_vfn_88();
    virtual bool isPickable();
    virtual void __unk_vfn_96();
    virtual void __unk_vfn_99();
    virtual void __unk_vfn_106();
    virtual void __unk_vfn_108();
    virtual void __unk_vfn_109();
    virtual void __unk_vfn_111();
    virtual void handleEntityEvent(enum ActorEvent, int);
    virtual void setCarriedItem(class ItemStack const &);
    virtual void __unk_vfn_182();
    virtual bool canBePulledIntoVehicle() const;
    virtual void __unk_vfn_196();
    virtual bool canBeAffected(class MobEffectInstance const &) const;
    virtual void __unk_vfn_222();
    virtual void __unk_vfn_223();
    virtual bool isWorldBuilder() const;
    virtual bool isAdventure() const;
    virtual void __unk_vfn_248();
    virtual void __unk_vfn_251();
    virtual void kill();
    virtual void updateEntitySpecificMolangVariables(class RenderParams &);
    virtual void __unk_vfn_269();
    virtual bool _hurt(class ActorDamageSource const &, float, bool, bool);
    virtual void __unk_vfn_277();
    virtual void __unk_vfn_285();
    virtual void knockback(class Actor *, int, float, float, float, float, float);
    virtual void travel(float, float, float);
    virtual void aiStep();
    virtual void __unk_vfn_313();
    virtual void __unk_vfn_317();
    virtual bool createAIGoals();
    virtual bool canExistWhenDisallowMob() const;
    virtual void __unk_vfn_351();
    virtual std::unique_ptr<class BodyControl> initBodyControl();
    virtual void __unk_vfn_365();
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_AGENT
    MCVAPI bool breaksFallingBlocks() const;
    MCVAPI bool getAlwaysShowNameTag() const;
    MCVAPI bool interactPreventDefault();
    MCVAPI bool isTargetable() const;
#endif
    MCAPI Agent(class ActorDefinitionGroup *, struct ActorDefinitionIdentifier const &, class EntityContext &);
    MCAPI class Vec3 doServerTravel(class AABB, enum AgentTravelType);
    MCAPI float getMoveSpeedScalar() const;
    MCAPI int getSelectedSlot() const;
    MCAPI bool isValidSlotNum(int);
    MCAPI void setMoveTarget(class Vec3 const &);
    MCAPI void setNameTagFromOwner(class Player const &);
    MCAPI void startCommandMode();
    MCAPI void stopCommandMode();
    MCAPI bool swingAnimationCompleted();
    MCAPI void swingArm();
    MCAPI void tryFireCreateEvent(class Player &);
    MCAPI static class Vec3 roundTeleportPos(class Vec3 const &);
    MCAPI static class Agent * tryGetFromEntity(class EntityContext &, bool);

//private:
    MCAPI class ContainerComponent * _getContainerComponent();

private:

};