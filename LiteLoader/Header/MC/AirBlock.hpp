/**
 * @file  AirBlock.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "BlockLegacy.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class AirBlock.
 *
 */
class AirBlock : public BlockLegacy {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_AIRBLOCK
public:
    class AirBlock& operator=(class AirBlock const &) = delete;
    AirBlock(class AirBlock const &) = delete;
    AirBlock() = delete;
#endif

public:
    virtual ~AirBlock();
    virtual bool getCollisionShape(class AABB &, class Block const &, class IConstBlockSource const &, class BlockPos const &, class optional_ref<class GetCollisionShapeInterface const>) const;
    virtual bool isObstructingChests(class BlockSource &, class BlockPos const &, class Block const &) const;
    virtual void addAABBs(class Block const &, class BlockSource const &, class BlockPos const &, class AABB const *, std::vector<class AABB> &) const;
    virtual class AABB const & getAABB(class IConstBlockSource const &, class BlockPos const &, class Block const &, class AABB &, bool) const;
    virtual bool addCollisionShapes(class Block const &, class BlockSource const &, class BlockPos const &, class AABB const *, std::vector<class AABB> &, class optional_ref<class GetCollisionShapeInterface const>) const;
    virtual void __unk_vfn_19();
    virtual void __unk_vfn_29();
    virtual void __unk_vfn_30();
    virtual void __unk_vfn_32();
    virtual void __unk_vfn_33();
    virtual void __unk_vfn_34();
    virtual void __unk_vfn_36();
    virtual void __unk_vfn_37();
    virtual void __unk_vfn_38();
    virtual void __unk_vfn_39();
    virtual void __unk_vfn_40();
    virtual void __unk_vfn_41();
    virtual void __unk_vfn_42();
    virtual void __unk_vfn_44();
    virtual void __unk_vfn_45();
    virtual void __unk_vfn_46();
    virtual void __unk_vfn_47();
    virtual void __unk_vfn_48();
    virtual void __unk_vfn_49();
    virtual void __unk_vfn_59();
    virtual void __unk_vfn_60();
    virtual bool checkIsPathable(class Actor &, class BlockPos const &, class BlockPos const &) const;
    virtual void __unk_vfn_73();
    virtual void __unk_vfn_80();
    virtual bool mayPick() const;
    virtual bool mayPick(class BlockSource const &, class Block const &, bool) const;
    virtual bool mayPlace(class BlockSource &, class BlockPos const &, unsigned char) const;
    virtual bool mayPlace(class BlockSource &, class BlockPos const &) const;
    virtual bool tryToPlace(class BlockSource &, class BlockPos const &, class Block const &, struct ActorBlockSyncMessage const *) const;
    virtual void destroy(class BlockSource &, class BlockPos const &, class Block const &, class Actor *) const;
    virtual bool playerWillDestroy(class Player &, class BlockPos const &, class Block const &) const;
    virtual void spawnResources(class BlockSource &, class BlockPos const &, class Block const &, class Randomize &, std::vector<class Item const *> *, float, int) const;
    virtual void __unk_vfn_105();
    virtual void entityInside(class BlockSource &, class BlockPos const &, class Actor &) const;
    virtual void __unk_vfn_124();
    virtual void __unk_vfn_126();
    virtual void __unk_vfn_127();
    virtual void __unk_vfn_132();
    virtual class AABB const & getVisualShapeInWorld(class Block const &, class IConstBlockSource const &, class BlockPos const &, class AABB &, bool) const;
    virtual class AABB const & getVisualShape(class Block const &, class AABB &, bool) const;
    virtual void __unk_vfn_148();
    virtual void animateTick(class BlockSource &, class BlockPos const &, class Random &) const;
    virtual void __unk_vfn_157();
    virtual void __unk_vfn_168();
    virtual void __unk_vfn_169();
    virtual void __unk_vfn_170();
    virtual void tick(class BlockSource &, class BlockPos const &, class Random &) const;
    virtual void __unk_vfn_177();
    virtual void __unk_vfn_188();
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_AIRBLOCK
    MCVAPI bool canBeSilkTouched() const;
    MCVAPI bool canHaveExtraData() const;
#endif
    MCAPI AirBlock(std::string const &, int, class Material const &);

};