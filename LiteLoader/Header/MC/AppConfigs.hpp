/**
 * @file  AppConfigs.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Bedrock.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class AppConfigs.
 *
 */
class AppConfigs {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_APPCONFIGS
public:
    class AppConfigs& operator=(class AppConfigs const &) = delete;
    AppConfigs(class AppConfigs const &) = delete;
#endif

public:
    virtual ~AppConfigs();
    virtual void __unk_vfn_1();
    virtual void __unk_vfn_2();
    virtual void __unk_vfn_3();
    virtual void __unk_vfn_4();
    virtual void __unk_vfn_5();
    virtual void __unk_vfn_6();
    virtual void __unk_vfn_7();
    virtual void __unk_vfn_8();
    virtual void __unk_vfn_9();
    virtual void __unk_vfn_10();
    virtual void __unk_vfn_11();
    virtual void __unk_vfn_12();
    virtual void __unk_vfn_13();
    virtual void __unk_vfn_14();
    virtual void __unk_vfn_15();
    virtual void __unk_vfn_16();
    virtual void __unk_vfn_17();
    virtual enum EducationEditionOffer getEducationEditionOffering() const;
    virtual void __unk_vfn_19();
    virtual void __unk_vfn_20();
    virtual bool supports3DExport() const;
    virtual void __unk_vfn_22();
    virtual struct ConnectionDefinition getConnectionDefinition() const;
    virtual void __unk_vfn_24();
    virtual void __unk_vfn_25();
    virtual void __unk_vfn_26();
    virtual void __unk_vfn_27();
    virtual void __unk_vfn_28();
    virtual void __unk_vfn_29();
    virtual void __unk_vfn_30();
    virtual void __unk_vfn_31();
    virtual std::vector<struct PackIdVersion> getAdditionalClientPacks(bool) const;
    virtual std::unique_ptr<class IScreenCapabilities> getScreenCapabilities(std::string const &) const;
    virtual std::unique_ptr<class IContentAccessibilityProvider> createContentAccessibility(class gsl::not_null<class Bedrock::NonOwnerPointer<class IEntitlementManager>>) const;
    virtual std::string getFeedbackURL() const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_APPCONFIGS
    MCVAPI bool allowGameArguments() const;
    MCVAPI void applyLevelDataOverride(class LevelData &) const;
    MCVAPI bool areEmotesSupported() const;
    MCVAPI bool arePremiumSkinPacksAllowed() const;
    MCVAPI bool areQuizzesSupported() const;
    MCVAPI bool areResourcePacksAllowed() const;
    MCVAPI bool canUseAzureNotebooks() const;
    MCVAPI enum AppConfigs::MaelstromEduUsabilityStatus canUseMaelstrom() const;
    MCVAPI bool gameArgumentsNeedAuthentication() const;
    MCVAPI bool isChatScreenAllowed() const;
    MCVAPI bool isCoursesCacheEnabled() const;
    MCVAPI bool isExternalPlayerCommunicationAllowed() const;
    MCVAPI bool isGameTabShownInSettings() const;
    MCVAPI bool isLessonProgressionSupported() const;
    MCVAPI bool isPlayScreenAllowed() const;
    MCVAPI void loadFromData(class IAppConfigData const &);
    MCVAPI bool muteByDefault() const;
    MCVAPI bool requireEduLevelSettings() const;
    MCVAPI bool requireTrustedContent() const;
    MCVAPI bool sendPermissionsTelemetry() const;
    MCVAPI void setCanAccessWorldCallback(class IMinecraftGame &);
    MCVAPI bool shouldPromptBeforeExit() const;
    MCVAPI bool supportsChangingMultiplayerDuringPlay() const;
    MCVAPI bool useEduDemoUpsellDialog() const;
    MCVAPI bool useFullScreenByDefault() const;
    MCVAPI bool useNormalizedFontSize() const;
    MCVAPI bool webSocketsDisabled() const;
    MCVAPI bool worldBuilderDisabled() const;
    MCVAPI bool worldsAreSingleUse() const;
#endif
    MCAPI AppConfigs();

};