/**
 * @file  ArmorItem.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"
#include "Item.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class ArmorItem.
 *
 */
class ArmorItem : public Item {

#define AFTER_EXTRA
// Add Member There
public:
class ArmorMaterial {
public:
    ArmorMaterial() = delete;
    ArmorMaterial(ArmorMaterial const&) = delete;
    ArmorMaterial(ArmorMaterial const&&) = delete;
};

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_ARMORITEM
public:
    class ArmorItem& operator=(class ArmorItem const &) = delete;
    ArmorItem(class ArmorItem const &) = delete;
    ArmorItem() = delete;
#endif

public:
    virtual ~ArmorItem();
    virtual void __unk_vfn_7();
    virtual void __unk_vfn_11();
    virtual bool isArmor() const;
    virtual void __unk_vfn_14();
    virtual void __unk_vfn_16();
    virtual bool isDyeable() const;
    virtual void __unk_vfn_52();
    virtual void __unk_vfn_54();
    virtual void appendFormattedHovertext(class ItemStackBase const &, class Level &, std::string &, bool) const;
    virtual bool isValidRepairItem(class ItemStackBase const &, class ItemStackBase const &, class BaseGameVersion const &) const;
    virtual int getEnchantSlot() const;
    virtual int getEnchantValue() const;
    virtual int getArmorValue() const;
    virtual int getToughnessValue() const;
    virtual void __unk_vfn_67();
    virtual int getDamageChance(int) const;
    virtual void __unk_vfn_71();
    virtual void __unk_vfn_72();
    virtual void __unk_vfn_73();
    virtual class mce::Color getColor(class CompoundTag const *, class ItemDescriptor const &) const;
    virtual bool hasCustomColor(class CompoundTag const *) const;
    virtual void __unk_vfn_76();
    virtual void clearColor(class ItemStackBase &) const;
    virtual void setColor(class ItemStackBase &, class mce::Color const &) const;
    virtual void __unk_vfn_80();
    virtual void __unk_vfn_81();
    virtual int buildIdAux(short, class CompoundTag const *) const;
    virtual class ItemStack & use(class ItemStack &, class Player &) const;
    virtual bool dispense(class BlockSource &, class Container &, int, class Vec3 const &, unsigned char) const;
    virtual void hurtActor(class ItemStack &, class Actor &, class Mob &) const;
    virtual bool mineBlock(class ItemStack &, class Block const &, int, int, int, class Actor *) const;
    virtual enum ActorLocation getEquipLocation() const;
    virtual enum LevelSoundEvent getEquipSound() const;
    virtual struct TextureUVCoordinateSet const & getIcon(class ItemStackBase const &, int, bool) const;
    virtual class Item & setIcon(std::string const &, int);
    virtual float getArmorKnockbackResistance() const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_ARMORITEM
#endif
    MCAPI ArmorItem(std::string const &, int, class ArmorItem::ArmorMaterial const &, int, enum ArmorSlot);
MCAPI static class ArmorItem::ArmorMaterial const CHAIN;
MCAPI static class ArmorItem::ArmorMaterial const DIAMOND;
MCAPI static class ArmorItem::ArmorMaterial const ELYTRA;
MCAPI static class ArmorItem::ArmorMaterial const GOLD;
MCAPI static class ArmorItem::ArmorMaterial const IRON;
MCAPI static class ArmorItem::ArmorMaterial const LEATHER;
MCAPI static class ArmorItem::ArmorMaterial const NETHERITE;
MCAPI static class ArmorItem::ArmorMaterial const TURTLE;
    MCAPI static bool dispenseArmor(class BlockSource &, class Container &, int, class Vec3 const &, unsigned char, enum ArmorSlot);
    MCAPI static enum ArmorSlot getSlotForItem(class ItemStackBase const &);
    MCAPI static bool isDamageable(class ItemDescriptor const &);
MCAPI static int const mHealthPerSlot[];

//private:
    MCAPI class ItemInstance getTierItem() const;

private:

};