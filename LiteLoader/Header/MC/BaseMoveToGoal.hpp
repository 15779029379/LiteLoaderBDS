/**
 * @file  BaseMoveToGoal.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class BaseMoveToGoal.
 *
 */
class BaseMoveToGoal {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_BASEMOVETOGOAL
public:
    class BaseMoveToGoal& operator=(class BaseMoveToGoal const &) = delete;
    BaseMoveToGoal(class BaseMoveToGoal const &) = delete;
    BaseMoveToGoal() = delete;
#endif

public:
    virtual ~BaseMoveToGoal();
    virtual bool canUse();
    virtual bool canContinueToUse();
    virtual void __unk_vfn_3();
    virtual void start();
    virtual void stop();
    virtual void tick();
    virtual void appendDebugInfo(std::string &) const = 0;
    virtual void __unk_vfn_8();
    virtual void __unk_vfn_9();
    virtual bool hasReachedTarget() const;
    virtual bool isValidTarget(class BlockSource &, class BlockPos const &) = 0;
    virtual int _nextStartTick();
    virtual bool _canReach(class BlockPos const &);
    virtual void _moveToBlock() = 0;
    virtual class Vec3 _getTargetPosition() const;
    virtual unsigned __int64 _getRepathTime() const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_BASEMOVETOGOAL
#endif
    MCAPI BaseMoveToGoal(class Mob &, float, float, float, int, int);
    MCAPI void setTargetPositionOffset(class Vec3 const &);

//protected:
    MCAPI class BlockPos _blockAboveTarget() const;
    MCAPI void _checkIfStuck();
    MCAPI bool _isCooldownActive() const;
    MCAPI void setInterval(int);

protected:

};