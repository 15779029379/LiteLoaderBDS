/**
 * @file  BedBlock.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "BlockLegacy.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class BedBlock.
 *
 */
class BedBlock : public BlockLegacy {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_BEDBLOCK
public:
    class BedBlock& operator=(class BedBlock const &) = delete;
    BedBlock(class BedBlock const &) = delete;
    BedBlock() = delete;
#endif

public:
    virtual ~BedBlock();
    virtual class Block const * getNextBlockPermutation(class Block const &) const;
    virtual void __unk_vfn_19();
    virtual void __unk_vfn_29();
    virtual void __unk_vfn_30();
    virtual void __unk_vfn_32();
    virtual void __unk_vfn_33();
    virtual void __unk_vfn_34();
    virtual void __unk_vfn_36();
    virtual void __unk_vfn_37();
    virtual void __unk_vfn_38();
    virtual void __unk_vfn_39();
    virtual void __unk_vfn_40();
    virtual void __unk_vfn_41();
    virtual void __unk_vfn_42();
    virtual void __unk_vfn_44();
    virtual void __unk_vfn_45();
    virtual void __unk_vfn_46();
    virtual void __unk_vfn_47();
    virtual void __unk_vfn_48();
    virtual void __unk_vfn_49();
    virtual bool canFillAtPos(class BlockSource &, class BlockPos const &, class Block const &) const;
    virtual class Block const & sanitizeFillBlock(class BlockSource &, class BlockPos const &, class Block const &) const;
    virtual void onFillBlock(class BlockSource &, class BlockPos const &, class Block const &) const;
    virtual void __unk_vfn_59();
    virtual void __unk_vfn_60();
    virtual bool checkIsPathable(class Actor &, class BlockPos const &, class BlockPos const &) const;
    virtual void __unk_vfn_73();
    virtual void updateEntityAfterFallOn(class BlockPos const &, struct UpdateEntityAfterFallOnInterface &) const;
    virtual void __unk_vfn_80();
    virtual bool playerWillDestroy(class Player &, class BlockPos const &, class Block const &) const;
    virtual void neighborChanged(class BlockSource &, class BlockPos const &, class BlockPos const &) const;
    virtual bool getSecondPart(class BlockSource const &, class BlockPos const &, class BlockPos &) const;
    virtual class ItemInstance asItemInstance(class BlockSource &, class BlockPos const &, class Block const &) const;
    virtual void spawnResources(class BlockSource &, class BlockPos const &, class Block const &, class Randomize &, std::vector<class Item const *> *, float, int) const;
    virtual void __unk_vfn_105();
    virtual void __unk_vfn_124();
    virtual void __unk_vfn_126();
    virtual void __unk_vfn_127();
    virtual bool canSpawnAt(class BlockSource const &, class BlockPos const &) const;
    virtual void __unk_vfn_132();
    virtual int telemetryVariant(class BlockSource &, class BlockPos const &) const;
    virtual int getVariant(class Block const &) const;
    virtual void __unk_vfn_148();
    virtual unsigned char getMappedFace(unsigned char, class Block const &) const;
    virtual void __unk_vfn_157();
    virtual void __unk_vfn_168();
    virtual void __unk_vfn_169();
    virtual void __unk_vfn_170();
    virtual void onPlace(class BlockSource &, class BlockPos const &) const;
    virtual void onFallOn(class BlockSource &, class BlockPos const &, class Actor &, float) const;
    virtual void __unk_vfn_177();
    virtual bool use(class Player &, class BlockPos const &, unsigned char) const;
    virtual void __unk_vfn_188();
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_BEDBLOCK
    MCVAPI bool canBeSilkTouched() const;
    MCVAPI bool isBounceBlock() const;
    MCVAPI bool isInteractiveBlock() const;
#endif
    MCAPI BedBlock(std::string const &, int);
MCAPI static unsigned short const HEAD_PIECE_DATA;
MCAPI static unsigned short const OCCUPIED_DATA;
    MCAPI static class std::optional<class BlockPos> findWakeupPosition(class BlockSource &, class BlockPos const &, bool, class std::optional<class Vec3> const &);
    MCAPI static bool isDangerousSpawnBlock(class BlockSource &, class BlockPos const &);
    MCAPI static bool isValidStandUpPosition(class BlockSource &, class BlockPos const &);
    MCAPI static void setOccupied(class BlockSource &, class BlockPos const &, bool);

};