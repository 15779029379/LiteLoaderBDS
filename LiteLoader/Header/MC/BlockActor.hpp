/**
 * @file  BlockActor.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Add include headers & pre-declares
class Block;
class Container;
class CompoundTag;
class BlockSource;

#undef BEFORE_EXTRA

/**
 * @brief MC class BlockActor.
 *
 */
class BlockActor {

#define AFTER_EXTRA
    // Add new members to class
public:
    LIAPI bool refreshData();
    LIAPI bool refreshData(BlockSource* bs);
    LIAPI std::unique_ptr<CompoundTag> getNbt();
    LIAPI bool setNbt(CompoundTag* nbt);
    LIAPI bool setNbt(CompoundTag* nbt, BlockSource* bs);
    static unsigned int getBlockEntityType(Block* block);

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_BLOCKACTOR
public:
    class BlockActor& operator=(class BlockActor const &) = delete;
    BlockActor(class BlockActor const &) = delete;
    BlockActor() = delete;
#endif

public:
    virtual ~BlockActor();
    virtual void load(class Level &, class CompoundTag const &, class DataLoadHelper &);
    virtual bool save(class CompoundTag &) const;
    virtual bool saveItemInstanceData(class CompoundTag &);
    virtual void saveBlockData(class CompoundTag &, class BlockSource &) const;
    virtual void loadBlockData(class CompoundTag const &, class BlockSource &, class DataLoadHelper &);
    virtual void onCustomTagLoadDone(class BlockSource &);
    virtual void tick(class BlockSource &);
    virtual void onChanged(class BlockSource &);
    virtual bool isMovable(class BlockSource &);
    virtual bool isCustomNameSaved();
    virtual void onPlace(class BlockSource &);
    virtual void __unk_vfn_12();
    virtual void onRemoved(class BlockSource &);
    virtual void triggerEvent(int, int);
    virtual void clearCache();
    virtual void __unk_vfn_16();
    virtual float getShadowRadius(class BlockSource &) const;
    virtual bool hasAlphaLayer() const;
    virtual class BlockActor * getCrackEntity(class BlockSource &, class BlockPos const &);
    virtual void getDebugText(std::vector<std::string> &, class BlockPos const &);
    virtual std::string const & getCustomName() const;
    virtual std::string const & getFilteredCustomName(class UIProfanityContext const &);
    virtual std::string getName() const;
    virtual void setCustomName(std::string const &);
    virtual std::string getImmersiveReaderText(class BlockSource &);
    virtual int getRepairCost() const;
    virtual class PistonBlockActor * getOwningPiston(class BlockSource &);
    virtual void __unk_vfn_28();
    virtual void __unk_vfn_29();
    virtual void __unk_vfn_30();
    virtual float getDeletionDelayTimeSeconds() const;
    virtual void __unk_vfn_32();
    virtual void __unk_vfn_33();
    virtual void __unk_vfn_34();
    virtual std::unique_ptr<class BlockActorDataPacket> _getUpdatePacket(class BlockSource &);
    virtual void _onUpdatePacket(class CompoundTag const &, class BlockSource &);
    virtual bool _playerCanUpdate(class Player const &) const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_BLOCKACTOR
    MCVAPI void eraseLootTable();
    MCVAPI void fixupOnLoad(class LevelChunk &);
    MCVAPI class Container * getContainer();
    MCVAPI class Container const * getContainer() const;
    MCVAPI void onChunkLoaded(class LevelChunk &);
    MCVAPI void onChunkUnloaded(class LevelChunk &);
    MCVAPI void onMove();
    MCVAPI void onNeighborChanged(class BlockSource &, class BlockPos const &);
#endif
    MCAPI BlockActor(enum BlockActorType, class BlockPos const &, std::string const &);
    MCAPI void assignBlockIfNotAssigned(class BlockSource &);
    MCAPI class AABB const & getAABB() const;
    MCAPI class Block const * getBlock() const;
    MCAPI class BlockPos const & getPosition() const;
    MCAPI std::unique_ptr<class BlockActorDataPacket> getServerUpdatePacket(class BlockSource &);
    MCAPI enum BlockActorType const & getType() const;
    MCAPI bool const ignoreLighting() const;
    MCAPI bool isType(enum BlockActorType) const;
    MCAPI void moveTo(class BlockPos const &);
    MCAPI bool onUpdatePacket(class CompoundTag const &, class BlockSource &, class Player const *);
    MCAPI void setBB(class AABB);
    MCAPI void setChanged();
    MCAPI void setCustomNameSaved(bool);
    MCAPI void setIgnoreLighting(bool);
    MCAPI void setMovable(bool);
    MCAPI static bool isType(class BlockActor &, enum BlockActorType);
    MCAPI static class std::shared_ptr<class BlockActor> loadStatic(class Level &, class CompoundTag const &, class DataLoadHelper &);

//protected:
    MCAPI void _resetAABB();

//private:
    MCAPI static class std::map<std::string, enum BlockActorType, struct std::less<std::string>, class std::allocator<struct std::pair<std::string const, enum BlockActorType>>> _createIdClassMap();

protected:

private:
MCAPI static class std::map<enum BlockActorType, std::string, struct std::less<enum BlockActorType>, class std::allocator<struct std::pair<enum BlockActorType const, std::string>>> const mClassIdMap;
MCAPI static class std::map<std::string, enum BlockActorType, struct std::less<std::string>, class std::allocator<struct std::pair<std::string const, enum BlockActorType>>> const mIdClassMap;

};