/**
 * @file  BlockActorLevelListener.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "BlockSourceListener.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class BlockActorLevelListener.
 *
 */
class BlockActorLevelListener : public BlockSourceListener {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_BLOCKACTORLEVELLISTENER
public:
    class BlockActorLevelListener& operator=(class BlockActorLevelListener const &) = delete;
    BlockActorLevelListener(class BlockActorLevelListener const &) = delete;
#endif

public:
    virtual ~BlockActorLevelListener();
    virtual void __unk_vfn_1();
    virtual void __unk_vfn_3();
    virtual void __unk_vfn_4();
    virtual void __unk_vfn_6();
    virtual void __unk_vfn_8();
    virtual void __unk_vfn_9();
    virtual void __unk_vfn_10();
    virtual class Particle * addParticle(enum ParticleType, class Vec3 const &, class Vec3 const &, int, class CompoundTag const *, bool);
    virtual void __unk_vfn_12();
    virtual void __unk_vfn_13();
    virtual void __unk_vfn_14();
    virtual void __unk_vfn_15();
    virtual void __unk_vfn_16();
    virtual void __unk_vfn_17();
    virtual void __unk_vfn_18();
    virtual void __unk_vfn_19();
    virtual void __unk_vfn_20();
    virtual void __unk_vfn_21();
    virtual void onChunkLoaded(class ChunkSource &, class LevelChunk &);
    virtual void __unk_vfn_23();
    virtual void __unk_vfn_24();
    virtual void onChunkUnloaded(class LevelChunk &);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_BLOCKACTORLEVELLISTENER
#endif
    MCAPI BlockActorLevelListener();

};