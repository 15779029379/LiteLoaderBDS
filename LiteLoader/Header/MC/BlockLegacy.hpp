// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#define EXTRA_INCLUDE_PART_BLOCKLEGACY
#include "Extra/BlockLegacyAPI.hpp"
#undef EXTRA_INCLUDE_PART_BLOCKLEGACY
class BlockLegacy {
#include "Extra/BlockLegacyAPI.hpp"
public:
    virtual ~BlockLegacy();
    virtual class Block const& getStateFromLegacyData(unsigned short) const;
    virtual class std::shared_ptr<class BlockActor> newBlockEntity(class BlockPos const&, class Block const&) const;
    virtual class Block const* getNextBlockPermutation(class Block const&) const;
    virtual bool hasTag(class BlockSource&, class BlockPos const&, class Block const&, std::string const&) const;
    virtual bool getCollisionShape(class AABB&, class Block const&, class BlockSource const&, class BlockPos const&, class optional_ref<struct IActorMovementProxy>) const;
    virtual bool isObstructingChests(class BlockSource&, class BlockPos const&) const;
    virtual class Vec3 randomlyModifyPosition(class BlockPos const&, int&) const;
    virtual class Vec3 randomlyModifyPosition(class BlockPos const&) const;
    virtual void addAABBs(class Block const&, class BlockSource&, class BlockPos const&, class AABB const*, std::vector<class AABB>&) const;
    virtual class AABB const& getAABB(class BlockSource const&, class BlockPos const&, class Block const&, class AABB&, bool) const;
    virtual bool addCollisionShapes(class Block const&, class BlockSource&, class BlockPos const&, class AABB const*, std::vector<class AABB>&, class optional_ref<struct IActorMovementProxy>) const;
    virtual class AABB const& getOutline(class BlockSource&, class BlockPos const&, class AABB&) const;
    virtual bool getLiquidClipVolume(class BlockSource&, class BlockPos const&, class AABB&) const;
    virtual void onProjectileHit(class BlockSource&, class BlockPos const&, class Actor const&) const;
    virtual void onLightningHit(class BlockSource&, class BlockPos const&) const;
    virtual bool liquidCanFlowIntoFromDirection(unsigned char, class std::function<class Block const&(class BlockPos const&)> const&, class BlockPos const&) const;
    virtual void unk_vfn_17();
    virtual bool isStrippable(class Block const&) const;
    virtual class Block const& getStrippedBlock(class Block const&) const;
    virtual bool canProvideSupport(class Block const&, unsigned char, int /*enum BlockSupportType*/) const;
    virtual bool canConnect(class Block const&, unsigned char, class Block const&) const;
    virtual void getConnectedDirections(class Block const&, class BlockPos const&, class BlockSource const&, bool&, bool&, bool&, bool&) const;
    virtual class CopperBehavior const* tryGetCopperBehavior() const;
    virtual bool isClimbable(struct IActorMovementProxy const&) const;
    virtual void unk_vfn_25();
    virtual void unk_vfn_26();
    virtual void unk_vfn_27();
    virtual bool isWaterBlocking() const;
    virtual void unk_vfn_29();
    virtual void unk_vfn_30();
    virtual void unk_vfn_31();
    virtual void unk_vfn_32();
    virtual void unk_vfn_33();
    virtual void unk_vfn_34();
    virtual void unk_vfn_35();
    virtual bool isDoubleSlabBlock() const;
    virtual void unk_vfn_37();
    virtual void unk_vfn_38();
    virtual void unk_vfn_39();
    virtual void unk_vfn_40();
    virtual void unk_vfn_41();
    virtual bool canHurtAndBreakItem() const;
    virtual void unk_vfn_43();
    virtual bool canBeOriginalSurface() const;
    virtual bool canBeAscendedByJumping(class Actor const&, class BlockPos const&) const;
    virtual bool isValidAuxValue(int) const;
    virtual bool canFillAtPos(class BlockSource&, class BlockPos const&, class Block const&) const;
    virtual class Block const& sanitizeFillBlock(class BlockSource&, class BlockPos const&, class Block const&) const;
    virtual void onFillBlock(class BlockSource&, class BlockPos const&, class Block const&) const;
    virtual int getDirectSignal(class BlockSource&, class BlockPos const&, int) const;
    virtual void unk_vfn_51();
    virtual void unk_vfn_52();
    virtual bool canContainLiquid() const;
    virtual bool shouldConnectToRedstone(class BlockSource&, class BlockPos const&, int) const;
    virtual void handlePrecipitation(class BlockSource&, class BlockPos const&, float, float) const;
    virtual bool canBeUsedInCommands(class BaseGameVersion const&) const;
    virtual float getThickness() const;
    virtual float getFlexibility(class BlockSource&, class BlockPos const&) const;
    virtual bool checkIsPathable(class Actor&, class BlockPos const&, class BlockPos const&) const;
    virtual bool shouldDispense(class BlockSource&, class Container&) const;
    virtual bool dispense(class BlockSource&, class Container&, int, class Vec3 const&, unsigned char) const;
    virtual void transformOnFall(class BlockSource&, class BlockPos const&, class Actor*, float) const;
    virtual void onRedstoneUpdate(class BlockSource&, class BlockPos const&, int, bool) const;
    virtual void onMove(class BlockSource&, class BlockPos const&, class BlockPos const&) const;
    virtual void unk_vfn_65();
    virtual void movedByPiston(class BlockSource&, class BlockPos const&) const;
    virtual void onStructureBlockPlace(class BlockSource&, class BlockPos const&) const;
    virtual void onStructureNeighborBlockPlace(class BlockSource&, class BlockPos const&) const;
    virtual void setupRedstoneComponent(class BlockSource&, class BlockPos const&) const;
    virtual int /*enum BlockProperty*/ getRedstoneProperty(class BlockSource&, class BlockPos const&) const;
    virtual void updateEntityAfterFallOn(class BlockPos const&, struct IActorMovementProxy&) const;
    virtual void unk_vfn_72();
    virtual bool isFilteredOut(int /*enum BlockRenderLayer*/) const;
    virtual void unk_vfn_74();
    virtual bool ignoreEntitiesOnPistonMove(class Block const&) const;
    virtual bool onFertilized(class BlockSource&, class BlockPos const&, class Actor*, int /*enum FertilizerType*/) const;
    virtual bool mayConsumeFertilizer(class BlockSource&) const;
    virtual bool canBeFertilized(class BlockSource&, class BlockPos const&, class Block const&) const;
    virtual bool mayPick() const;
    virtual bool mayPick(class BlockSource const&, class Block const&, bool) const;
    virtual bool mayPlace(class BlockSource&, class BlockPos const&, unsigned char) const;
    virtual bool mayPlace(class BlockSource&, class BlockPos const&) const;
    virtual bool mayPlaceOn(class BlockSource&, class BlockPos const&) const;
    virtual bool tryToPlace(class BlockSource&, class BlockPos const&, class Block const&, struct ActorBlockSyncMessage const*) const;
    virtual bool tryToTill(class BlockSource&, class BlockPos const&, class Actor&, class ItemStack&) const;
    virtual bool breaksFallingBlocks(class Block const&, class BaseGameVersion) const;
    virtual void destroy(class BlockSource&, class BlockPos const&, class Block const&, class Actor*) const;
    virtual bool playerWillDestroy(class Player&, class BlockPos const&, class Block const&) const;
    virtual bool getIgnoresDestroyPermissions(class Actor&, class BlockPos const&) const;
    virtual void neighborChanged(class BlockSource&, class BlockPos const&, class BlockPos const&) const;
    virtual bool getSecondPart(class BlockSource const&, class BlockPos const&, class BlockPos&) const;
    virtual int getResourceCount(class Randomize&, class Block const&, int) const;
    virtual class ItemInstance getResourceItem(class Randomize&, class Block const&, int) const;
    virtual class ItemInstance asItemInstance(class BlockSource&, class BlockPos const&, class Block const&) const;
    virtual void spawnResources(class BlockSource&, class BlockPos const&, class Block const&, class Randomize&, std::vector<class Item const*>*, float, int) const;
    virtual void trySpawnResourcesOnExplosion(class BlockSource&, class BlockPos const&, class Block const&, class Randomize&, std::vector<class Item const*>*, float, int) const;
    virtual void unk_vfn_97();
    virtual class Block const& getPlacementBlock(class Actor&, class BlockPos const&, unsigned char, class Vec3 const&, int) const;
    virtual int calcVariant(class BlockSource&, class BlockPos const&, class mce::Color const&) const;
    virtual bool isAttachedTo(class BlockSource&, class BlockPos const&, class BlockPos&) const;
    virtual bool attack(class Player*, class BlockPos const&) const;
    virtual void handleEntityInside(class BlockSource&, class BlockPos const&, class Actor*, class Vec3&) const;
    virtual bool shouldTriggerEntityInside(class BlockSource&, class BlockPos const&, class Actor&) const;
    virtual void entityInside(class BlockSource&, class BlockPos const&, class Actor&) const;
    virtual int getExperienceDrop(class Random&) const;
    virtual bool canBeBuiltOver(class BlockSource&, class BlockPos const&) const;
    virtual void triggerEvent(class BlockSource&, class BlockPos const&, int, int) const;
    virtual void executeEvent(std::string const&, class RenderParams&) const;
    virtual void executeEvent(class BlockSource&, class BlockPos const&, class Block const&, std::string const&, class Actor&) const;
    virtual bool executeTrigger(class DefinitionTrigger const&, class RenderParams&) const;
    virtual bool executeTriggerChain(class DefinitionTrigger const&, std::vector<struct std::pair<std::string const, std::string const>>&, class RenderParams&) const;
    virtual void forceExecuteTrigger(class DefinitionTrigger const&, class RenderParams&) const;
    virtual class MobSpawnerData const* getMobToSpawn(class SpawnConditions const&, class BlockSource&) const;
    virtual bool shouldStopFalling(class Actor&) const;
    virtual void unk_vfn_115();
    virtual float calcGroundFriction(struct IMobMovementProxy const&, class BlockPos const&) const;
    virtual void unk_vfn_117();
    virtual void unk_vfn_118();
    virtual int getComparatorSignal(class BlockSource&, class BlockPos const&, class Block const&, unsigned char) const;
    virtual bool canSlide(class BlockSource&, class BlockPos const&) const;
    virtual bool canSpawnAt(class BlockSource const&, class BlockPos const&) const;
    virtual void notifySpawnedAt(class BlockSource&, class BlockPos const&) const;
    virtual void unk_vfn_123();
    virtual int getIconYOffset() const;
    virtual std::string buildDescriptionId(class Block const&) const;
    virtual bool isAuxValueRelevantForPicking() const;
    virtual int getColor(class Block const&) const;
    virtual int getColor(class BlockSource&, class BlockPos const&, class Block const&) const;
    virtual int getColorAtPos(class BlockSource&, class BlockPos const&) const;
    virtual int getColorForParticle(class BlockSource&, class BlockPos const&, class Block const&) const;
    virtual bool isSeasonTinted(class Block const&, class BlockSource&, class BlockPos const&) const;
    virtual void onGraphicsModeChanged(struct BlockGraphicsModeChangeContext const&);
    virtual float getShadeBrightness(class Block const&) const;
    virtual class AABB const& getVisualShapeInWorld(class Block const&, class BlockSource const&, class BlockPos const&, class AABB&, bool) const;
    virtual class AABB const& getVisualShape(class Block const&, class AABB&, bool) const;
    virtual class AABB const& getUIShape(class Block const&, class AABB&) const;
    virtual int telemetryVariant(class BlockSource&, class BlockPos const&) const;
    virtual int getVariant(class Block const&) const;
    virtual void unk_vfn_139();
    virtual class Block const& getRenderBlock() const;
    virtual unsigned char getMappedFace(unsigned char, class Block const&) const;
    virtual int /*enum Flip*/ getFaceFlip(unsigned char, class Block const&) const;
    virtual void animateTick(class BlockSource&, class BlockPos const&, class Random&) const;
    virtual class BlockLegacy& init();
    virtual class BlockLegacy& setLightBlock(struct Brightness);
    virtual class BlockLegacy& setLightEmission(struct Brightness);
    virtual class BlockLegacy& setExplodeable(float);
    virtual class BlockLegacy& setFlammable(class FlameOdds, class BurnOdds);
    virtual class BlockLegacy& setDestroyTime(float);
    virtual class BlockLegacy& setFriction(float);
    virtual class BlockLegacy& addState(class ItemState const&);
    virtual class BlockLegacy& addState(class ItemState const&, unsigned __int64);
    virtual class BlockLegacy& setAllowsRunes(bool);
    virtual class BlockLegacy& setCanBeOriginalSurface(bool);
    virtual class BlockLegacy& setMapColor(class mce::Color const&);
    virtual void unk_vfn_156();
    virtual class ItemInstance getSilkTouchItemInstance(class Block const&) const;
    virtual void setVisualShape(class AABB const&);
    virtual void setVisualShape(class Vec3 const&, class Vec3 const&);
    virtual class Block const* tryLegacyUpgrade(unsigned short) const;
    virtual bool dealsContactDamage(class Actor const&, class Block const&, bool) const;
    virtual class Block const* tryGetInfested(class Block const&) const;
    virtual class Block const* tryGetUninfested(class Block const&) const;
    virtual void onRemove(class BlockSource&, class BlockPos const&) const;
    virtual void onExploded(class BlockSource&, class BlockPos const&, class Actor*) const;
    virtual bool shouldTriggerOnStandOn(class Actor&, class BlockPos const&) const;
    virtual void onStandOn(class Actor&, class BlockPos const&) const;
    virtual void onStepOn(class Actor&, class BlockPos const&) const;
    virtual void unk_vfn_169();
    virtual void unk_vfn_170();
    virtual void onPlace(class BlockSource&, class BlockPos const&) const;
    virtual void onFallOn(class BlockSource&, class BlockPos const&, class Actor&, float) const;
    virtual void playerDestroy(class Player&, class BlockPos const&, class Block const&) const;
    virtual void tick(class BlockSource&, class BlockPos const&, class Random&) const;
    virtual void randomTick(class BlockSource&, class BlockPos const&, class Random&) const;
    virtual bool shouldRandomTick() const;
    virtual void unk_vfn_177();
    virtual class HitResult clip(class BlockSource const&, class BlockPos const&, class Vec3 const&, class Vec3 const&, bool) const;
    virtual bool use(class Player&, class BlockPos const&, unsigned char) const;
    virtual bool canSurvive(class BlockSource&, class BlockPos const&) const;
    virtual int /*enum BlockRenderLayer*/ getRenderLayer() const;
    virtual int /*enum BlockRenderLayer*/ getRenderLayer(class Block const&, class BlockSource&, class BlockPos const&) const;
    virtual int getExtraRenderLayers() const;
    virtual float getExplosionResistance(class Actor*) const;
    virtual struct Brightness getLightEmission(class Block const&) const;
    virtual class mce::Color getMapColor(class BlockSource&, class BlockPos const&) const;
    virtual void unk_vfn_187();
    virtual void unk_vfn_188();
    virtual void _executeEvent(std::string const&, std::vector<struct std::pair<std::string const, std::string const>>&, class RenderParams&) const;
    virtual bool _executeTrigger(class DefinitionTrigger const&, std::vector<struct std::pair<std::string const, std::string const>>&, class RenderParams&) const;
    virtual void _forceExecuteTrigger(class DefinitionTrigger const&, std::vector<struct std::pair<std::string const, std::string const>>&, class RenderParams&) const;

public:
    MCAPI bool addAABB(class AABB const&, class AABB const*, std::vector<class AABB>&) const;
    MCAPI class BlockLegacy& addBlockProperties(enum BlockProperty);
    MCAPI class BlockLegacy& addTag(class HashedString const&);
    MCAPI void createBlockPermutations(unsigned int);
    MCAPI class WeakPtr<class BlockLegacy> createWeakPtr() const;
    MCAPI void forEachBlockPermutation(class std::function<bool(class Block const&)>) const;
    MCAPI void forEachItemStateInstance(class std::function<bool(class ItemStateInstance const&)>) const;
    MCAPI enum BlockActorType getBlockEntityType() const;
    MCAPI short getBlockItemId() const;
    MCAPI class ItemState const* getBlockState(class HashedString const&) const;
    MCAPI class BlockStateGroup* getBlockStateGroup();
    MCAPI std::vector<struct CommandName> getCommandNames() const;
    MCAPI enum CreativeItemCategory getCreativeCategory() const;
    MCAPI void getDebugText(std::vector<std::string>&, class BlockPos const&) const;
    MCAPI class Block const& getDefaultState() const;
    MCAPI std::string const& getDescriptionId() const;
    MCAPI class Material const& getMaterial() const;
    MCAPI std::string const& getNamespace() const;
    MCAPI class HashedString const& getRawNameHash() const;
    MCAPI std::string const& getRawNameId() const;
    MCAPI class BaseGameVersion const& getRequiredBaseGameVersion() const;
    MCAPI bool hasProperty(enum BlockProperty) const;
    MCAPI bool hasState(class ItemState const&) const;
    MCAPI bool hasState(class HashedString const&) const;
    MCAPI void initEntity(class EntityRegistryOwned&);
    MCAPI void initializeBlockStateGroup();
    MCAPI bool isSolid() const;
    MCAPI bool isVanilla() const;
    MCAPI bool matchesStates(class BlockLegacy const&) const;
    MCAPI class BlockLegacy& overrideBlockProperties(enum BlockProperty);
    MCAPI class ItemActor* popResource(class BlockSource&, class BlockPos const&, class ItemInstance const&) const;
    MCAPI class BlockLegacy& setBlockTintType(enum BlockTintType);
    MCAPI class BlockLegacy& setCanBeExtraBlock(bool);
    MCAPI class BlockLegacy& setCategory(enum CreativeItemCategory);
    MCAPI class BlockLegacy& setCreativeEnumState(class ItemState const&);
    MCAPI class BlockLegacy& setCreativeGroup(std::string const&);
    MCAPI void setDefaultState(class Block const&);
    MCAPI void setIgnoreBlockForInsideCubeRenderer(bool);
    MCAPI void setIsInteraction(bool);
    MCAPI void setIsVanillaBlock(bool);
    MCAPI class BlockLegacy& setMinRequiredBaseGameVersion(class BaseGameVersion const&);
    MCAPI class BlockLegacy& setNameId(std::string const&);
    MCAPI void setOnlyPermutationandDefaultState(std::unique_ptr<class Block>);
    MCAPI void setPushesOutItems(bool);
    MCAPI void setRandomTicking(bool) const;
    MCAPI void setRandomTickingExtraLayer(bool) const;
    MCAPI void setSolid(bool);
    MCAPI void spawnResources(class BlockSource&, class BlockPos const&, class Randomize&, std::vector<class Item const*>*, float, int) const;
    MCAPI class Block const* tryGetStateFromLegacyData(unsigned short) const;

    MCAPI static std::string const BLOCK_DESCRIPTION_PREFIX;
    MCAPI static float const SIZE_OFFSET;
    MCAPI static unsigned char getPlacementFacingAll(class Actor&, class BlockPos const&, float);
    MCAPI static unsigned char getPlacementFacingAllExceptAxisY(class Actor&, class BlockPos const&, float);

private:
    MCAPI void initParams(class RenderParams&, class BlockSource&, class BlockPos const&, class Actor*) const;

protected:
    MCAPI class HitResult clip(class BlockSource const&, class BlockPos const&, class Vec3 const&, class Vec3 const&, bool, class AABB const&) const;
    MCAPI float getFriction() const;

    MCAPI static class AABB createAABBWithPixelCoordinates(float, float, float, float, float, float);
};