/**
 * @file  Boat.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class Boat.
 *
 */
class Boat : public Actor {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_BOAT
public:
    class Boat& operator=(class Boat const &) = delete;
    Boat(class Boat const &) = delete;
    Boat() = delete;
#endif

public:
    virtual void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const &);
    virtual void reloadHardcodedClient(enum Actor::InitializationMethod, class VariantParameterList const &);
    virtual ~Boat();
    virtual void remove();
    virtual void __unk_vfn_41();
    virtual void normalTick();
    virtual std::string getExitTip(std::string const &, enum InputMode) const;
    virtual void __unk_vfn_61();
    virtual void __unk_vfn_68();
    virtual float getShadowHeightOffs();
    virtual float getShadowRadius() const;
    virtual void __unk_vfn_82();
    virtual void __unk_vfn_85();
    virtual void __unk_vfn_88();
    virtual void onAboveBubbleColumn(bool);
    virtual bool isPickable();
    virtual void __unk_vfn_96();
    virtual void __unk_vfn_99();
    virtual void __unk_vfn_106();
    virtual void __unk_vfn_108();
    virtual void __unk_vfn_109();
    virtual void __unk_vfn_111();
    virtual bool isInvulnerableTo(class ActorDamageSource const &) const;
    virtual void __unk_vfn_182();
    virtual struct ActorUniqueID getControllingPlayer() const;
    virtual bool canAddPassenger(class Actor &) const;
    virtual void __unk_vfn_196();
    virtual void __unk_vfn_222();
    virtual void __unk_vfn_223();
    virtual float getPassengerYRotation(class Actor const &) const;
    virtual void __unk_vfn_248();
    virtual void __unk_vfn_251();
    virtual void __unk_vfn_269();
    virtual bool _hurt(class ActorDamageSource const &, float, bool, bool);
    virtual void __unk_vfn_277();
    virtual void __unk_vfn_285();
    virtual void destroy(class Actor *);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_BOAT
#endif
    MCAPI Boat(class ActorDefinitionGroup *, struct ActorDefinitionIdentifier const &, class EntityContext &);
    MCAPI float getRowingTime(enum Side) const;
    MCAPI unsigned char getWoodID() const;
    MCAPI void postNormalTick();
    MCAPI bool setPaddleState(enum Side, bool);
    MCAPI void setRowingTime(enum Side, float);

//private:
    MCAPI void _control();
    MCAPI void _move();
    MCAPI void _paddleControl(enum Side, class Vec3 &, class Vec3 &);

private:

};