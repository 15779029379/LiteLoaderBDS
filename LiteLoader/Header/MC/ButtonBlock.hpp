/**
 * @file  ButtonBlock.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "BlockLegacy.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class ButtonBlock.
 *
 */
class ButtonBlock : public BlockLegacy {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_BUTTONBLOCK
public:
    class ButtonBlock& operator=(class ButtonBlock const &) = delete;
    ButtonBlock(class ButtonBlock const &) = delete;
    ButtonBlock() = delete;
#endif

public:
    virtual ~ButtonBlock();
    virtual bool getCollisionShape(class AABB &, class Block const &, class IConstBlockSource const &, class BlockPos const &, class optional_ref<class GetCollisionShapeInterface const>) const;
    virtual void __unk_vfn_19();
    virtual void __unk_vfn_29();
    virtual void __unk_vfn_30();
    virtual void __unk_vfn_32();
    virtual void __unk_vfn_33();
    virtual void __unk_vfn_34();
    virtual void __unk_vfn_36();
    virtual void __unk_vfn_37();
    virtual void __unk_vfn_38();
    virtual void __unk_vfn_39();
    virtual void __unk_vfn_40();
    virtual void __unk_vfn_41();
    virtual void __unk_vfn_42();
    virtual void __unk_vfn_44();
    virtual void __unk_vfn_45();
    virtual void __unk_vfn_46();
    virtual void __unk_vfn_47();
    virtual void __unk_vfn_48();
    virtual void __unk_vfn_49();
    virtual bool isSignalSource() const;
    virtual void __unk_vfn_59();
    virtual void __unk_vfn_60();
    virtual bool shouldConnectToRedstone(class BlockSource &, class BlockPos const &, int) const;
    virtual bool checkIsPathable(class Actor &, class BlockPos const &, class BlockPos const &) const;
    virtual void onRedstoneUpdate(class BlockSource &, class BlockPos const &, int, bool) const;
    virtual void __unk_vfn_73();
    virtual void setupRedstoneComponent(class BlockSource &, class BlockPos const &) const;
    virtual void __unk_vfn_80();
    virtual bool mayPlace(class BlockSource &, class BlockPos const &, unsigned char) const;
    virtual bool mayPlace(class BlockSource &, class BlockPos const &) const;
    virtual void neighborChanged(class BlockSource &, class BlockPos const &, class BlockPos const &) const;
    virtual int getResourceCount(class Randomize &, class Block const &, int) const;
    virtual class ItemInstance getResourceItem(class Randomize &, class Block const &, int) const;
    virtual class ItemInstance asItemInstance(class BlockSource &, class BlockPos const &, class Block const &) const;
    virtual void __unk_vfn_105();
    virtual class Block const & getPlacementBlock(class Actor &, class BlockPos const &, unsigned char, class Vec3 const &, int) const;
    virtual bool isAttachedTo(class BlockSource &, class BlockPos const &, class BlockPos &) const;
    virtual void entityInside(class BlockSource &, class BlockPos const &, class Actor &) const;
    virtual void __unk_vfn_124();
    virtual void __unk_vfn_126();
    virtual void __unk_vfn_127();
    virtual void __unk_vfn_132();
    virtual class AABB const & getVisualShape(class Block const &, class AABB &, bool) const;
    virtual class AABB const & getUIShape(class Block const &, class AABB &) const;
    virtual int getVariant(class Block const &) const;
    virtual void __unk_vfn_148();
    virtual void __unk_vfn_157();
    virtual void __unk_vfn_168();
    virtual void __unk_vfn_169();
    virtual void __unk_vfn_170();
    virtual void onPlace(class BlockSource &, class BlockPos const &) const;
    virtual void tick(class BlockSource &, class BlockPos const &, class Random &) const;
    virtual void __unk_vfn_177();
    virtual bool use(class Player &, class BlockPos const &, unsigned char) const;
    virtual void __unk_vfn_188();
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_BUTTONBLOCK
    MCVAPI bool canSpawnOn() const;
    MCVAPI bool isButtonBlock() const;
    MCVAPI bool isInteractiveBlock() const;
    MCVAPI bool isSignalSource() const;
#endif
    MCAPI void buttonPressed(class BlockSource &, class Block const &, class Vec3 const &, class Actor *) const;
    MCAPI static bool canAttachTo(class BlockSource &, class BlockPos const &, unsigned char);

//protected:
    MCAPI ButtonBlock(std::string const &, int, class Material const &, bool);

//private:
    MCAPI void _buttonUnpressed(class BlockSource &, class Block const &, class Vec3 const &, class Actor *) const;
    MCAPI void _checkPressed(class BlockSource &, class BlockPos const &) const;
    MCAPI void _getShape(class AABB &, bool, unsigned char, bool) const;

protected:

private:

};