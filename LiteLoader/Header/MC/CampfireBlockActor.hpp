/**
 * @file  CampfireBlockActor.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "BlockActor.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class CampfireBlockActor.
 *
 */
class CampfireBlockActor : public BlockActor {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_CAMPFIREBLOCKACTOR
public:
    class CampfireBlockActor& operator=(class CampfireBlockActor const &) = delete;
    CampfireBlockActor(class CampfireBlockActor const &) = delete;
    CampfireBlockActor() = delete;
#endif

public:
    virtual ~CampfireBlockActor();
    virtual void load(class Level &, class CompoundTag const &, class DataLoadHelper &);
    virtual bool save(class CompoundTag &) const;
    virtual void tick(class BlockSource &);
    virtual void onChanged(class BlockSource &);
    virtual void __unk_vfn_12();
    virtual void __unk_vfn_16();
    virtual float getShadowRadius(class BlockSource &) const;
    virtual void __unk_vfn_28();
    virtual void __unk_vfn_29();
    virtual void __unk_vfn_30();
    virtual void __unk_vfn_32();
    virtual void __unk_vfn_33();
    virtual void __unk_vfn_34();
    virtual std::unique_ptr<class BlockActorDataPacket> _getUpdatePacket(class BlockSource &);
    virtual void _onUpdatePacket(class CompoundTag const &, class BlockSource &);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_CAMPFIREBLOCKACTOR
#endif
    MCAPI CampfireBlockActor(class BlockPos const &);
    MCAPI void dropAllItems(class BlockSource &);
    MCAPI class HashedString const & getCampfireTag(class BlockSource const &) const;
    MCAPI class ItemInstance const & getCookingItem(int);
    MCAPI bool setItem(class BlockSource &, class ItemInstance const &);
MCAPI static int const MAX_SMOKE_THRESHOLD_COUNTER;
MCAPI static int const MIN_SMOKE_THRESHOLD_COUNTER;

//private:
    MCAPI void _finishCooking(class BlockSource &, int);

private:

};