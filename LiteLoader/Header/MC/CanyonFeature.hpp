// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"


#define BEFORE_EXTRA //DO NOT EDIT THIS LINE
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA //DO NOT EDIT THIS LINE

class CanyonFeature {

#define AFTER_EXTRA //DO NOT EDIT THIS LINE
// Add Member There
public:
struct CanyonConfiguration;

#undef AFTER_EXTRA //DO NOT EDIT THIS LINE

public:
    /*0*/ virtual ~CanyonFeature();
    /*1*/ virtual bool carve(class BlockVolume&, class BiomeSource const&, class Random&, class ChunkPos const&, class Vec3 const&, class Vec3 const&, int, int, int, int, int, int, float, float, class gsl::span<float const, -1>, struct WorldGenContext const&) const;
    /*2*/ virtual void addFeature(class BlockVolume&, class BiomeSource const&, struct CanyonFeatureUtils::CanyonConfiguration const&, class ChunkPos const&, class Random&, int, int, struct WorldGenContext const&);

    /*
    inline  ~CanyonFeature(){
         (CanyonFeature::*rv)();
        *((void**)&rv) = dlsym("??1CanyonFeature@@UEAA@XZ");
        return (this->*rv)();
    }
    */

    MCAPI CanyonFeature(short);
    MCAPI void apply(class BlockVolume&, class ChunkPos const&, class BiomeSource const&, struct CanyonFeatureUtils::CanyonConfiguration const&, class Random&, unsigned int, struct WorldGenContext const&);

protected:

    MCAPI void addTunnel(class BlockVolume&, class BiomeSource const&, class Random&, class ChunkPos const&, class Vec3 const&, class Vec3 const&, float, float, float, int, int, float, struct WorldGenContext const&) const;

private:

};