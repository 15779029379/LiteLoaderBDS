// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "BlockActor.hpp"
#define EXTRA_INCLUDE_PART_CHALKBOARDBLOCKACTOR
#include "Extra/ChalkboardBlockActorAPI.hpp"
#undef EXTRA_INCLUDE_PART_CHALKBOARDBLOCKACTOR
class ChalkboardBlockActor : public BlockActor {
#include "Extra/ChalkboardBlockActorAPI.hpp"
public:
    /*0*/ virtual ~ChalkboardBlockActor();
    /*1*/ virtual void load(class Level&, class CompoundTag const&, class DataLoadHelper&);
    /*2*/ virtual bool save(class CompoundTag&) const;
    /*3*/ virtual void saveBlockData(class CompoundTag&, class BlockSource&) const;
    /*4*/ virtual void loadBlockData(class CompoundTag const&, class BlockSource&, class DataLoadHelper&);
    /*5*/ virtual void onCustomTagLoadDone(class BlockSource&);
    /*6*/ virtual void tick(class BlockSource&);
    /*7*/ virtual void onChanged(class BlockSource&);
    /*8*/ virtual void onPlace(class BlockSource&);
    /*9*/ virtual void __unk_vfn_0();
    /*10*/ virtual void onRemoved(class BlockSource&);
    /*11*/ virtual void triggerEvent(int, int);
    /*12*/ virtual void clearCache();
    /*13*/ virtual void __unk_vfn_1();
    /*14*/ virtual float getShadowRadius(class BlockSource&) const;
    /*15*/ virtual bool hasAlphaLayer() const;
    /*16*/ virtual class BlockActor* getCrackEntity(class BlockSource&, class BlockPos const&);
    /*17*/ virtual std::string const& getCustomName() const;
    /*18*/ virtual std::string getName() const;
    /*19*/ virtual std::string getImmersiveReaderText(class BlockSource&);
    /*20*/ virtual int getRepairCost() const;
    /*21*/ virtual class PistonBlockActor* getOwningPiston(class BlockSource&);
    /*22*/ virtual void __unk_vfn_2();
    /*23*/ virtual void __unk_vfn_3();
    /*24*/ virtual float getDeletionDelayTimeSeconds() const;
    /*25*/ virtual void __unk_vfn_4();
    /*26*/ virtual void __unk_vfn_5();
    /*27*/ virtual void __unk_vfn_6();
    /*28*/ virtual std::unique_ptr<class BlockActorDataPacket> _getUpdatePacket(class BlockSource&);
    /*29*/ virtual void _onUpdatePacket(class CompoundTag const&, class BlockSource&);
    /*30*/ virtual bool _playerCanUpdate(class Player const&) const;

    MCAPI enum ChalkboardSize const getChalkboardSize() const;
    MCAPI bool getLocked() const;
    MCAPI int getTextCharCount() const;
    MCAPI void setText(std::string const&);
    MCAPI void validate(class BlockSource&);
    MCAPI static std::vector<class BlockPos> calculateAllBlocks(class BlockPos const&, enum ChalkboardSize, int);
    MCAPI static bool canCreateChalkboard(class Actor*, class BlockSource&, class BlockPos const&, enum ChalkboardSize, unsigned char, int, std::vector<class BlockPos>&, class ItemStack const&, bool);
    MCAPI static class ChalkboardBlockActor* convertFromEntity(class BlockSource&, class CompoundTag const&);
    MCAPI static class ChalkboardBlockActor* createChalkboard(class Actor*, class BlockSource&, class BlockPos const&, enum ChalkboardSize, unsigned char, int, bool, class ItemStack const&, std::string);

protected:

private:
};