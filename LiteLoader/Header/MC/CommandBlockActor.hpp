/**
 * @file  CommandBlockActor.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "BlockActor.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class CommandBlockActor.
 *
 */
class CommandBlockActor : public BlockActor {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_COMMANDBLOCKACTOR
public:
    class CommandBlockActor& operator=(class CommandBlockActor const &) = delete;
    CommandBlockActor(class CommandBlockActor const &) = delete;
    CommandBlockActor() = delete;
#endif

public:
    virtual ~CommandBlockActor();
    virtual void load(class Level &, class CompoundTag const &, class DataLoadHelper &);
    virtual bool save(class CompoundTag &) const;
    virtual void saveBlockData(class CompoundTag &, class BlockSource &) const;
    virtual void loadBlockData(class CompoundTag const &, class BlockSource &, class DataLoadHelper &);
    virtual void onCustomTagLoadDone(class BlockSource &);
    virtual void onChanged(class BlockSource &);
    virtual void onPlace(class BlockSource &);
    virtual void __unk_vfn_12();
    virtual void __unk_vfn_16();
    virtual std::string const & getCustomName() const;
    virtual std::string const & getFilteredCustomName(class UIProfanityContext const &);
    virtual void setCustomName(std::string const &);
    virtual void __unk_vfn_28();
    virtual void __unk_vfn_29();
    virtual void __unk_vfn_30();
    virtual void __unk_vfn_32();
    virtual void __unk_vfn_33();
    virtual void __unk_vfn_34();
    virtual std::unique_ptr<class BlockActorDataPacket> _getUpdatePacket(class BlockSource &);
    virtual void _onUpdatePacket(class CompoundTag const &, class BlockSource &);
    virtual bool _playerCanUpdate(class Player const &) const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_COMMANDBLOCKACTOR
#endif
    MCAPI CommandBlockActor(class BlockPos const &, enum CommandBlockMode);
    MCAPI class BaseCommandBlock & getBaseCommandBlock();
    MCAPI std::string const & getCommand() const;
    MCAPI class CommandBlock const * getCommandBlock(class BlockSource &) const;
    MCAPI bool getConditionalMode(class BlockSource &) const;
    MCAPI int getDelayOnActivation() const;
    MCAPI enum CommandBlockMode getMode(class BlockSource &) const;
    MCAPI bool getPowered() const;
    MCAPI int getSuccessCount() const;
    MCAPI int getTickDelay() const;
    MCAPI bool isAutomatic() const;
    MCAPI bool markConditionMet(class BlockSource &);
    MCAPI void markForSaving(class BlockSource &);
    MCAPI void markForSaving(class BlockSource &, int, bool);
    MCAPI bool performCommand(class BlockSource &);
    MCAPI void setPowered(bool);
    MCAPI void setSuccessCount(int);
    MCAPI void updateBlock(class BlockSource &, std::string const &, std::string const &, enum CommandBlockMode, bool, bool, bool, int, bool);
    MCAPI bool wasConditionMet();

//private:
    MCAPI void _setAutomatic(class BlockSource &, bool, enum CommandBlockMode);

private:

};