// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#include "Json.hpp"
#include "Bedrock.hpp"
#define EXTRA_INCLUDE_PART_COMMANDORIGIN
#include "Extra/CommandOriginAPI.hpp"
#undef EXTRA_INCLUDE_PART_COMMANDORIGIN
class CommandOrigin {
#include "Extra/CommandOriginAPI.hpp"
public:
    virtual ~CommandOrigin();
    virtual std::string const& getRequestId() const                         = 0;
    virtual std::string getName() const                                     = 0;
    virtual class BlockPos getBlockPosition() const                         = 0;
    virtual class Vec3 getWorldPosition() const                             = 0;
    virtual class Level* getLevel() const                                   = 0;
    virtual class Dimension* getDimension() const                           = 0;
    virtual class Actor* getEntity() const                                  = 0;
    virtual int /*enum CommandPermissionLevel*/ getPermissionsLevel() const = 0;
    virtual std::unique_ptr<class CommandOrigin> clone() const              = 0;
    virtual class std::optional<class BlockPos> getCursorHitBlockPos() const;
    virtual class std::optional<class Vec3> getCursorHitPos() const;
    virtual bool hasChatPerms() const;
    virtual bool hasTellPerms() const;
    virtual bool canUseAbility(int /*enum AbilitiesIndex*/) const;
    virtual bool isWorldBuilder() const;
    virtual bool canUseCommandsWithoutCheatsEnabled() const;
    virtual bool isSelectorExpansionAllowed() const;
    virtual class NetworkIdentifier const& getSourceId() const;
    virtual unsigned char getSourceSubId() const;
    virtual class CommandOrigin const& getOutputReceiver() const;
    virtual struct CommandOriginIdentity getIdentity() const;
    virtual int /*enum CommandOriginType*/ getOriginType() const = 0;
    virtual struct CommandOriginData toCommandOriginData() const;
    virtual class mce::UUID const& getUUID() const;
    virtual void handleCommandOutputCallback(class Json::Value&&) const;
    virtual class CompoundTag serialize() const;
    virtual bool isValid() const = 0;
    virtual void _setUUID(class mce::UUID const&);

public:
    MCAPI std::unique_ptr<class CommandArea> getAreaAt(class BlockPos const&, class BlockPos const&, bool) const;
    MCAPI std::unique_ptr<class CommandArea> getAreaAt(class BlockPos const&) const;
    MCAPI std::unique_ptr<class CommandArea> getAreaAtWithBuffer(class BlockPos const&, class BlockPos const&, bool) const;
    MCAPI std::unique_ptr<class CommandArea> getAreaAtWithBuffer(class BlockPos const&) const;

    MCAPI static std::unique_ptr<class CommandOrigin> fromCommandOriginData(struct CommandOriginData const&, class Bedrock::NonOwnerPointer<class ILevel> const&, class NetworkIdentifier const&, unsigned char);

protected:
    MCAPI static class NetworkIdentifier sUnknownSource;
};