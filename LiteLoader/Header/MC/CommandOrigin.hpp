/**
 * @file  CommandOrigin.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"
#include "Bedrock.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here
class ServerPlayer;
class CommandArea;
enum CommandOriginType : char;

#undef BEFORE_EXTRA

/**
 * @brief MC class CommandOrigin.
 *
 */
class CommandOrigin {

#define AFTER_EXTRA
// Add Member There
public:
LIAPI ServerPlayer* getPlayer() const;

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_COMMANDORIGIN
public:
    class CommandOrigin& operator=(class CommandOrigin const &) = delete;
    CommandOrigin(class CommandOrigin const &) = delete;
#endif

public:
    virtual ~CommandOrigin();
    virtual std::string const & getRequestId() const = 0;
    virtual std::string getName() const = 0;
    virtual class BlockPos getBlockPosition() const = 0;
    virtual class Vec3 getWorldPosition() const = 0;
    virtual class std::optional<class Vec2> getRotation() const = 0;
    virtual class Level * getLevel() const = 0;
    virtual class Dimension * getDimension() const = 0;
    virtual class Actor * getEntity() const = 0;
    virtual enum CommandPermissionLevel getPermissionsLevel() const = 0;
    virtual std::unique_ptr<class CommandOrigin> clone() const = 0;
    virtual class std::optional<class BlockPos> getCursorHitBlockPos() const;
    virtual class std::optional<class Vec3> getCursorHitPos() const;
    virtual bool hasChatPerms() const;
    virtual bool hasTellPerms() const;
    virtual bool canUseAbility(enum AbilitiesIndex) const;
    virtual bool isWorldBuilder() const;
    virtual bool canUseCommandsWithoutCheatsEnabled() const;
    virtual bool isSelectorExpansionAllowed() const;
    virtual class NetworkIdentifier const & getSourceId() const;
    virtual enum SubClientId getSourceSubId() const;
    virtual class CommandOrigin const & getOutputReceiver() const;
    virtual struct CommandOriginIdentity getIdentity() const;
    virtual enum CommandOriginType getOriginType() const = 0;
    virtual struct CommandOriginData toCommandOriginData() const;
    virtual class mce::UUID const & getUUID() const;
    virtual void handleCommandOutputCallback(int, std::string &&, class Json::Value &&) const;
    virtual void updateValues();
    virtual class Vec3 const getExecutePosition(int, class CommandPositionFloat const &) const;
    virtual class CompoundTag serialize() const;
    virtual bool isValid() const = 0;
    virtual void _setUUID(class mce::UUID const &);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_COMMANDORIGIN
#endif
    MCAPI CommandOrigin();
    MCAPI std::unique_ptr<class CommandArea> getAreaAt(class BlockPos const &, class BlockPos const &, int, bool) const;
    MCAPI std::unique_ptr<class CommandArea> getAreaAt(class BlockPos const &, int) const;
    MCAPI std::unique_ptr<class CommandArea> getAreaAtWithBuffer(class BlockPos const &, class BlockPos const &, int, bool) const;
    MCAPI std::unique_ptr<class CommandArea> getAreaAtWithBuffer(class BlockPos const &, int) const;
    MCAPI static std::unique_ptr<class CommandOrigin> fromCommandOriginData(struct CommandOriginData const &, class Bedrock::NonOwnerPointer<class ILevel> const &, class NetworkIdentifier const &, enum SubClientId);

//protected:

protected:
MCAPI static class NetworkIdentifier sUnknownSource;

};