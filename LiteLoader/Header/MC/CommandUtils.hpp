// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#define EXTRA_INCLUDE_PART
#include "Extra/CommandUtilsAPI.hpp"
#undef EXTRA_INCLUDE_PART
namespace CommandUtils {
#include "Extra/CommandUtilsAPI.hpp"

MCAPI bool addItemInstanceComponents(class ItemInstance&, class Json::Value const&, std::string&);
MCAPI void addtoCSVList(std::string&, std::string const&);
MCAPI void alterSpawnableEntities(class LevelData&, struct ActorDefinitionIdentifier const&, struct ActorDefinitionIdentifier&);
MCAPI void broadcastPlayerSpawnedMobEvent(class Actor const&, class Actor&);
MCAPI bool canBeSummoned(struct ActorDefinitionIdentifier const&, class CommandOrigin const&);
MCAPI void clearBlockEntityContents(class BlockSource&, class BlockPos const&);
MCAPI class ItemStack createItemStack(std::string const&, int, int);
MCAPI std::vector<class ItemStack> createItemStacks(class ItemInstance const&, int, int&);
MCAPI bool createMapData(class Actor&, class ItemInstance&, class CommandOutput&);
MCAPI std::string getActorName(class Actor const&);
MCAPI class Vec3 getFeetPos(class Actor const*);
MCAPI std::vector<enum ActorType> getInvalidCommandEntities();
MCAPI std::vector<enum ActorType> getInvalidCommandEntities(bool, bool);
MCAPI class Player const* getOriginPlayer(class CommandOrigin const&);
MCAPI std::string getTelemetryErrorList(class CommandOutput const&);
MCAPI bool isActiveTickingChunk(__int64, __int64);
MCAPI bool isFunctionValid(class CommandOutput&, class FunctionEntry&, std::string const&);
MCAPI bool isPlayerSpawnedMob(class Actor const&, class Actor const&);
MCAPI void nameEntity(class Actor&, bool, std::string const&);
MCAPI void setInitEvent(struct ActorDefinitionIdentifier&, std::string const&);
MCAPI class Actor* spawnEntityAt(class BlockSource&, class Vec3 const&, struct ActorDefinitionIdentifier const&, struct ActorUniqueID&, class Actor*);
MCAPI std::string toJsonResult(std::string const&, class Json::Value const&);
MCAPI std::string const validatePath(class CommandOutput&, class CommandFilePath const&);


} // namespace CommandUtils