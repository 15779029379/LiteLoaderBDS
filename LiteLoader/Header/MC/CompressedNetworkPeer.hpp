/**
 * @file  CompressedNetworkPeer.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "NetworkPeer.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class CompressedNetworkPeer.
 *
 */
class CompressedNetworkPeer : public NetworkPeer {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_COMPRESSEDNETWORKPEER
public:
    class CompressedNetworkPeer& operator=(class CompressedNetworkPeer const &) = delete;
    CompressedNetworkPeer(class CompressedNetworkPeer const &) = delete;
    CompressedNetworkPeer() = delete;
#endif

public:
    virtual ~CompressedNetworkPeer();
    virtual void sendPacket(std::string const &, enum NetworkPeer::Reliability, int, unsigned short, enum Compressibility);
    virtual enum NetworkPeer::DataStatus receivePacket(std::string &, class std::shared_ptr<class std::chrono::time_point<struct std::chrono::steady_clock, class std::chrono::duration<__int64, struct std::ratio<1, 1000000000>>>> const &);
    virtual struct NetworkPeer::NetworkStatus getNetworkStatus() const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_COMPRESSEDNETWORKPEER
#endif
    MCAPI CompressedNetworkPeer(class std::shared_ptr<class NetworkPeer>);

};