/**
 * @file  Container.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Add include headers & pre-declares
class ItemStack;
#undef BEFORE_EXTRA

/**
 * @brief MC class Container.
 *
 */
class Container {

#define AFTER_EXTRA
// Add new members to class
public:
    LIAPI std::string getTypeName();

    LIAPI bool addItem_s(ItemStack* item);
    LIAPI bool addItemToFirstEmptySlot_s(ItemStack* item);
    LIAPI bool removeItem_s(int slot, unsigned int number);
    LIAPI ItemStack* getSlot(int slot);
    LIAPI std::vector<const ItemStack*> getAllSlots();
    LIAPI int getSize();

    // static??
    LIAPI bool hasContainer(Vec3& pos, int dim);
    // static??
    LIAPI Container* getContainerAt(Vec3& pos, int dim);
#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_CONTAINER
public:
    class Container& operator=(class Container const &) = delete;
    Container() = delete;
#endif

public:
    virtual ~Container();
    virtual void init();
    virtual void serverInitItemStackIds(int, int, class std::function<void (int, class ItemStack const &)>) = 0;
    virtual void addContentChangeListener(class ContainerContentChangeListener *);
    virtual void removeContentChangeListener(class ContainerContentChangeListener *);
    virtual class ItemStack const & getItem(int) const = 0;
    virtual bool hasRoomForItem(class ItemStack const &);
    virtual bool addItem(class ItemStack &);
    virtual bool addItemToFirstEmptySlot(class ItemStack const &);
    virtual void setItem(int, class ItemStack const &) = 0;
    virtual void setItemWithForceBalance(int, class ItemStack const &, bool);
    virtual void removeItem(int, int);
    virtual void removeAllItems();
    virtual void dropContents(class BlockSource &, class Vec3 const &, bool);
    virtual int getContainerSize() const = 0;
    virtual int getMaxStackSize() const = 0;
    virtual void startOpen(class Player &) = 0;
    virtual void stopOpen(class Player &) = 0;
    virtual std::vector<class ItemStack> getSlotCopies() const;
    virtual std::vector<class ItemStack const *> const getSlots() const;
    virtual int getItemCount(class ItemStack const &) const;
    virtual int findFirstSlotForItem(class ItemStack const &) const;
    virtual void __unk_vfn_22();
    virtual void __unk_vfn_23();
    virtual void setContainerChanged(int);
    virtual void setContainerMoved();
    virtual void setCustomName(std::string const &);
    virtual bool hasCustomName() const;
    virtual void readAdditionalSaveData(class CompoundTag const &);
    virtual void addAdditionalSaveData(class CompoundTag &);
    virtual void createTransactionContext(class std::function<void (class Container &, int, class ItemStack const &, class ItemStack const &)>, class std::function<void (void)>);
    virtual void initializeContainerContents(class BlockSource &);
    virtual bool isEmpty() const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_CONTAINER
    MCVAPI bool canPullOutItem(class BlockSource &, int, int, class ItemInstance const &) const;
    MCVAPI bool canPushInItem(class BlockSource &, int, int, class ItemInstance const &) const;
#endif
    MCAPI Container(enum ContainerType, std::string const &, bool);
    MCAPI Container(enum ContainerType);
    MCAPI Container(class Container const &);
    MCAPI enum ContainerType getContainerType() const;
    MCAPI enum ContainerType getGameplayContainerType() const;
    MCAPI int getItemCount(class std::function<bool (class ItemStack const &)>);
    MCAPI int getRedstoneSignalFromContainer(class BlockSource &);
    MCAPI class TypedRuntimeId<struct ContainerRuntimeIdTag, unsigned int, 0> const & getRuntimeId() const;
    MCAPI void initRuntimeId();
    MCAPI void serverInitItemStackIdsAll(class std::function<void (int, class ItemStack const &)>);
    MCAPI void setGameplayContainerType(enum ContainerType);
    MCAPI void triggerTransactionChange(int, class ItemStack const &, class ItemStack const &);
    MCAPI static enum ContainerType getContainerTypeId(std::string const &);
    MCAPI static std::string const & getContainerTypeName(enum ContainerType);

//protected:
    MCAPI void _initRuntimeId(class TypedRuntimeId<struct ContainerRuntimeIdTag, unsigned int, 0> const &);
    MCAPI void _serverInitId(int, class ItemStack &, class std::function<void (int, class ItemStack const &)>);

protected:
MCAPI static class BidirectionalUnorderedMap<enum ContainerType, std::string> const containerTypeMap;

};