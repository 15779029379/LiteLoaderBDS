/**
 * @file  ContainerManagerModel.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class ContainerManagerModel.
 *
 */
class ContainerManagerModel {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_CONTAINERMANAGERMODEL
public:
    class ContainerManagerModel& operator=(class ContainerManagerModel const &) = delete;
    ContainerManagerModel(class ContainerManagerModel const &) = delete;
    ContainerManagerModel() = delete;
#endif

public:
    virtual ~ContainerManagerModel();
    virtual enum ContainerID getContainerId() const;
    virtual void setContainerId(enum ContainerID);
    virtual enum ContainerType getContainerType() const;
    virtual void setContainerType(enum ContainerType);
    virtual void serverInitItemStackIds();
    virtual std::vector<class ItemStack> getItemCopies() const = 0;
    virtual void setSlot(int, class ItemStack const &, bool) = 0;
    virtual class ItemStack const & getSlot(int) const = 0;
    virtual void setData(int, int) = 0;
    virtual void broadcastChanges() = 0;
    virtual bool tick();
    virtual void debitPlayerLevels(int);
    virtual bool isCreativeMode() const;
    virtual bool isClientSide() const;
    virtual bool isServerAuthoritative() const;
    virtual bool isValid(float);
    virtual class ContainerScreenContext _postInit() = 0;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_CONTAINERMANAGERMODEL
#endif
    MCAPI ContainerManagerModel(enum ContainerID, class Player &);
    MCAPI class Player & getPlayer() const;
    MCAPI void postInit();

//protected:
    MCAPI void _addContainer(class std::shared_ptr<class ContainerModel>);
    MCAPI class ContainerScreenContext _containerScreenContext(class BlockPos const &);
    MCAPI class ContainerScreenContext _containerScreenContext(struct ActorUniqueID);
    MCAPI class std::shared_ptr<class ContainerModel> _getContainer(enum ContainerEnumName) const;
    MCAPI bool _isPlayerInRangeOfPosition(class BlockPos const &, float) const;
    MCAPI static void _appendCopies(std::vector<class ItemStack> &, std::vector<class ItemStack> const &);

protected:

};