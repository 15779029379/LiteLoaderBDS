/**
 * @file  ContainerModel.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class ContainerModel.
 *
 */
class ContainerModel {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_CONTAINERMODEL
public:
    class ContainerModel& operator=(class ContainerModel const &) = delete;
    ContainerModel(class ContainerModel const &) = delete;
    ContainerModel() = delete;
#endif

public:
    virtual void containerContentChanged(int);
    virtual ~ContainerModel();
    virtual void postInit();
    virtual void releaseResources();
    virtual int getContainerSize() const;
    virtual int getFilteredContainerSize() const;
    virtual void __unk_vfn_6();
    virtual class ContainerWeakRef getContainerWeakRef() const;
    virtual class ItemStack const & getItemStack(int) const;
    virtual std::vector<class ItemStack> const & getItems() const;
    virtual class ItemInstance const & getItemInstance(int) const;
    virtual class ItemStackBase const & getItemStackBase(int) const;
    virtual void __unk_vfn_12();
    virtual void setItem(int, class ItemStack const &);
    virtual bool isValid();
    virtual void __unk_vfn_15();
    virtual void __unk_vfn_16();
    virtual enum ContainerExpandStatus getItemExpandStatus(int) const;
    virtual std::string const & getItemGroupName(int) const;
    virtual void __unk_vfn_19();
    virtual class Container * _getContainer() const;
    virtual int _getContainerOffset() const;
    virtual void _onItemChanged(int, class ItemStack const &, class ItemStack const &);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_CONTAINERMODEL
    MCVAPI bool isExpanableItemFiltered(int) const;
    MCVAPI bool isItemFiltered(class ItemStackBase const &) const;
    MCVAPI bool isItemInstanceBased() const;
    MCVAPI void switchItemExpando(int);
    MCVAPI void tick(int);
#endif
    MCAPI ContainerModel(enum ContainerEnumName, int, enum ContainerCategory, bool);
    MCAPI bool _useLegacyTransactions() const;
    MCAPI enum ContainerEnumName getContainerEnumName() const;
    MCAPI int getContainerSlot(int) const;
    MCAPI std::string const & getContainerStringName() const;
    MCAPI int getModelSlot(int) const;
    MCAPI void initContainerRuntimeId();
    MCAPI bool isContainerSlotInRange(int) const;
    MCAPI bool isIntermediaryCategory() const;
    MCAPI void networkUpdateItem(int, class ItemStack const &, class ItemStack const &);
    MCAPI void registerOnContainerChangedCallback(class std::function<void (int, class ItemStack const &, class ItemStack const &)>);
    MCAPI void registerPlayerNotificationCallback(class std::function<void (int, class ItemStack const &, class ItemStack const &)>);
    MCAPI void serverInitItemStackIds();
    MCAPI void setClientUIContainer(class SparseContainerClient *);
    MCAPI void setItemSource(int, struct SlotData const &);

//protected:
    MCAPI void _init();
    MCAPI void _notifyPlayer(int, class ItemStack const &, class ItemStack const &);

//private:
    MCAPI void _onClientUIItemNetworkChanged(int, class ItemStack const &, class ItemStack const &);

protected:

private:

};