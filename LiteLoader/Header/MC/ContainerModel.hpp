// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
class ContainerModel {
public:
    virtual void containerContentChanged(int);
    virtual ~ContainerModel();
    virtual void postInit();
    virtual void releaseResources();
    virtual int getContainerSize();
    virtual int getFilteredContainerSize();
    virtual void unk_vfn_6();
    virtual class ContainerWeakRef getContainerWeakRef();
    virtual class ItemStack const& getItemStack(int);
    virtual void unk_vfn_9();
    virtual class ItemInstance const& getItemInstance(int);
    virtual void unk_vfn_11();
    virtual void unk_vfn_12();
    virtual void setItem(int, class ItemStack const&);
    virtual bool isValid();
    virtual void unk_vfn_15();
    virtual void unk_vfn_16();
    virtual void unk_vfn_17();
    virtual void unk_vfn_18();
    virtual void unk_vfn_19();
    virtual class Container* _getContainer();
    virtual int _getContainerOffset();
    virtual void _onItemChanged(int, class ItemStack const&, class ItemStack const&);

public:
    MCAPI bool isContainerSlotInRange(int) const;
    MCAPI void networkUpdateItem(int, class ItemStack const&, class ItemStack const&);
    MCAPI void registerOnContainerChangedCallback(class std::function<void(int, class ItemStack const&, class ItemStack const&)>);
    MCAPI void registerPlayerNotificationCallback(class std::function<void(int, class ItemStack const&, class ItemStack const&)>);

private:
    MCAPI void _onClientUIItemNetworkChanged(int, class ItemStack const&, class ItemStack const&);

protected:
    MCAPI void _init();
};