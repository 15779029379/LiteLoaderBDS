/**
 * @file  DiodeBlock.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "BlockLegacy.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class DiodeBlock.
 *
 */
class DiodeBlock : public BlockLegacy {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_DIODEBLOCK
public:
    class DiodeBlock& operator=(class DiodeBlock const &) = delete;
    DiodeBlock(class DiodeBlock const &) = delete;
    DiodeBlock() = delete;
#endif

public:
    virtual ~DiodeBlock();
    virtual void __unk_vfn_19();
    virtual void __unk_vfn_29();
    virtual void __unk_vfn_30();
    virtual void __unk_vfn_32();
    virtual void __unk_vfn_33();
    virtual void __unk_vfn_34();
    virtual void __unk_vfn_36();
    virtual void __unk_vfn_37();
    virtual void __unk_vfn_38();
    virtual void __unk_vfn_39();
    virtual void __unk_vfn_40();
    virtual void __unk_vfn_41();
    virtual void __unk_vfn_42();
    virtual void __unk_vfn_44();
    virtual void __unk_vfn_45();
    virtual void __unk_vfn_46();
    virtual void __unk_vfn_47();
    virtual void __unk_vfn_48();
    virtual void __unk_vfn_49();
    virtual bool isSignalSource() const;
    virtual int getDirectSignal(class BlockSource &, class BlockPos const &, int) const;
    virtual void __unk_vfn_59();
    virtual void __unk_vfn_60();
    virtual void onRedstoneUpdate(class BlockSource &, class BlockPos const &, int, bool) const;
    virtual void __unk_vfn_73();
    virtual void __unk_vfn_80();
    virtual bool mayPlace(class BlockSource &, class BlockPos const &) const;
    virtual void neighborChanged(class BlockSource &, class BlockPos const &, class BlockPos const &) const;
    virtual void __unk_vfn_105();
    virtual class Block const & getPlacementBlock(class Actor &, class BlockPos const &, unsigned char, class Vec3 const &, int) const;
    virtual void __unk_vfn_124();
    virtual void __unk_vfn_126();
    virtual void __unk_vfn_127();
    virtual void __unk_vfn_132();
    virtual int getVariant(class Block const &) const;
    virtual void __unk_vfn_148();
    virtual void __unk_vfn_157();
    virtual void __unk_vfn_168();
    virtual void __unk_vfn_169();
    virtual void __unk_vfn_170();
    virtual void __unk_vfn_177();
    virtual bool canSurvive(class BlockSource &, class BlockPos const &) const;
    virtual void __unk_vfn_188();
    virtual int getSignal(class BlockSource &, class BlockPos const &, int) const;
    virtual bool isLocked(class BlockSource &, class BlockPos const &) const;
    virtual bool isSameDiode(class Block const &) const;
    virtual bool shouldPrioritize(class BlockSource &, class BlockPos const &) const;
    virtual bool isOn() const;
    virtual bool shouldTurnOn(class BlockSource &, class BlockPos const &) const;
    virtual int getInputSignal(class BlockSource &, class BlockPos const &) const;
    virtual bool isAlternateInput(class Block const &) const;
    virtual int getAlternateSignal(class BlockSource &, class BlockPos const &) const;
    virtual int getOutputSignal(class Block const &) const;
    virtual int getTurnOffDelay(class Block const &) const;
    virtual int getTurnOnDelay(class Block const &) const = 0;
    virtual class Block const * getOnBlock(class Block const *) const = 0;
    virtual class Block const * getOffBlock(class Block const *) const = 0;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_DIODEBLOCK
    MCVAPI bool canSpawnOn() const;
#endif
    MCAPI DiodeBlock(std::string const &, int, bool);
    MCAPI static bool isDiode(class Block const &);

//protected:
    MCAPI int getAlternateSignalAt(class BlockSource &, class BlockPos const &, int) const;

protected:

};