/**
 * @file  DirectoryPackSource.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Bedrock.hpp"
#include "Core.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class DirectoryPackSource.
 *
 */
class DirectoryPackSource {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_DIRECTORYPACKSOURCE
public:
    class DirectoryPackSource& operator=(class DirectoryPackSource const &) = delete;
    DirectoryPackSource(class DirectoryPackSource const &) = delete;
    DirectoryPackSource() = delete;
#endif

public:
    virtual ~DirectoryPackSource();
    virtual void __unk_vfn_1();
    virtual void __unk_vfn_2();
    virtual enum PackOrigin getPackOrigin() const;
    virtual enum PackType getPackType() const;
    virtual class PackSourceReport load(class IPackManifestFactory &, class gsl::not_null<class Bedrock::NonOwnerPointer<class IContentKeyProvider const>> const &);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_DIRECTORYPACKSOURCE
    MCVAPI void forEachPack(class std::function<void (class Pack &)>);
    MCVAPI void forEachPackConst(class std::function<void (class Pack const &)>) const;
#endif
    MCAPI DirectoryPackSource(class Core::Path const &, enum PackType, enum PackOrigin, bool);
    MCAPI class Core::PathBuffer<std::string> const & getPath() const;
    MCAPI bool removePack(class Core::Path const &);
    MCAPI static void checkAndRemoveIncompletePacks(class Core::Path const &);

};