// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#include "Core.hpp"
#include "PackAccessStrategy.hpp"
#define EXTRA_INCLUDE_PART_DIRECTORYPACKWITHENCRYPTIONACCESSSTRATEGY
#include "Extra/DirectoryPackWithEncryptionAccessStrategyAPI.hpp"
#undef EXTRA_INCLUDE_PART_DIRECTORYPACKWITHENCRYPTIONACCESSSTRATEGY
class DirectoryPackWithEncryptionAccessStrategy : public PackAccessStrategy {
#include "Extra/DirectoryPackWithEncryptionAccessStrategyAPI.hpp"
public:
    virtual ~DirectoryPackWithEncryptionAccessStrategy();
    virtual unsigned __int64 getPackSize() const;
    virtual class ResourceLocation const& getPackLocation() const;
    virtual std::string const& getPackName() const;
    virtual bool isWritable() const;
    virtual void setIsTrusted(bool);
    virtual bool isTrusted() const;
    virtual bool hasAsset(class Core::Path const&, bool) const;
    virtual bool hasFolder(class Core::Path const&) const;
    virtual bool getAsset(class Core::Path const&, std::string&, bool) const;
    virtual bool deleteAsset(class Core::PathBuffer<std::string> const&);
    virtual bool writeAsset(class Core::Path const&, std::string const&);
    virtual void forEachIn(class Core::Path const&, class std::function<void(class Core::Path const&)>, bool) const;
    virtual void forEachInAssetSet(class Core::Path const&, class std::function<void(class Core::Path const&)>) const;
    virtual int /*enum PackAccessStrategyType*/ getStrategyType() const;
    virtual std::unique_ptr<class PackAccessStrategy> createSubPack(class Core::Path const&) const;
    virtual int /*enum PackAccessAssetGenerationResult*/ generateAssetSet();
    virtual void unk_vfn_18();
    virtual void unload();
    virtual bool hasUpgradeFiles() const;
    virtual class ContentIdentity readContentIdentity() const;

private:
    MCAPI bool _hasUnencryptedAsset(class Core::Path const&) const;
};