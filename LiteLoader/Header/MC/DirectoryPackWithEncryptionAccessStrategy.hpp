/**
 * @file  DirectoryPackWithEncryptionAccessStrategy.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Core.hpp"
#include "Bedrock.hpp"
#include "PackAccessStrategy.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class DirectoryPackWithEncryptionAccessStrategy.
 *
 */
class DirectoryPackWithEncryptionAccessStrategy : public PackAccessStrategy {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_DIRECTORYPACKWITHENCRYPTIONACCESSSTRATEGY
public:
    class DirectoryPackWithEncryptionAccessStrategy& operator=(class DirectoryPackWithEncryptionAccessStrategy const &) = delete;
    DirectoryPackWithEncryptionAccessStrategy(class DirectoryPackWithEncryptionAccessStrategy const &) = delete;
    DirectoryPackWithEncryptionAccessStrategy() = delete;
#endif

public:
    virtual ~DirectoryPackWithEncryptionAccessStrategy();
    virtual unsigned __int64 getPackSize() const;
    virtual class ResourceLocation const & getPackLocation() const;
    virtual std::string const & getPackName() const;
    virtual bool isWritable() const;
    virtual void setIsTrusted(bool);
    virtual bool isTrusted() const;
    virtual bool hasAsset(class Core::Path const &, bool) const;
    virtual bool hasFolder(class Core::Path const &) const;
    virtual bool getAsset(class Core::Path const &, std::string &, bool) const;
    virtual bool deleteAsset(class Core::PathBuffer<std::string> const &);
    virtual bool writeAsset(class Core::Path const &, std::string const &);
    virtual void forEachIn(class Core::Path const &, class std::function<void (class Core::Path const &)>, bool) const;
    virtual enum PackAccessStrategyType getStrategyType() const;
    virtual std::unique_ptr<class PackAccessStrategy> createSubPack(class Core::Path const &) const;
    virtual enum PackAccessAssetGenerationResult generateAssetSet();
    virtual void unload();
    virtual bool hasUpgradeFiles() const;
    virtual class ContentIdentity readContentIdentity() const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_DIRECTORYPACKWITHENCRYPTIONACCESSSTRATEGY
#endif
    MCAPI DirectoryPackWithEncryptionAccessStrategy(class ResourceLocation const &, class ResourceLocation const &, class gsl::not_null<class Bedrock::NonOwnerPointer<class IContentKeyProvider const>> const &);

//private:
    MCAPI bool _getUnencryptedAsset(class Core::Path const &, std::string &) const;
    MCAPI bool _hasUnencryptedAsset(class Core::Path const &) const;

private:

};