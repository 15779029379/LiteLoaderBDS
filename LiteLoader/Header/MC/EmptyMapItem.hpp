/**
 * @file  EmptyMapItem.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"
#include "Item.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class EmptyMapItem.
 *
 */
class EmptyMapItem : public Item {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_EMPTYMAPITEM
public:
    class EmptyMapItem& operator=(class EmptyMapItem const &) = delete;
    EmptyMapItem(class EmptyMapItem const &) = delete;
    EmptyMapItem() = delete;
#endif

public:
    virtual ~EmptyMapItem();
    virtual void __unk_vfn_7();
    virtual void __unk_vfn_11();
    virtual void __unk_vfn_14();
    virtual void __unk_vfn_16();
    virtual void __unk_vfn_52();
    virtual void __unk_vfn_54();
    virtual bool requiresInteract() const;
    virtual void __unk_vfn_67();
    virtual void __unk_vfn_71();
    virtual void __unk_vfn_72();
    virtual void __unk_vfn_73();
    virtual void __unk_vfn_76();
    virtual void __unk_vfn_80();
    virtual void __unk_vfn_81();
    virtual class ItemStack & use(class ItemStack &, class Player &) const;
    virtual std::string buildDescriptionId(class ItemDescriptor const &, class CompoundTag const *) const;
    virtual std::string getInteractText(class Player const &) const;
    virtual std::unique_ptr<class Packet> getUpdatePacket(class ItemStack const &, class Level &, class Actor &) const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_EMPTYMAPITEM
#endif
    MCAPI EmptyMapItem(std::string const &, short);
    MCAPI static void addPlayerMarker(class ItemStack &);
    MCAPI static void addPlayerMarker(class ItemInstance &);
    MCAPI static bool isLocatorMap(class ItemStack const &);

};