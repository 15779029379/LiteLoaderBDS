// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#define EXTRA_INCLUDE_PART_ENCHANT
#include "Extra/EnchantAPI.hpp"
#undef EXTRA_INCLUDE_PART_ENCHANT
class Enchant {
#include "Extra/EnchantAPI.hpp"
public:
    virtual ~Enchant();
    virtual bool isCompatibleWith(int /*enum Enchant::Type*/) const;
    virtual int getMinCost(int) const;
    virtual int getMaxCost(int) const;
    virtual void unk_vfn_4();
    virtual int getMaxLevel() const;
    virtual int getDamageProtection(int, class ActorDamageSource const&) const;
    virtual float getDamageBonus(int, class Actor const&) const;
    virtual void doPostAttack(class Actor&, class Actor&, int) const;
    virtual void doPostHurt(class ItemInstance&, class Actor&, class Actor&, int) const;
    virtual void unk_vfn_10();
    virtual void unk_vfn_11();
    virtual void unk_vfn_12();
    virtual void unk_vfn_13();
    virtual bool _isValidEnchantmentTypeForCategory(int /*enum Enchant::Type*/) const;

public:
    MCAPI std::string getDescriptionId() const;
    MCAPI class HashedString const& getStringId() const;
    MCAPI bool isAvailable() const;
    MCAPI bool isDisabled() const;

    MCAPI static void initEnchants();
    MCAPI static std::vector<std::unique_ptr<class Enchant>> mEnchants;
    MCAPI static void shutdownEnchants();
};