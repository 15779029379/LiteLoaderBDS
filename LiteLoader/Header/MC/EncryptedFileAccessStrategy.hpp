// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Core.hpp"
#include "DirectoryPackAccessStrategy.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class EncryptedFileAccessStrategy : public DirectoryPackAccessStrategy {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_ENCRYPTEDFILEACCESSSTRATEGY
public:
    class EncryptedFileAccessStrategy& operator=(class EncryptedFileAccessStrategy const&) = delete;
    EncryptedFileAccessStrategy(class EncryptedFileAccessStrategy const&) = delete;
    EncryptedFileAccessStrategy() = delete;
#endif

public:
    /*0*/ virtual ~EncryptedFileAccessStrategy();
    /*1*/ virtual void __unk_vfn_0();
    /*2*/ virtual void __unk_vfn_1();
    /*3*/ virtual void __unk_vfn_2();
    /*4*/ virtual void __unk_vfn_3();
    /*5*/ virtual void __unk_vfn_4();
    /*6*/ virtual bool hasAsset(class Core::Path const&, bool) const;
    /*7*/ virtual void __unk_vfn_5();
    /*8*/ virtual bool getAsset(class Core::Path const&, std::string&, bool) const;
    /*9*/ virtual bool deleteAsset(class Core::PathBuffer<std::string > const&);
    /*10*/ virtual bool writeAsset(class Core::Path const&, std::string const&);
    /*11*/ virtual void __unk_vfn_6();
    /*12*/ virtual std::unique_ptr<class PackAccessStrategy> createSubPack(class Core::Path const&) const;
    /*13*/ virtual enum PackAccessAssetGenerationResult generateAssetSet();
    /*14*/ virtual bool canRecurse() const;
    /*15*/ virtual void __unk_vfn_7();
    /*16*/ virtual class ContentIdentity readContentIdentity() const;
    /*
    inline bool isWritable() const{
        bool (EncryptedFileAccessStrategy::*rv)() const;
        *((void**)&rv) = dlsym("?isWritable@EncryptedFileAccessStrategy@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool isTrusted() const{
        bool (EncryptedFileAccessStrategy::*rv)() const;
        *((void**)&rv) = dlsym("?isTrusted@EncryptedFileAccessStrategy@@UEBA_NXZ");
        return (this->*rv)();
    }
    */
    MCAPI EncryptedFileAccessStrategy(class ResourceLocation const&, class ContentIdentity const&, class IContentKeyProvider const&, bool, class std::optional<class std::unordered_map<class Core::PathBuffer<std::string >, std::string, struct std::hash<class Core::PathBuffer<std::string > >, struct std::equal_to<class Core::PathBuffer<std::string > >, class std::allocator<struct std::pair<class Core::PathBuffer<std::string > const, std::string > > > >);
    MCAPI static bool isValidEncryptedPack(class Core::Path const&, class ContentIdentity&);

protected:
    MCAPI std::string _getContentsFile();

private:
    MCAPI static bool _getContentIdentityFromEncryptedStream(std::string&, class ContentIdentity&);
    MCAPI static void _transformStream(std::string&, std::string const&, unsigned __int64);

};