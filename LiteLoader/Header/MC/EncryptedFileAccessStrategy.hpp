// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "DirectoryPackAccessStrategy.hpp"
#include "Core.hpp"
#define EXTRA_INCLUDE_PART_ENCRYPTEDFILEACCESSSTRATEGY
#include "Extra/EncryptedFileAccessStrategyAPI.hpp"
#undef EXTRA_INCLUDE_PART_ENCRYPTEDFILEACCESSSTRATEGY
class EncryptedFileAccessStrategy : public DirectoryPackAccessStrategy {
#include "Extra/EncryptedFileAccessStrategyAPI.hpp"
public:
    /*0*/ virtual ~EncryptedFileAccessStrategy();
    /*1*/ virtual class ResourceLocation const& getPackLocation() const;
    /*2*/ virtual std::string const& getPackName() const;
    /*3*/ virtual bool isWritable() const;
    /*4*/ virtual void setIsTrusted(bool);
    /*5*/ virtual bool isTrusted() const;
    /*6*/ virtual bool hasAsset(class Core::Path const&, bool) const;
    /*7*/ virtual bool hasFolder(class Core::Path const&) const;
    /*8*/ virtual bool getAsset(class Core::Path const&, std::string&, bool) const;
    /*9*/ virtual bool deleteAsset(class Core::PathBuffer<std::string > const&);
    /*10*/ virtual bool writeAsset(class Core::Path const&, std::string const&);
    /*11*/ virtual int /*enum enum PackAccessStrategyType*/ getStrategyType() const;
    /*12*/ virtual std::unique_ptr<class PackAccessStrategy> createSubPack(class Core::Path const&) const;
    /*13*/ virtual int /*enum enum PackAccessAssetGenerationResult*/ generateAssetSet();
    /*14*/ virtual bool canRecurse() const;
    /*15*/ virtual void unload();
    /*16*/ virtual class ContentIdentity readContentIdentity() const;

    MCAPI static bool isValidEncryptedPack(class Core::Path const&, class ContentIdentity&);

protected:
    MCAPI std::string _getContentsFile();

private:
    MCAPI static bool _getContentIdentityFromEncryptedStream(std::string&, class ContentIdentity&);
    MCAPI static void _transformStream(std::string&, std::string const&, unsigned __int64);
};