/**
 * @file  EndGatewayBlockActor.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "BlockActor.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class EndGatewayBlockActor.
 *
 */
class EndGatewayBlockActor : public BlockActor {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_ENDGATEWAYBLOCKACTOR
public:
    class EndGatewayBlockActor& operator=(class EndGatewayBlockActor const &) = delete;
    EndGatewayBlockActor(class EndGatewayBlockActor const &) = delete;
    EndGatewayBlockActor() = delete;
#endif

public:
    virtual ~EndGatewayBlockActor();
    virtual void load(class Level &, class CompoundTag const &, class DataLoadHelper &);
    virtual bool save(class CompoundTag &) const;
    virtual void tick(class BlockSource &);
    virtual void onChanged(class BlockSource &);
    virtual void __unk_vfn_12();
    virtual void triggerEvent(int, int);
    virtual void __unk_vfn_16();
    virtual bool hasAlphaLayer() const;
    virtual void __unk_vfn_28();
    virtual void __unk_vfn_29();
    virtual void __unk_vfn_30();
    virtual void __unk_vfn_32();
    virtual void __unk_vfn_33();
    virtual void __unk_vfn_34();
    virtual std::unique_ptr<class BlockActorDataPacket> _getUpdatePacket(class BlockSource &);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_ENDGATEWAYBLOCKACTOR
#endif
    MCAPI EndGatewayBlockActor(class BlockPos const &);
    MCAPI bool canTeleport(class GetCollisionShapeInterface const *, class BlockSource const &) const;
    MCAPI class BlockPos getExitPosition() const;
    MCAPI int getParticleAmount(class BlockSource &, class BlockPos const &) const;
    MCAPI void setExitPosition(class BlockPos const &);
    MCAPI void teleportEntity(class Actor &);
MCAPI static int const COOLDOWN_TIME;
MCAPI static int const EVENT_COOLDOWN;
MCAPI static int const SPAWN_TIME;
    MCAPI static class BlockPos findExitPortal(class WorldGenerator &, class BlockPos const &);
    MCAPI static class BlockPos findTallestBlock(class BlockSource &, class BlockPos const &, int, bool);
    MCAPI static class BlockPos findValidSpawnAround(class BlockSource &, class BlockPos const &, bool, int);

//private:
    MCAPI static int _getHighestSection(class WorldGenerator &, class BlockVolume &, class BlockPos const &);

private:

};