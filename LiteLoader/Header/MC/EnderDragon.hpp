// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"
#include "Monster.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class EnderDragon : public Monster {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_ENDERDRAGON
public:
    class EnderDragon& operator=(class EnderDragon const&) = delete;
    EnderDragon(class EnderDragon const&) = delete;
    EnderDragon() = delete;
#endif

public:
    /*8*/ virtual void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const&);
    /*14*/ virtual ~EnderDragon();
    /*18*/ virtual void remove();
    /*41*/ virtual void __unk_vfn_41();
    /*61*/ virtual void __unk_vfn_61();
    /*68*/ virtual void __unk_vfn_68();
    /*80*/ virtual float getShadowRadius() const;
    /*81*/ virtual class Vec3 getHeadLookVector(float) const;
    /*82*/ virtual void __unk_vfn_82();
    /*87*/ virtual void __unk_vfn_87();
    /*91*/ virtual bool isImmobile() const;
    /*94*/ virtual void __unk_vfn_94();
    /*97*/ virtual void __unk_vfn_97();
    /*104*/ virtual void __unk_vfn_104();
    /*106*/ virtual void __unk_vfn_106();
    /*107*/ virtual void __unk_vfn_107();
    /*108*/ virtual void __unk_vfn_108();
    /*119*/ virtual void setSitting(bool);
    /*134*/ virtual bool isInvulnerableTo(class ActorDamageSource const&) const;
    /*140*/ virtual void onBounceStarted(class BlockPos const&, class Block const&);
    /*142*/ virtual void handleEntityEvent(enum ActorEvent, int);
    /*172*/ virtual struct ActorUniqueID getSourceUniqueID() const;
    /*181*/ virtual bool canChangeDimensions() const;
    /*182*/ virtual void __unk_vfn_182();
    /*194*/ virtual bool canBePulledIntoVehicle() const;
    /*196*/ virtual void __unk_vfn_196();
    /*212*/ virtual bool canBeAffected(class MobEffectInstance const&) const;
    /*221*/ virtual void __unk_vfn_221();
    /*222*/ virtual void __unk_vfn_222();
    /*228*/ virtual void __unk_vfn_228();
    /*242*/ virtual void __unk_vfn_242();
    /*245*/ virtual void __unk_vfn_245();
    /*255*/ virtual void updateEntitySpecificMolangVariables(class RenderParams&);
    /*257*/ virtual void __unk_vfn_257();
    /*258*/ virtual bool _hurt(class ActorDamageSource const&, int, bool, bool);
    /*265*/ virtual void __unk_vfn_265();
    /*273*/ virtual void _onSizeUpdated();
    /*274*/ virtual void __unk_vfn_274();
    /*290*/ virtual void aiStep();
    /*303*/ virtual void __unk_vfn_303();
    /*307*/ virtual void __unk_vfn_307();
    /*338*/ virtual void __unk_vfn_338();
    /*348*/ virtual void _serverAiMobStep();
    /*352*/ virtual void tickDeath();
    /*354*/ virtual void __unk_vfn_354();
    /*
    inline bool isFishable() const{
        bool (EnderDragon::*rv)() const;
        *((void**)&rv) = dlsym("?isFishable@EnderDragon@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool canExistInPeaceful() const{
        bool (EnderDragon::*rv)() const;
        *((void**)&rv) = dlsym("?canExistInPeaceful@EnderDragon@@UEBA_NXZ");
        return (this->*rv)();
    }
    */
    MCAPI EnderDragon(class ActorDefinitionGroup*, struct ActorDefinitionIdentifier const&, class EntityContext&);
    MCAPI void dieNaturally();
    MCAPI int findClosestNode(class Vec3 const&);
    MCAPI int findClosestNode();
    MCAPI std::unique_ptr<class Path> findPath(int, int, class PathfinderNode*);
    MCAPI int getFlameCount() const;
    MCAPI float getFlapTime() const;
    MCAPI class BlockPos getHeadPos() const;
    MCAPI std::vector<float> const getLatencyPos(int, float) const;
    MCAPI int getNumCrystalsAlive();
    MCAPI class Vec3 getTargetPos() const;
    MCAPI void incrementFlameCount();
    MCAPI void onCrystalDestroyed(class EnderCrystal const&, class BlockPos, class ActorDamageSource const&);
    MCAPI void resetFlameCount();
    MCAPI void setDragonKilledCallback(class std::function<void (class EnderDragon& )>);
    MCAPI void setHasDragonPreviouslyBeenKilled(bool);
    MCAPI void setNumCrystalsAlive(int);
    MCAPI void setTargetPos(class Vec3);
    MCAPI void setTurnSpeed(float);

protected:
    MCAPI bool _hurt(class AABB*, class ActorDamageSource const&, float);

private:
    MCAPI void checkCrystals();
    MCAPI bool checkWalls(class AABB);
    MCAPI void hurtEntities(class gsl::span<class gsl::not_null<class Actor* >, -1>) const;
    MCAPI void knockBack(class gsl::span<class gsl::not_null<class Actor* >, -1>) const;
    MCAPI std::unique_ptr<class Path> reconstructPath(class PathfinderNode&, class PathfinderNode&, enum PathCompletionType);
    MCAPI static int GROWL_INTERVAL_MAX;
    MCAPI static int GROWL_INTERVAL_MIN;
    MCAPI static int MAX_PATH_RADIUS;
    MCAPI static float SITTING_ALLOWED_DAMAGE_PERCENTAGE;

};