// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#include "Monster.hpp"
#define EXTRA_INCLUDE_PART_ENDERDRAGON
#include "Extra/EnderDragonAPI.hpp"
#undef EXTRA_INCLUDE_PART_ENDERDRAGON
class EnderDragon : public Monster {
#include "Extra/EnderDragonAPI.hpp"
public:
    virtual void reloadHardcoded(int /*enum Actor::InitializationMethod*/, class VariantParameterList const&);
    virtual ~EnderDragon();
    virtual void remove();
    virtual bool isRuntimePredictedMovementEnabled() const;
    virtual void unk_vfn_22();
    virtual class Vec3 getInterpolatedRidingOffset(float) const;
    virtual void unk_vfn_41();
    virtual float getRidingHeight();
    virtual void unk_vfn_61();
    virtual void unk_vfn_68();
    virtual float getCameraOffset() const;
    virtual float getShadowRadius() const;
    virtual class Vec3 getHeadLookVector(float) const;
    virtual void unk_vfn_82();
    virtual void unk_vfn_87();
    virtual void playerTouch(class Player&);
    virtual bool isImmobile() const;
    virtual void unk_vfn_94();
    virtual void unk_vfn_97();
    virtual bool isDamageBlocked(class ActorDamageSource const&) const;
    virtual void unk_vfn_104();
    virtual void unk_vfn_106();
    virtual void unk_vfn_107();
    virtual void unk_vfn_108();
    virtual bool isValidTarget(class Actor*) const;
    virtual void adjustDamageAmount(int&) const;
    virtual void setSitting(bool);
    virtual void onTame();
    virtual void onFailedTame();
    virtual void vehicleLanded(class Vec3 const&, class Vec3 const&);
    virtual bool isInvulnerableTo(class ActorDamageSource const&) const;
    virtual void onBounceStarted(class BlockPos const&, class Block const&);
    virtual void handleEntityEvent(int /*enum ActorEvent*/, int);
    virtual void unk_vfn_143();
    virtual void awardKillScore(class Actor&, int);
    virtual class HashedString const& queryEntityRenderer() const;
    virtual struct ActorUniqueID getSourceUniqueID() const;
    virtual int getPortalWaitTime() const;
    virtual bool canChangeDimensions() const;
    virtual void unk_vfn_182();
    virtual struct ActorUniqueID getControllingPlayer() const;
    virtual bool canPickupItem(class ItemStack const&) const;
    virtual bool canBePulledIntoVehicle() const;
    virtual void unk_vfn_196();
    virtual bool canSynchronizeNewEntity() const;
    virtual bool canBeAffected(class MobEffectInstance const&) const;
    virtual void unk_vfn_221();
    virtual void unk_vfn_222();
    virtual bool isWorldBuilder() const;
    virtual void unk_vfn_228();
    virtual bool isAdventure() const;
    virtual bool canDestroyBlock(class Block const&) const;
    virtual void setAuxValue(int);
    virtual void stopSpinAttack();
    virtual void unk_vfn_242();
    virtual void unk_vfn_245();
    virtual void updateEntitySpecificMolangVariables(class RenderParams&);
    virtual void unk_vfn_257();
    virtual bool _hurt(class ActorDamageSource const&, int, bool, bool);
    virtual void unk_vfn_265();
    virtual void _onSizeUpdated();
    virtual void unk_vfn_274();
    virtual void spawnAnim();
    virtual void aiStep();
    virtual bool checkSpawnRules(bool);
    virtual int getItemUseDuration() const;
    virtual float getItemUseStartupProgress() const;
    virtual float getItemUseIntervalProgress() const;
    virtual void unk_vfn_304();
    virtual bool isAlliedTo(class Mob*);
    virtual void unk_vfn_308();
    virtual void sendArmorDamage(class std::bitset<4> const&);
    virtual void onBorn(class Actor&, class Actor&);
    virtual void unk_vfn_336();
    virtual void unk_vfn_339();
    virtual void _serverAiMobStep();
    virtual void tickDeath();
    virtual void unk_vfn_355();

public:
    MCAPI void dieNaturally();
    MCAPI int findClosestNode(class Vec3 const&);
    MCAPI int findClosestNode();
    MCAPI std::unique_ptr<class Path> findPath(int, int, class PathfinderNode*);
    MCAPI int getFlameCount() const;
    MCAPI float getFlapTime() const;
    MCAPI class BlockPos getHeadPos() const;
    MCAPI std::vector<float> const getLatencyPos(int, float) const;
    MCAPI int getNumCrystalsAlive();
    MCAPI class Vec3 getTargetPos() const;
    MCAPI void incrementFlameCount();
    MCAPI void onCrystalDestroyed(class EnderCrystal const&, class BlockPos, class ActorDamageSource const&);
    MCAPI void resetFlameCount();
    MCAPI void setDragonKilledCallback(class std::function<void(class EnderDragon&)>);
    MCAPI void setHasDragonPreviouslyBeenKilled(bool);
    MCAPI void setNumCrystalsAlive(int);
    MCAPI void setTargetPos(class Vec3);
    MCAPI void setTurnSpeed(float);

private:
    MCAPI void checkCrystals();
    MCAPI bool checkWalls(class AABB);
    MCAPI void hurtEntities(class gsl::span<class gsl::not_null<class Actor*>, -1>) const;
    MCAPI void knockBack(class gsl::span<class gsl::not_null<class Actor*>, -1>) const;
    MCAPI std::unique_ptr<class Path> reconstructPath(class PathfinderNode&, class PathfinderNode&, enum PathCompletionType);

    MCAPI static int GROWL_INTERVAL_MAX;
    MCAPI static int GROWL_INTERVAL_MIN;
    MCAPI static int MAX_PATH_RADIUS;
    MCAPI static float SITTING_ALLOWED_DAMAGE_PERCENTAGE;

protected:
    MCAPI bool _hurt(class AABB*, class ActorDamageSource const&, float);
};