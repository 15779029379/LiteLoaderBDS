/**
 * @file  FileSecureStorage.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Core.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class FileSecureStorage.
 *
 */
class FileSecureStorage {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_FILESECURESTORAGE
public:
    class FileSecureStorage& operator=(class FileSecureStorage const &) = delete;
    FileSecureStorage(class FileSecureStorage const &) = delete;
    FileSecureStorage() = delete;
#endif

public:
    virtual ~FileSecureStorage();
    virtual bool add(std::string const &, std::string const &);
    virtual bool addOrUpdate(std::string const &, std::string const &);
    virtual bool remove(std::string const &);
    virtual bool get(std::string const &, std::string &);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_FILESECURESTORAGE
#endif
    MCAPI FileSecureStorage(class Core::PathBuffer<std::string> const &, class Core::PathBuffer<class Core::StackString<char, 1024>> const &, class ISecureStorageKeySystem *, class Core::Path const &, class FileSecureStorage::StorageSystem *);

//protected:
    MCAPI bool _init(bool);

//private:
    MCAPI std::string _contentKeyObfuscator(std::string const &, std::string const &);
    MCAPI class SecureStorageKey _getSecureStorageKey() const;
    MCAPI void _initalizeSymmetricEncyrption(std::string &, bool);
    MCAPI void _rebuildSecureStorageFile();

protected:

private:

};