/**
 * @file  FillingContainer.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Container.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class FillingContainer.
 *
 */
class FillingContainer : public Container {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_FILLINGCONTAINER
public:
    FillingContainer(class FillingContainer const &) = delete;
    FillingContainer() = delete;
#endif

public:
    virtual ~FillingContainer();
    virtual void serverInitItemStackIds(int, int, class std::function<void (int, class ItemStack const &)>);
    virtual class ItemStack const & getItem(int) const;
    virtual void setItem(int, class ItemStack const &);
    virtual void setItemWithForceBalance(int, class ItemStack const &, bool);
    virtual void removeItem(int, int);
    virtual int getContainerSize() const;
    virtual int getMaxStackSize() const;
    virtual void startOpen(class Player &);
    virtual void stopOpen(class Player &);
    virtual void __unk_vfn_22();
    virtual void __unk_vfn_23();
    virtual bool add(class ItemStack &);
    virtual bool canAdd(class ItemStack const &) const;
    virtual void clearSlot(int);
    virtual int clearInventory(int);
    virtual void load(class ListTag const &, class SemVersion const &, class Level &);
    virtual int getEmptySlotsCount() const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_FILLINGCONTAINER
#endif
    MCAPI FillingContainer(class Player *, int, enum ContainerType);
    MCAPI int getHotbarSize() const;
    MCAPI int getSlotWithItem(class ItemStack const &, bool, bool) const;
    MCAPI bool hasResource(int);
    MCAPI class FillingContainer & operator=(class FillingContainer const &);
    MCAPI int removeResource(class ItemStack const &, bool, bool, int);
    MCAPI bool removeResource(int);
    MCAPI std::unique_ptr<class ListTag> save() const;
    MCAPI void swapSlots(int, int);

//protected:
    MCAPI int _addResource(class ItemStack const &);
    MCAPI void _doDrop(class ItemStack &, bool);
    MCAPI void _fixBackwardCompabilityItem(class ItemStack &);
    MCAPI int _getEmptySlotsCount(int, int) const;
    MCAPI int _getFreeSlot() const;
    MCAPI int _getSlot(int) const;
    MCAPI int _getSlotWithRemainingSpace(class ItemStack const &) const;
    MCAPI bool _isCreative() const;
    MCAPI void _release(int);

protected:

};