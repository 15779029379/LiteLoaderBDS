// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#include "Container.hpp"
#define EXTRA_INCLUDE_PART
#include "Extra/FillingContainerAPI.hpp"
#undef EXTRA_INCLUDE_PART
class FillingContainer : public Container {
#include "Extra/FillingContainerAPI.hpp"
public:
    virtual ~FillingContainer();
    virtual void init();
    virtual void serverInitItemStackIds(int, int, class std::function<void(int, class ItemStack const&)>);
    virtual class ItemStack const& getItem(int);
    virtual void setItem(int, class ItemStack const&);
    virtual void setItemWithForceBalance(int, class ItemStack const&, bool);
    virtual void removeItem(int, int);
    virtual void unk_vfn_14();
    virtual int getMaxStackSize();
    virtual void startOpen(class Player&);
    virtual void stopOpen(class Player&);
    virtual void unk_vfn_22();
    virtual void unk_vfn_23();
    virtual void unk_vfn_31();
    virtual bool add(class ItemStack&);
    virtual bool canAdd(class ItemStack const&);
    virtual void clearSlot(int);
    virtual int clearInventory(int);
    virtual void load(class ListTag const&, class SemVersion const&, class Level&);
    virtual int getEmptySlotsCount();

public:
    MCAPI int getHotbarSize() const;
    MCAPI int getSlotWithItem(class ItemStack const&, bool, bool) const;
    MCAPI bool hasResource(int);
    MCAPI int removeResource(class ItemStack const&, bool, bool, int);
    MCAPI bool removeResource(int);
    MCAPI std::unique_ptr<class ListTag> save();
    MCAPI void swapSlots(int, int);

protected:
    MCAPI int _addResource(class ItemStack const&);
    MCAPI void _doDrop(class ItemStack&, bool);
    MCAPI void _fixBackwardCompabilityItem(class ItemStack&);
    MCAPI int _getEmptySlotsCount(int, int) const;
    MCAPI int _getFreeSlot() const;
    MCAPI int _getSlot(int) const;
    MCAPI int _getSlotWithRemainingSpace(class ItemStack const&) const;
    MCAPI bool _isCreative() const;
    MCAPI void _release(int);
};