/**
 * @file  GlowStickItem.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"
#include "ChemistryStickItem.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class GlowStickItem.
 *
 */
class GlowStickItem : public ChemistryStickItem {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_GLOWSTICKITEM
public:
    class GlowStickItem& operator=(class GlowStickItem const &) = delete;
    GlowStickItem(class GlowStickItem const &) = delete;
    GlowStickItem() = delete;
#endif

public:
    virtual ~GlowStickItem();
    virtual void __unk_vfn_7();
    virtual void __unk_vfn_11();
    virtual void __unk_vfn_14();
    virtual void __unk_vfn_16();
    virtual void __unk_vfn_52();
    virtual void __unk_vfn_54();
    virtual void __unk_vfn_67();
    virtual bool isValidAuxValue(int) const;
    virtual void __unk_vfn_71();
    virtual void __unk_vfn_72();
    virtual void __unk_vfn_73();
    virtual void __unk_vfn_76();
    virtual void __unk_vfn_80();
    virtual void __unk_vfn_81();
    virtual std::string buildDescriptionId(class ItemDescriptor const &, class CompoundTag const *) const;
    virtual struct Brightness getLightEmission(int) const;
    virtual struct TextureUVCoordinateSet const & getIcon(class ItemStackBase const &, int, bool) const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_GLOWSTICKITEM
#endif
    MCAPI GlowStickItem(std::string const &, int);
MCAPI static enum ItemColor const COLORS[];
MCAPI static int const MAX_ACTIVE_TICKS;

};