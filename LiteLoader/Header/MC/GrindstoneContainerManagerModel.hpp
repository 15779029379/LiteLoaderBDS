// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "ContainerManagerModel.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class GrindstoneContainerManagerModel : public ContainerManagerModel {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_GRINDSTONECONTAINERMANAGERMODEL
public:
    class GrindstoneContainerManagerModel& operator=(class GrindstoneContainerManagerModel const&) = delete;
    GrindstoneContainerManagerModel(class GrindstoneContainerManagerModel const&) = delete;
    GrindstoneContainerManagerModel() = delete;
#endif

public:
    /*0*/ virtual ~GrindstoneContainerManagerModel();
    /*1*/ virtual enum ContainerID getContainerId() const;
    /*2*/ virtual void setContainerId(enum ContainerID);
    /*3*/ virtual enum ContainerType getContainerType() const;
    /*4*/ virtual void setContainerType(enum ContainerType);
    /*5*/ virtual std::vector<class ItemStack> getItemCopies() const;
    /*6*/ virtual void setSlot(int, class ItemStack const&, bool);
    /*7*/ virtual class ItemStack const& getSlot(int) const;
    /*8*/ virtual void __unk_vfn_0();
    /*9*/ virtual void __unk_vfn_1();
    /*10*/ virtual bool isValid(float);
    /*11*/ virtual class ContainerScreenContext _postInit();
    /*
    inline void setData(int a0, int a1){
        void (GrindstoneContainerManagerModel::*rv)(int, int);
        *((void**)&rv) = dlsym("?setData@GrindstoneContainerManagerModel@@UEAAXHH@Z");
        return (this->*rv)(std::forward<int>(a0), std::forward<int>(a1));
    }
    inline void broadcastChanges(){
        void (GrindstoneContainerManagerModel::*rv)();
        *((void**)&rv) = dlsym("?broadcastChanges@GrindstoneContainerManagerModel@@UEAAXXZ");
        return (this->*rv)();
    }
    */
    MCAPI GrindstoneContainerManagerModel(enum ContainerID, class Player&, class BlockPos const&);
    MCAPI static int const ADDITIONAL_SLOT;
    MCAPI static int const INPUT_SLOT;
    MCAPI static int const RESULT_SLOT;

protected:

private:

};