/**
 * @file  Horse.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"
#include "Animal.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class Horse.
 *
 */
class Horse : public Animal {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_HORSE
public:
    class Horse& operator=(class Horse const &) = delete;
    Horse(class Horse const &) = delete;
    Horse() = delete;
#endif

public:
    virtual void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const &);
    virtual ~Horse();
    virtual class Vec3 getInterpolatedRidingOffset(float) const;
    virtual void __unk_vfn_41();
    virtual void normalTick();
    virtual void positionPassenger(class Actor &, float);
    virtual void __unk_vfn_61();
    virtual void __unk_vfn_68();
    virtual float getShadowRadius() const;
    virtual void __unk_vfn_82();
    virtual void __unk_vfn_85();
    virtual void __unk_vfn_88();
    virtual bool isImmobile() const;
    virtual void __unk_vfn_96();
    virtual void __unk_vfn_99();
    virtual void __unk_vfn_106();
    virtual void __unk_vfn_108();
    virtual void __unk_vfn_109();
    virtual void __unk_vfn_111();
    virtual void onFailedTame();
    virtual void setStanding(bool);
    virtual void feed(int);
    virtual void handleEntityEvent(enum ActorEvent, int);
    virtual bool canFreeze() const;
    virtual void __unk_vfn_182();
    virtual struct ActorUniqueID getControllingPlayer() const;
    virtual void causeFallDamage(float, float, class ActorDamageSource);
    virtual void handleFallDistanceOnServer(float, float, bool);
    virtual void onSynchedDataUpdate(int);
    virtual void __unk_vfn_196();
    virtual void openContainerComponent(class Player &);
    virtual void __unk_vfn_222();
    virtual void __unk_vfn_223();
    virtual void __unk_vfn_248();
    virtual void __unk_vfn_251();
    virtual void die(class ActorDamageSource const &);
    virtual void updateEntitySpecificMolangVariables(class RenderParams &);
    virtual void __unk_vfn_269();
    virtual bool _hurt(class ActorDamageSource const &, float, bool, bool);
    virtual void _playStepSound(class BlockPos const &, class Block const &);
    virtual void __unk_vfn_277();
    virtual void __unk_vfn_285();
    virtual void travel(float, float, float);
    virtual void aiStep();
    virtual void __unk_vfn_313();
    virtual void __unk_vfn_317();
    virtual int getArmorValue() const;
    virtual void __unk_vfn_351();
    virtual void __unk_vfn_365();
    virtual void setType(int);
    virtual int getType() const;
    virtual void setHorseEating(bool);
    virtual float getStandAnim(float) const;
    virtual bool isAdult() const;
    virtual bool isHorseEating() const;
    virtual bool isMouthOpen() const;
    virtual bool isTailMoving() const;
    virtual void makeMad();
    virtual bool tameToPlayer(class Player &, bool);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_HORSE
    MCVAPI bool useNewAi() const;
#endif
    MCAPI Horse(class ActorDefinitionGroup *, struct ActorDefinitionIdentifier const &, class EntityContext &);
    MCAPI void postNormalTick();
    MCAPI void postTravel(class Actor *, bool, enum HorsePostTravelType);
MCAPI static int const DONKEY_CHEST_COUNT;
    MCAPI static class Vec3 getInterpolatedRidingOffset(class Vec2 const &, float, float, float);

//private:
    MCAPI void openMouth();
    MCAPI void setHorseFlag(enum HorseFlags, bool);
    MCAPI bool setHorseType(enum ActorType &);

private:
MCAPI static int const DATA_AGE;

};