// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
class I18n {

public:
    MCAPI static char const* const const NeutralLangCode;
    MCAPI static void addI18nObserver(class I18nObserver&);
    MCAPI static void chooseLanguage(std::string const&);
    MCAPI static void chooseLanguage(class Localization const&);
    MCAPI static std::string get(std::string const&);
    MCAPI static class optional_ref<class Localization const> getCurrentLanguage();
    MCAPI static std::string const& getLocaleCodeFor(std::string const&);
    MCAPI static std::string getPackKeywordValue(class PackManifest const&, std::string const&);
    MCAPI static std::string getPackKeywordValueForTelemetry(class PackManifest const&, std::string const&);
    MCAPI static bool isPackKeyword(std::string const&);
    MCAPI static void loadAllLanguages(class ResourcePackManager&);

private:
    MCAPI static class Localization* _findLocaleFor(std::string const&);
    MCAPI static std::string _generatePackKeyPrefix(class PackManifest const&);
    MCAPI static class Localization* _getAdditionalTranslationsBackupLocale(std::string const&, bool);
    MCAPI static class Localization& _getPackKeywordLocale(std::string const&);
    MCAPI static class std::mutex mAdditionalTranslationsBackupMutex;
    MCAPI static class Localization const* mCurrentLanguage;
    MCAPI static class Localization const* mCurrentPackMetaLanguage;
    MCAPI static class Localization const mEmptyLanguage;
    MCAPI static std::vector<std::string> mLanguageCodes;
    MCAPI static bool mLanguageSupportsHypenSplitting;
    MCAPI static std::vector<std::unique_ptr<class Localization>> mLanguages;
    MCAPI static std::vector<std::string> const mPackReservedKeys;
    MCAPI static class ResourcePackManager* mResourcePackManager;
    MCAPI static class Core::Subject<class I18nObserver, class Core::SingleThreadedLock> mSubject;
};