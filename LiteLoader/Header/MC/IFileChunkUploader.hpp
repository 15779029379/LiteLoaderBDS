/**
 * @file  IFileChunkUploader.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class IFileChunkUploader.
 *
 */
class IFileChunkUploader {

#define AFTER_EXTRA
// Add Member There
public:
enum UploadStreamResult;

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_IFILECHUNKUPLOADER
public:
    class IFileChunkUploader& operator=(class IFileChunkUploader const &) = delete;
    IFileChunkUploader(class IFileChunkUploader const &) = delete;
#endif

public:
    virtual ~IFileChunkUploader();
    virtual void __unk_vfn_1();
    virtual void initFileUploader(std::string const &, struct FileInfo const &, int, class Json::Value const &, class std::function<void (bool)>) = 0;
    virtual void getServerMissingChunks(struct FileInfo const &, class std::function<void (std::vector<struct FileChunkInfo>)>) const;
    virtual void __unk_vfn_4();
    virtual void uploadChunk(struct FileInfo const &, struct FileChunkInfo const &, std::vector<unsigned char> const &, class std::function<void (bool)>);
    virtual void uploadStream(struct FileInfo const &, unsigned __int64, std::string const &, class std::function<void (enum IFileChunkUploader::UploadStreamResult)>);
    virtual bool canCancelUpload(struct FileInfo const &) const = 0;
    virtual void __unk_vfn_8() = 0;
    virtual enum UploadError getInitErrorCode() const = 0;
    virtual float getUploadProgress(struct FileInfo const &) const = 0;
    virtual struct FileChunkInfo getChunkInfo(struct FileInfo const &, int) const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_IFILECHUNKUPLOADER
    MCVAPI void confirmChunkReceived(struct FileInfo const &, struct FileChunkInfo const &);
    MCVAPI void update();
#endif
    MCAPI IFileChunkUploader();

};