/**
 * @file  InMemoryEnv.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Core.hpp"
#include "TransactionalWorldBlockTarget.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class InMemoryEnv.
 *
 */
class InMemoryEnv : public TransactionalWorldBlockTarget {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_INMEMORYENV
public:
    class InMemoryEnv& operator=(class InMemoryEnv const &) = delete;
    InMemoryEnv(class InMemoryEnv const &) = delete;
    InMemoryEnv() = delete;
#endif

public:
    virtual ~InMemoryEnv();
    virtual class leveldb::Status NewSequentialFile(std::string const &, class leveldb::SequentialFile **);
    virtual class leveldb::Status NewRandomAccessFile(std::string const &, class leveldb::RandomAccessFile **);
    virtual class leveldb::Status NewWritableFile(std::string const &, class leveldb::WritableFile **);
    virtual class leveldb::Status NewAppendableFile(std::string const &, class leveldb::WritableFile **);
    virtual bool FileExists(std::string const &);
    virtual class leveldb::Status GetChildren(std::string const &, std::vector<std::string> *);
    virtual class leveldb::Status DeleteFileA(std::string const &);
    virtual class leveldb::Status RenameFile(std::string const &, std::string const &);
    virtual void flushToPermanentStorage();
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_INMEMORYENV
#endif
    MCAPI InMemoryEnv(class leveldb::Env *, class Core::Path const &);

//private:
    MCAPI void _flushWithTransaction();

private:

};