// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#include "BlockActor.hpp"
#define EXTRA_INCLUDE_PART_ITEMFRAMEBLOCKACTOR
#include "Extra/ItemFrameBlockActorAPI.hpp"
#undef EXTRA_INCLUDE_PART_ITEMFRAMEBLOCKACTOR
class ItemFrameBlockActor : public BlockActor {
#include "Extra/ItemFrameBlockActorAPI.hpp"
public:
    virtual ~ItemFrameBlockActor();
    virtual void load(class Level&, class CompoundTag const&, class DataLoadHelper&);
    virtual bool save(class CompoundTag&);
    virtual void saveBlockData(class CompoundTag&, class BlockSource&);
    virtual void loadBlockData(class CompoundTag const&, class BlockSource&, class DataLoadHelper&);
    virtual void onCustomTagLoadDone(class BlockSource&);
    virtual void tick(class BlockSource&);
    virtual void onChanged(class BlockSource&);
    virtual void onPlace(class BlockSource&);
    virtual void unk_vfn_12();
    virtual void onRemoved(class BlockSource&);
    virtual void triggerEvent(int, int);
    virtual void unk_vfn_15();
    virtual void unk_vfn_16();
    virtual void unk_vfn_17();
    virtual void unk_vfn_18();
    virtual class BlockActor* getCrackEntity(class BlockSource&, class BlockPos const&);
    virtual void unk_vfn_21();
    virtual std::string getName();
    virtual std::string getImmersiveReaderText(class BlockSource&);
    virtual void unk_vfn_26();
    virtual class PistonBlockActor* getOwningPiston(class BlockSource&);
    virtual void unk_vfn_28();
    virtual void unk_vfn_29();
    virtual void unk_vfn_30();
    virtual void unk_vfn_31();
    virtual void unk_vfn_32();
    virtual void unk_vfn_33();
    virtual std::unique_ptr<class BlockActorDataPacket> _getUpdatePacket(class BlockSource&);
    virtual void _onUpdatePacket(class CompoundTag const&, class BlockSource&);
    virtual bool _playerCanUpdate(class Player const&);

public:
    MCAPI ItemFrameBlockActor(class BlockPos, enum BlockActorType, std::string);
    MCAPI ItemFrameBlockActor(class BlockPos);
    MCAPI void actuallyDropItem(class BlockSource&, bool);
    MCAPI void dropFramedItem(class BlockSource&, bool);
    MCAPI class ItemInstance& getFramedItem();
    MCAPI float getRotation();
    MCAPI void rotateFramedItem();
    MCAPI void setItem(class BlockSource&, class ItemInstance const&);
    MCAPI void updateNameTag();

    MCAPI static float const ROTATION_DEGREES;

private:
    MCAPI void _checkMapRemoval(class BlockSource&, class ItemInstance&);
    MCAPI void _updateBit(class BlockSource&, class ItemStateVariant<bool> const&, class HashedString const&);
};