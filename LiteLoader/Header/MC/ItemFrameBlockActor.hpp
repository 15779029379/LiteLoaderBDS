/**
 * @file  ItemFrameBlockActor.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "BlockActor.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class ItemFrameBlockActor.
 *
 */
class ItemFrameBlockActor : public BlockActor {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_ITEMFRAMEBLOCKACTOR
public:
    class ItemFrameBlockActor& operator=(class ItemFrameBlockActor const &) = delete;
    ItemFrameBlockActor(class ItemFrameBlockActor const &) = delete;
    ItemFrameBlockActor() = delete;
#endif

public:
    virtual ~ItemFrameBlockActor();
    virtual void load(class Level &, class CompoundTag const &, class DataLoadHelper &);
    virtual bool save(class CompoundTag &) const;
    virtual void tick(class BlockSource &);
    virtual void onChanged(class BlockSource &);
    virtual void __unk_vfn_12();
    virtual void onRemoved(class BlockSource &);
    virtual void __unk_vfn_16();
    virtual float getShadowRadius(class BlockSource &) const;
    virtual void __unk_vfn_28();
    virtual void __unk_vfn_29();
    virtual void __unk_vfn_30();
    virtual void __unk_vfn_32();
    virtual void __unk_vfn_33();
    virtual void __unk_vfn_34();
    virtual std::unique_ptr<class BlockActorDataPacket> _getUpdatePacket(class BlockSource &);
    virtual void _onUpdatePacket(class CompoundTag const &, class BlockSource &);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_ITEMFRAMEBLOCKACTOR
#endif
    MCAPI ItemFrameBlockActor(class BlockPos, enum BlockActorType, std::string);
    MCAPI ItemFrameBlockActor(class BlockPos);
    MCAPI void actuallyDropItem(class BlockSource &, bool);
    MCAPI void dropFramedItem(class BlockSource &, bool);
    MCAPI class ItemInstance & getFramedItem();
    MCAPI float getRotation();
    MCAPI void rotateFramedItem();
    MCAPI void setItem(class BlockSource &, class ItemInstance const &);
    MCAPI void updateNameTag();
MCAPI static float const ROTATION_DEGREES;

//private:
    MCAPI void _checkMapRemoval(class BlockSource &, class ItemInstance &);
    MCAPI void _updateBit(class BlockSource &, class ItemStateVariant<bool> const &, class HashedString const &);

private:

};