/**
 * @file  ItemStackNetManagerBase.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class ItemStackNetManagerBase.
 *
 */
class ItemStackNetManagerBase {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_ITEMSTACKNETMANAGERBASE
public:
    class ItemStackNetManagerBase& operator=(class ItemStackNetManagerBase const &) = delete;
    ItemStackNetManagerBase(class ItemStackNetManagerBase const &) = delete;
    ItemStackNetManagerBase() = delete;
#endif

public:
    virtual ~ItemStackNetManagerBase();
    virtual bool isEnabled() const;
    virtual class TypedClientNetId<struct ItemStackRequestIdTag, int, 0> getRequestId() const = 0;
    virtual bool retainSetItemStackNetIdVariant() const;
    virtual bool allowInventoryTransactionManager() const = 0;
    virtual class gsl::final_action<class std::function<void (void)>> _tryBeginClientLegacyTransactionRequest();
    virtual void onContainerScreenOpen(class ContainerScreenContext const &);
    virtual void onContainerScreenClose();
    virtual class SparseContainer * initOpenContainer(class BlockSource &, enum ContainerEnumName, class ContainerWeakRef const &);
    virtual void _addLegacyTransactionRequestSetItemSlot(class ItemStackNetManagerScreen &, enum ContainerType, int);
    virtual void _initScreen(class ItemStackNetManagerScreen &);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_ITEMSTACKNETMANAGERBASE
#endif
    MCAPI ItemStackNetManagerBase(class Player &, bool, bool);
    MCAPI class ItemStackNetManagerScreenStack & _getScreenStack();
    MCAPI class ContainerScreenContext const & getScreenContext() const;
    MCAPI bool isClientSide() const;
    MCAPI bool isScreenOpen() const;
    MCAPI static class gsl::final_action<class std::function<void (void)>> _tryBeginClientLegacyTransactionRequest(class Player *);
    MCAPI static bool setPlayerContainer(class Player &, enum ContainerType, int, class ItemStack const &, class ItemStack &, class std::function<void (class ItemStack const &)> const &);

//protected:
    MCAPI bool _isRequestActionAllowed(class ItemStackRequestAction const &);

protected:

};