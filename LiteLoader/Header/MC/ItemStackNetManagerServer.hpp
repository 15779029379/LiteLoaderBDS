// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#define EXTRA_INCLUDE_PART
#include "Extra/ItemStackNetManagerServerAPI.hpp"
#undef EXTRA_INCLUDE_PART
class ItemStackNetManagerServer : public ItemStackNetManagerBase {
#include "Extra/ItemStackNetManagerServerAPI.hpp"
public:
    virtual ~ItemStackNetManagerServer();
    virtual void unk_vfn_1();
    virtual class TypedClientNetId<struct ItemStackRequestIdTag, int, 0> getRequestId();
    virtual bool retainSetItemStackNetIdVariant();
    virtual bool allowInventoryTransactionManager();
    virtual();
    virtual void unk_vfn_6();
    virtual class SparseContainer* initOpenContainer(class BlockSource&, int /*enum ContainerEnumName*/, class ContainerWeakRef const&);
    virtual void unk_vfn_9();
    virtual void _initScreen(class ItemStackNetManagerScreen&);

public:
    MCAPI ItemStackNetManagerServer(class ServerPlayer&, bool);
    MCAPI void handleRequest(std::unique_ptr<class ItemStackRequestData>, class Bedrock::NonOwnerPointer<class TextFilteringProcessor>);
    MCAPI void handleRequestBatch(class ItemStackRequestBatch const&, class Bedrock::NonOwnerPointer<class TextFilteringProcessor>);
    MCAPI bool itemMatches(struct ItemStackRequestSlotInfo const&, class ItemStack const&);
    MCAPI void normalTick();
    MCAPI void startCrafting(bool, class BlockPos const&);
    MCAPI class CallbackToken tryCloseContainerScreen(class std::function<void(void)>);


private:
    MCAPI void _handleRequestData(std::vector<struct ItemStackResponseInfo>&, class ItemStackRequestData const*);
    MCAPI void _processQueue();
    MCAPI void _queueRequest(std::unique_ptr<class ItemStackRequestData>);
    MCAPI void _queueRequests(class ItemStackRequestBatch const&);
    MCAPI bool _tryFilterText(class ItemStackRequestData const*);
};