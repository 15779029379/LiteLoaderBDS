/**
 * @file  ItemUseInventoryTransaction.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class ItemUseInventoryTransaction.
 *
 */
class ItemUseInventoryTransaction {

#define AFTER_EXTRA
// Add Member There
public:
enum ActionType;

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_ITEMUSEINVENTORYTRANSACTION
public:
    ItemUseInventoryTransaction() = delete;
#endif

public:
    virtual ~ItemUseInventoryTransaction();
    virtual void read(class ReadOnlyBinaryStream &);
    virtual void write(class BinaryStream &) const;
    virtual void postLoadItems(class BlockPalette &, bool);
    virtual enum InventoryTransactionError handle(class Player &, bool) const;
    virtual void onTransactionError(class Player &, enum InventoryTransactionError) const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_ITEMUSEINVENTORYTRANSACTION
#endif
    MCAPI ItemUseInventoryTransaction(class ItemUseInventoryTransaction const &);
    MCAPI class ItemUseInventoryTransaction & operator=(class ItemUseInventoryTransaction const &);
    MCAPI void resendBlocksAroundArea(class Player &, class BlockPos const &, unsigned char) const;
    MCAPI void resendPlayerState(class Player &) const;
    MCAPI class ItemUseInventoryTransaction & setSelectedItem(class ItemStack const &);

//private:

private:
MCAPI static class BidirectionalUnorderedMap<enum ItemUseInventoryTransaction::ActionType, std::string> const actionTypeMap;

};