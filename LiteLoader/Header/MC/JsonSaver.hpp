// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_JSONSAVER
#include "Extra/JsonSaverAPI.hpp"
#undef EXTRA_INCLUDE_PART_JSONSAVER
class JsonSaver {
#include "Extra/JsonSaverAPI.hpp"
public:
    /*0*/ virtual ~JsonSaver();
    /*1*/ virtual bool doSerialize(bool);
    /*2*/ virtual bool doSerialize(signed char);
    /*3*/ virtual bool doSerialize(unsigned char);
    /*4*/ virtual bool doSerialize(short);
    /*5*/ virtual bool doSerialize(unsigned short);
    /*6*/ virtual bool doSerialize(int);
    /*7*/ virtual bool doSerialize(unsigned int);
    /*8*/ virtual bool doSerialize(__int64);
    /*9*/ virtual bool doSerialize(unsigned __int64);
    /*10*/ virtual bool doSerialize(float);
    /*11*/ virtual bool doSerialize(double);
    /*12*/ virtual bool doSerialize(std::string const&);
    /*13*/ virtual bool doBeginMember(char const*, bool);
    /*14*/ virtual bool doBeginMember(unsigned __int64, std::string const&);
    /*15*/ virtual void __unk_vfn_0();
    /*16*/ virtual bool doBeginArray(unsigned __int64);
    /*17*/ virtual void __unk_vfn_1();
    /*18*/ virtual void __unk_vfn_2();
    /*19*/ virtual bool doEndArray();
    /*20*/ virtual bool doBeginObject();
    /*21*/ virtual bool doBeginObject(unsigned __int64);
    /*22*/ virtual bool doEndObject();
    /*
    inline bool doBeginArrayItem(unsigned __int64 a0){
        bool (JsonSaver::*rv)(unsigned __int64);
        *((void**)&rv) = dlsym("?doBeginArrayItem@JsonSaver@@EEAA_N_K@Z");
        return (this->*rv)(std::forward<unsigned __int64>(a0));
    }
    inline bool doEndMember(){
        bool (JsonSaver::*rv)();
        *((void**)&rv) = dlsym("?doEndMember@JsonSaver@@EEAA_NXZ");
        return (this->*rv)();
    }
    inline bool doEndArrayItem(){
        bool (JsonSaver::*rv)();
        *((void**)&rv) = dlsym("?doEndArrayItem@JsonSaver@@EEAA_NXZ");
        return (this->*rv)();
    }
    */
    MCAPI void configurePrettyOutput(bool, char, unsigned int);
    MCAPI std::string toString() const;

protected:

private:
};