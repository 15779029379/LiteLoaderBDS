/**
 * @file  LeafBlock.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "BlockLegacy.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class LeafBlock.
 *
 */
class LeafBlock : public BlockLegacy {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_LEAFBLOCK
public:
    class LeafBlock& operator=(class LeafBlock const &) = delete;
    LeafBlock(class LeafBlock const &) = delete;
    LeafBlock() = delete;
#endif

public:
    virtual ~LeafBlock();
    virtual void __unk_vfn_19();
    virtual bool canProvideSupport(class Block const &, unsigned char, enum BlockSupportType) const;
    virtual bool canProvideMultifaceSupport(class Block const &, unsigned char) const;
    virtual void __unk_vfn_29();
    virtual void __unk_vfn_30();
    virtual void __unk_vfn_32();
    virtual void __unk_vfn_33();
    virtual void __unk_vfn_34();
    virtual void __unk_vfn_36();
    virtual void __unk_vfn_37();
    virtual void __unk_vfn_38();
    virtual void __unk_vfn_39();
    virtual void __unk_vfn_40();
    virtual void __unk_vfn_41();
    virtual void __unk_vfn_42();
    virtual void __unk_vfn_44();
    virtual void __unk_vfn_45();
    virtual void __unk_vfn_46();
    virtual void __unk_vfn_47();
    virtual void __unk_vfn_48();
    virtual void __unk_vfn_49();
    virtual void __unk_vfn_59();
    virtual void __unk_vfn_60();
    virtual bool canContainLiquid() const;
    virtual void __unk_vfn_73();
    virtual void __unk_vfn_80();
    virtual bool breaksFallingBlocks(class Block const &, class BaseGameVersion) const;
    virtual int getResourceCount(class Randomize &, class Block const &, int) const;
    virtual void spawnResources(class BlockSource &, class BlockPos const &, class Block const &, class Randomize &, std::vector<class Item const *> *, float, int) const;
    virtual void __unk_vfn_105();
    virtual class Block const & getPlacementBlock(class Actor &, class BlockPos const &, unsigned char, class Vec3 const &, int) const;
    virtual void __unk_vfn_124();
    virtual void __unk_vfn_126();
    virtual void __unk_vfn_127();
    virtual void __unk_vfn_132();
    virtual int getColor(class BlockSource &, class BlockPos const &, class Block const &) const;
    virtual bool isSeasonTinted(class Block const &, class BlockSource &, class BlockPos const &) const;
    virtual void onGraphicsModeChanged(struct BlockGraphicsModeChangeContext const &);
    virtual void __unk_vfn_148();
    virtual void __unk_vfn_157();
    virtual void onRemove(class BlockSource &, class BlockPos const &) const;
    virtual void __unk_vfn_168();
    virtual void __unk_vfn_169();
    virtual void __unk_vfn_170();
    virtual void playerDestroy(class Player &, class BlockPos const &, class Block const &) const;
    virtual void randomTick(class BlockSource &, class BlockPos const &, class Random &) const;
    virtual void __unk_vfn_177();
    virtual enum BlockRenderLayer getRenderLayer(class Block const &, class BlockSource &, class BlockPos const &) const;
    virtual class mce::Color getMapColor(class BlockSource &, class BlockPos const &) const;
    virtual void __unk_vfn_188();
    virtual class ItemInstance getExtraResourceItem(class Block const &) const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_LEAFBLOCK
#endif
    MCAPI LeafBlock(std::string const &, int, class WeakPtr<class BlockLegacy>);
    MCAPI class mce::Color getSeasonsColor(class BlockSource &, class BlockPos const &, int, int) const;
    MCAPI static void runDecay(class BlockSource &, class BlockPos const &, int);

//protected:
    MCAPI class Block const & getSapling() const;
    MCAPI static bool _isTransparent(class Block const &, enum BlockProperty const &);

protected:

};