// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#include "ChunkSource.hpp"
#define EXTRA_INCLUDE_PART
#include "Extra/LegacyChunkStorageAPI.hpp"
#undef EXTRA_INCLUDE_PART
class LegacyChunkStorage : public ChunkSource {
#include "Extra/LegacyChunkStorageAPI.hpp"
public:
    virtual ~LegacyChunkStorage();
    virtual class std::shared_ptr<class LevelChunk> getExistingChunk(class ChunkPos const&);
    virtual class std::shared_ptr<class LevelChunk> getRandomChunk(class Random&);
    virtual bool postProcess(class ChunkViewSource&);
    virtual void checkAndReplaceChunk(class ChunkViewSource&, class LevelChunk&);
    virtual void loadChunk(class LevelChunk&, bool);
    virtual bool saveLiveChunk(class LevelChunk&);
    virtual void acquireDiscarded(class std::unique_ptr<class LevelChunk, struct LevelChunkFinalDeleter>);
    virtual bool isWithinWorldLimit(class ChunkPos const&);
    virtual void unk_vfn_19();
    virtual void clearDeletedEntities();
    virtual void unk_vfn_22();

private:
    MCAPI bool _isImported(class ChunkPos const&);
    MCAPI bool _loadChunk(class LevelChunk&);
    MCAPI void _loadEntities();
    MCAPI void _markChunkAsImported(class ChunkPos const&);
    MCAPI bool _openRegionFile();
};