/**
 * @file  LevelContainerModel.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "ContainerModel.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class LevelContainerModel.
 *
 */
class LevelContainerModel : public ContainerModel {

#define AFTER_EXTRA
// Add Member There
public:
    inline Actor* getEntity()
    {
        return _getEntity();
    }
#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_LEVELCONTAINERMODEL
public:
    class LevelContainerModel& operator=(class LevelContainerModel const &) = delete;
    LevelContainerModel(class LevelContainerModel const &) = delete;
    LevelContainerModel() = delete;
#endif

public:
    virtual void containerContentChanged(int);
    virtual ~LevelContainerModel();
    virtual void postInit();
    virtual void releaseResources();
    virtual void __unk_vfn_6();
    virtual class ContainerWeakRef getContainerWeakRef() const;
    virtual void __unk_vfn_12();
    virtual bool isValid();
    virtual void __unk_vfn_15();
    virtual void __unk_vfn_16();
    virtual void __unk_vfn_19();
    virtual class Container * _getContainer() const;
    virtual int _getContainerOffset() const;
    virtual void _onItemChanged(int, class ItemStack const &, class ItemStack const &);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_LEVELCONTAINERMODEL
#endif
    MCAPI LevelContainerModel(enum ContainerEnumName, int, class Player &, enum BlockActorType, class BlockPos const &, enum ContainerCategory);
    MCAPI LevelContainerModel(enum ContainerEnumName, int, class Player &, struct ActorUniqueID, enum ContainerCategory);
    MCAPI static class Container * getContainerHelper(class Player &, struct ActorUniqueID const &);
    MCAPI static class Container * getContainerHelper(class Player &, enum BlockActorType, class BlockPos const &);

//private:
    MCAPI class Actor * _getEntity() const;
    MCAPI void _refreshSlot(int);

private:

};