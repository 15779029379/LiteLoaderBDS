// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#define EXTRA_INCLUDE_PART
#include "Extra/LevelDbEnvAPI.hpp"
#undef EXTRA_INCLUDE_PART
class LevelDbEnv {
#include "Extra/LevelDbEnvAPI.hpp"
public:
    virtual ~LevelDbEnv();
    virtual class leveldb::Status NewSequentialFile(std::string const&, class leveldb::SequentialFile**);
    virtual class leveldb::Status NewRandomAccessFile(std::string const&, class leveldb::RandomAccessFile**);
    virtual class leveldb::Status NewWritableFile(std::string const&, class leveldb::WritableFile**);
    virtual class leveldb::Status NewAppendableFile(std::string const&, class leveldb::WritableFile**);
    virtual bool FileExists(std::string const&);
    virtual class leveldb::Status GetChildren(std::string const&, std::vector<std::string>*);
    virtual class leveldb::Status DeleteFileA(std::string const&);
    virtual class leveldb::Status CreateDir(std::string const&);
    virtual class leveldb::Status DeleteDir(std::string const&);
    virtual class leveldb::Status GetFileSize(std::string const&, unsigned __int64*);
    virtual class leveldb::Status RenameFile(std::string const&, std::string const&);
    virtual class leveldb::Status LockFile(std::string const&, class leveldb::FileLock**);
    virtual class leveldb::Status UnlockFile(class leveldb::FileLock*);
    virtual void Schedule(void (*)(void*), void*);
    virtual void unk_vfn_15();
    virtual class leveldb::Status GetTestDirectory(std::string*);
    virtual class leveldb::Status NewLogger(std::string const&, class leveldb::Logger**);
    virtual unsigned __int64 NowMicros();
    virtual void SleepForMicroseconds(int);

public:
    MCAPI bool IsComplete() const;

    MCAPI static void createInstance();
    MCAPI static void destroyInstance();
    MCAPI static class LevelDbEnv* getSingleton();

private:
    MCAPI static std::unique_ptr<class LevelDbEnv> sSingleton;
};