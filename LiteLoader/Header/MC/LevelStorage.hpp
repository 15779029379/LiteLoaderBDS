// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Bedrock.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class LevelStorage {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_LEVELSTORAGE
public:
    class LevelStorage& operator=(class LevelStorage const&) = delete;
    LevelStorage(class LevelStorage const&) = delete;
    LevelStorage() = delete;
#endif

public:
    /*0*/ virtual ~LevelStorage();
    /*1*/ virtual void __unk_vfn_0() = 0;
    /*2*/ virtual void __unk_vfn_1() = 0;
    /*3*/ virtual void __unk_vfn_2() = 0;
    /*4*/ virtual void __unk_vfn_3() = 0;
    /*5*/ virtual void __unk_vfn_4() = 0;
    /*6*/ virtual void __unk_vfn_5() = 0;
    /*7*/ virtual void __unk_vfn_6() = 0;
    /*8*/ virtual void __unk_vfn_7() = 0;
    /*9*/ virtual void __unk_vfn_8() = 0;
    /*10*/ virtual void __unk_vfn_9() = 0;
    /*11*/ virtual void __unk_vfn_10() = 0;
    /*12*/ virtual void __unk_vfn_11() = 0;
    /*13*/ virtual void __unk_vfn_12() = 0;
    /*14*/ virtual bool clonePlayerData(class gsl::basic_string_span<char const, -1>, class gsl::basic_string_span<char const, -1>);
    /*15*/ virtual void __unk_vfn_13() = 0;
    /*16*/ virtual void __unk_vfn_14() = 0;
    /*17*/ virtual void __unk_vfn_15() = 0;
    /*18*/ virtual void __unk_vfn_16() = 0;
    /*19*/ virtual bool loadData(class gsl::basic_string_span<char const, -1>, std::string&, enum DBHelpers::Category) const;
    /*20*/ virtual void __unk_vfn_17() = 0;
    /*21*/ virtual void __unk_vfn_18() = 0;
    /*22*/ virtual void __unk_vfn_19() = 0;
    /*23*/ virtual void __unk_vfn_20() = 0;
    /*24*/ virtual void __unk_vfn_21() = 0;
    /*25*/ virtual void __unk_vfn_22() = 0;
    /*26*/ virtual void __unk_vfn_23() = 0;
    /*27*/ virtual void __unk_vfn_24() = 0;
    /*28*/ virtual void freeCaches();
    /*29*/ virtual void __unk_vfn_25() = 0;
    /*30*/ virtual void __unk_vfn_26() = 0;
    /*31*/ virtual void corruptLevel();
    /*
    inline  ~LevelStorage(){
         (LevelStorage::*rv)();
        *((void**)&rv) = dlsym("??1LevelStorage@@UEAA@XZ");
        return (this->*rv)();
    }
    */
    MCAPI std::string getServerId(struct PlayerStorageIds const&);
    MCAPI std::string getServerId(class Player const&, bool);
    MCAPI std::vector<std::string> loadAllPlayerIDs(bool) const;
    MCAPI std::unique_ptr<class CompoundTag> loadPlayerDataFromTag(class gsl::basic_string_span<char const, -1>);
    MCAPI std::unique_ptr<class CompoundTag> loadServerPlayerData(class Player const&, bool);
    MCAPI void save(class Actor&);
    MCAPI class std::shared_ptr<class Bedrock::Threading::IAsyncResult<void> > saveData(std::string const&, class CompoundTag const&, enum DBHelpers::Category);
    MCAPI static std::string const LEGACY_CONSOLE_PLAYER_PREFIX;
    MCAPI static std::string const LOCAL_PLAYER_TAG;

protected:

private:

};