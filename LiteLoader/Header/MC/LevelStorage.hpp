// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#define EXTRA_INCLUDE_PART_LEVELSTORAGE
#include "Extra/LevelStorageAPI.hpp"
#undef EXTRA_INCLUDE_PART_LEVELSTORAGE
class LevelStorage {
#include "Extra/LevelStorageAPI.hpp"
public:
    virtual ~LevelStorage();
    virtual void addStorageObserver(std::unique_ptr<class LevelStorageObserver>);
    virtual std::unique_ptr<class CompoundTag> getCompoundTag(std::string const&, int /*enum DBHelpers::Category*/);
    virtual bool hasKey(class gsl::basic_string_span<char const, -1>, int /*enum DBHelpers::Category*/);
    virtual void forEachKeyWithPrefix(class gsl::basic_string_span<char const, -1>, int /*enum DBHelpers::Category*/, class std::function<void(class gsl::basic_string_span<char const, -1>, class gsl::basic_string_span<char const, -1>)> const&);
    virtual bool loadLevelData(class LevelData&);
    virtual std::unique_ptr<class ChunkSource> createChunkStorage(std::unique_ptr<class ChunkSource>, int /*enum StorageVersion*/);
    virtual void saveLevelData(class LevelData const&);
    virtual void unk_vfn_8();
    virtual class std::shared_ptr<class Bedrock::Threading::IAsyncResult<void>> saveData(class LevelStorageWriteBatch const&);
    virtual class std::shared_ptr<class Bedrock::Threading::IAsyncResult<void>> saveData(std::string const&, std::string&&, int /*enum DBHelpers::Category*/);
    virtual class std::shared_ptr<class Bedrock::Threading::IAsyncResult<void>> deleteData(std::string const&, int /*enum DBHelpers::Category*/);
    virtual void syncIO();
    virtual void getStatistics(std::string&);
    virtual bool clonePlayerData(class gsl::basic_string_span<char const, -1>, class gsl::basic_string_span<char const, -1>);
    virtual void unk_vfn_15();
    virtual void startShutdown();
    virtual bool isShuttingDown();
    virtual bool checkShutdownDone();
    virtual bool loadData(class gsl::basic_string_span<char const, -1>, std::string&, int /*enum DBHelpers::Category*/);
    virtual void unk_vfn_20();
    virtual std::vector<struct SnapshotFilenameAndLength> createSnapshot(std::string const&);
    virtual void releaseSnapshot();
    virtual void compactStorage();
    virtual void syncAndSuspendStorage();
    virtual void resumeStorage();
    virtual void setFlushAllowed(bool);
    virtual void flushToPermanentStorage();
    virtual void freeCaches();
    virtual void setCompactionCallback(class std::function<void(int /*enum CompactionStatus*/)>);
    virtual void setCriticalSyncSaveCallback(class std::function<void(void)>);
    virtual void corruptLevel();

public:
    MCAPI std::string getServerId(struct PlayerStorageIds const&);
    MCAPI std::string getServerId(class Player const&, bool);
    MCAPI std::vector<std::string> loadAllPlayerIDs(bool) const;
    MCAPI std::unique_ptr<class CompoundTag> loadPlayerDataFromTag(class gsl::basic_string_span<char const, -1>);
    MCAPI std::unique_ptr<class CompoundTag> loadServerPlayerData(class Player const&, bool);
    MCAPI void save(class Actor&);
    MCAPI class std::shared_ptr<class Bedrock::Threading::IAsyncResult<void>> saveData(std::string const&, class CompoundTag const&, enum DBHelpers::Category);

    MCAPI static std::string const LEGACY_CONSOLE_PLAYER_PREFIX;
    MCAPI static std::string const LOCAL_PLAYER_TAG;
};