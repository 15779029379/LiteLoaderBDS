/**
 * @file  LodestoneBlockActor.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "BlockActor.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class LodestoneBlockActor.
 *
 */
class LodestoneBlockActor : public BlockActor {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_LODESTONEBLOCKACTOR
public:
    class LodestoneBlockActor& operator=(class LodestoneBlockActor const &) = delete;
    LodestoneBlockActor(class LodestoneBlockActor const &) = delete;
    LodestoneBlockActor() = delete;
#endif

public:
    virtual ~LodestoneBlockActor();
    virtual void load(class Level &, class CompoundTag const &, class DataLoadHelper &);
    virtual bool save(class CompoundTag &) const;
    virtual void tick(class BlockSource &);
    virtual void __unk_vfn_12();
    virtual void onRemoved(class BlockSource &);
    virtual void __unk_vfn_16();
    virtual void __unk_vfn_28();
    virtual void __unk_vfn_29();
    virtual void __unk_vfn_30();
    virtual void __unk_vfn_32();
    virtual void __unk_vfn_33();
    virtual void __unk_vfn_34();
    virtual std::unique_ptr<class BlockActorDataPacket> _getUpdatePacket(class BlockSource &);
    virtual void _onUpdatePacket(class CompoundTag const &, class BlockSource &);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_LODESTONEBLOCKACTOR
#endif
    MCAPI LodestoneBlockActor(class BlockPos const &);
    MCAPI class PositionTrackingId const & getTrackingHandle() const;
    MCAPI bool hasTrackingHandle() const;
    MCAPI bool setTrackingHandle(class PositionTrackingId const &);

//private:

private:
MCAPI static std::string const sTagName_Handle;

};