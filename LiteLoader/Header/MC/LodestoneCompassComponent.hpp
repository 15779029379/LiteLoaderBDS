// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"


#define BEFORE_EXTRA //DO NOT EDIT THIS LINE
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA //DO NOT EDIT THIS LINE

class LodestoneCompassComponent {

#define AFTER_EXTRA //DO NOT EDIT THIS LINE
// Add Member There

#undef AFTER_EXTRA //DO NOT EDIT THIS LINE

public:

    MCAPI LodestoneCompassComponent(class LodestoneCompassComponent&&);
    MCAPI int getAnimationFrame(class std::variant<struct ActorUniqueID, struct std::pair<class BlockPos, class AutomaticID<class Dimension, int> > > const&, class BlockPos const&, class AutomaticID<class Dimension, int> const&);
    MCAPI void initialize(class PositionTrackingId const&);
    MCAPI class LodestoneCompassComponent& operator=(class LodestoneCompassComponent&&);
    MCAPI void setTrackOnlyInSameDimension(class std::variant<struct ActorUniqueID, struct std::pair<class BlockPos, class AutomaticID<class Dimension, int> > > const&, bool);
    MCAPI ~LodestoneCompassComponent();
    MCAPI static int getSpinningAnimationFrame();
    MCAPI static class std::variant<struct ActorUniqueID, struct std::pair<class BlockPos, class AutomaticID<class Dimension, int> > > makeCalculatorId(struct ActorUniqueID const&);

protected:


private:

    MCAPI class LodestoneCompassComponentCalculator* _findCalculator(class std::variant<struct ActorUniqueID, struct std::pair<class BlockPos, class AutomaticID<class Dimension, int> > > const&, bool);
    MCAPI static class CompassSpriteCalculator mSpinningLodestone;
};