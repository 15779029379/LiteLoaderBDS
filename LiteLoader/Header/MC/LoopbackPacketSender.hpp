/**
 * @file  LoopbackPacketSender.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class LoopbackPacketSender.
 *
 */
class LoopbackPacketSender {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_LOOPBACKPACKETSENDER
public:
    class LoopbackPacketSender& operator=(class LoopbackPacketSender const &) = delete;
    LoopbackPacketSender(class LoopbackPacketSender const &) = delete;
    LoopbackPacketSender() = delete;
#endif

public:
    virtual ~LoopbackPacketSender();
    virtual void send(class Packet &);
    virtual void sendToServer(class Packet &);
    virtual void sendToClient(class UserEntityIdentifierComponent const *, class Packet const &);
    virtual void sendToClient(class NetworkIdentifier const &, class Packet const &, enum SubClientId);
    virtual void sendToClients(std::vector<struct NetworkIdentifierWithSubId> const &, class Packet const &);
    virtual void sendBroadcast(class Packet const &);
    virtual void sendBroadcast(class NetworkIdentifier const &, enum SubClientId, class Packet const &);
    virtual void flush(class NetworkIdentifier const &, class std::function<void (void)> &&);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_LOOPBACKPACKETSENDER
#endif
    MCAPI LoopbackPacketSender(enum SubClientId, class NetworkHandler &);
    MCAPI void addLoopbackCallback(class NetEventCallback &);
    MCAPI void removeLoopbackCallback(class NetEventCallback &);
    MCAPI void setUserList(std::vector<class OwnerPtrT<struct EntityRefTraits>> const *);

};