// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Recipe.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class MapCloningRecipe : public Recipe {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_MAPCLONINGRECIPE
public:
    class MapCloningRecipe& operator=(class MapCloningRecipe const&) = delete;
    MapCloningRecipe(class MapCloningRecipe const&) = delete;
    MapCloningRecipe() = delete;
#endif

public:
    /*0*/ virtual ~MapCloningRecipe();
    /*1*/ virtual std::vector<class ItemInstance> const& assemble(class CraftingContainer&) const;
    /*2*/ virtual void __unk_vfn_0();
    /*3*/ virtual void __unk_vfn_1();
    /*4*/ virtual void __unk_vfn_2();
    /*5*/ virtual void __unk_vfn_3();
    /*6*/ virtual bool matches(class CraftingContainer&, class Level&) const;
    /*7*/ virtual void __unk_vfn_4();
    /*8*/ virtual class mce::UUID const& getId() const;
    /*9*/ virtual class ItemPack const& getItemPack() const;
    /*10*/ virtual bool isShapeless() const;
    /*11*/ virtual void loadResultList(class BlockPalette const&) const;
    /*
    inline int getCraftingSize() const{
        int (MapCloningRecipe::*rv)() const;
        *((void**)&rv) = dlsym("?getCraftingSize@MapCloningRecipe@@UEBAHXZ");
        return (this->*rv)();
    }
    inline std::vector<class ItemInstance> const& getResultItem() const{
        std::vector<class ItemInstance> const& (MapCloningRecipe::*rv)() const;
        *((void**)&rv) = dlsym("?getResultItem@MapCloningRecipe@@UEBAAEBV?$vector@VItemInstance@@V?$allocator@VItemInstance@@@std@@@std@@XZ");
        return (this->*rv)();
    }
    inline int size() const{
        int (MapCloningRecipe::*rv)() const;
        *((void**)&rv) = dlsym("?size@MapCloningRecipe@@UEBAHXZ");
        return (this->*rv)();
    }
    inline class RecipeIngredient const& getIngredient(int a0, int a1) const{
        class RecipeIngredient const& (MapCloningRecipe::*rv)(int, int) const;
        *((void**)&rv) = dlsym("?getIngredient@MapCloningRecipe@@UEBAAEBVRecipeIngredient@@HH@Z");
        return (this->*rv)(std::forward<int>(a0), std::forward<int>(a1));
    }
    */
    MCAPI MapCloningRecipe(class gsl::basic_string_span<char const, -1>, class mce::UUID const&);
    MCAPI static class mce::UUID const CartographyTableID;
    MCAPI static class mce::UUID const CraftingTableID;

protected:

private:

};