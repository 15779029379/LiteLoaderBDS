/**
 * @file  MapExtendingRecipe.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Recipe.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class MapExtendingRecipe.
 *
 */
class MapExtendingRecipe : public Recipe {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_MAPEXTENDINGRECIPE
public:
    class MapExtendingRecipe& operator=(class MapExtendingRecipe const &) = delete;
    MapExtendingRecipe(class MapExtendingRecipe const &) = delete;
    MapExtendingRecipe() = delete;
#endif

public:
    virtual ~MapExtendingRecipe();
    virtual std::vector<class ItemInstance> const & assemble(class CraftingContainer &) const;
    virtual int getCraftingSize() const;
    virtual class RecipeIngredient const & getIngredient(int, int) const;
    virtual std::vector<class ItemInstance> const & getResultItem() const;
    virtual bool matches(class CraftingContainer &, class Level &) const;
    virtual int size() const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_MAPEXTENDINGRECIPE
#endif
    MCAPI MapExtendingRecipe(class gsl::basic_string_span<char const, -1>, class mce::UUID const &);
MCAPI static class mce::UUID const CartographyTableID;
MCAPI static class mce::UUID const CraftingTableID;

//private:
    MCAPI void _updateMapInstance(class ItemInstance &) const;

private:

};