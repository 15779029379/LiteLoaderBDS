/**
 * @file  MemoryMappedFileAccess.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Core.hpp"
#include "Bedrock.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class MemoryMappedFileAccess.
 *
 */
class MemoryMappedFileAccess {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_MEMORYMAPPEDFILEACCESS
public:
    class MemoryMappedFileAccess& operator=(class MemoryMappedFileAccess const &) = delete;
    MemoryMappedFileAccess(class MemoryMappedFileAccess const &) = delete;
    MemoryMappedFileAccess() = delete;
#endif

public:
    virtual ~MemoryMappedFileAccess();
    virtual void * fopen(class Core::Path const &, std::string const &);
    virtual int fclose(void *);
    virtual int fseek(void *, __int64, int);
    virtual __int64 ftell(void *);
    virtual class IFileReadAccess const * getReadInterface() const;
    virtual class IFileWriteAccess * getWriteInterface();
    virtual void unload();
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_MEMORYMAPPEDFILEACCESS
#endif
    MCAPI MemoryMappedFileAccess(class gsl::not_null<class Bedrock::NonOwnerPointer<class IFileAccess>> const &, std::unique_ptr<class FileAccessTransforms>);
MCAPI static class FileAccessTransforms const EMPTY_TRANSFORMS;

};