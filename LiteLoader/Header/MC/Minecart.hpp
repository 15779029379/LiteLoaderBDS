// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class Minecart : public Actor {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_MINECART
public:
    class Minecart& operator=(class Minecart const&) = delete;
    Minecart(class Minecart const&) = delete;
    Minecart() = delete;
#endif

public:
    /*0*/ virtual void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const&);
    /*1*/ virtual void reloadHardcodedClient(enum Actor::InitializationMethod, class VariantParameterList const&);
    /*2*/ virtual ~Minecart();
    /*3*/ virtual void __unk_vfn_0();
    /*4*/ virtual void __unk_vfn_1();
    /*5*/ virtual float getInterpolatedHeadRot(float) const;
    /*6*/ virtual float getInterpolatedBodyYaw(float) const;
    /*7*/ virtual class Vec3 getInterpolatedRidingOffset(float) const;
    /*8*/ virtual void __unk_vfn_2();
    /*9*/ virtual void lerpMotion(class Vec3 const&);
    /*10*/ virtual void normalTick();
    /*11*/ virtual float getRidingHeight();
    /*12*/ virtual void __unk_vfn_3();
    /*13*/ virtual void __unk_vfn_4();
    /*14*/ virtual float getCameraOffset() const;
    /*15*/ virtual float getShadowHeightOffs();
    /*16*/ virtual float getShadowRadius() const;
    /*17*/ virtual void __unk_vfn_5();
    /*18*/ virtual void __unk_vfn_6();
    /*19*/ virtual void playerTouch(class Player&);
    /*20*/ virtual void __unk_vfn_7();
    /*21*/ virtual void __unk_vfn_8();
    /*22*/ virtual void __unk_vfn_9();
    /*23*/ virtual void setSleeping(bool);
    /*24*/ virtual void __unk_vfn_10();
    /*25*/ virtual void __unk_vfn_11();
    /*26*/ virtual void __unk_vfn_12();
    /*27*/ virtual void __unk_vfn_13();
    /*28*/ virtual void __unk_vfn_14();
    /*29*/ virtual void __unk_vfn_15();
    /*30*/ virtual void __unk_vfn_16();
    /*31*/ virtual void __unk_vfn_17();
    /*32*/ virtual class Actor* findAttackTarget();
    /*33*/ virtual void __unk_vfn_18();
    /*34*/ virtual void adjustDamageAmount(int&) const;
    /*35*/ virtual void onTame();
    /*36*/ virtual void onFailedTame();
    /*37*/ virtual void __unk_vfn_19();
    /*38*/ virtual void vehicleLanded(class Vec3 const&, class Vec3 const&);
    /*39*/ virtual bool isInvulnerableTo(class ActorDamageSource const&) const;
    /*40*/ virtual void animateHurt();
    /*41*/ virtual void onBounceStarted(class BlockPos const&, class Block const&);
    /*42*/ virtual float getPickRadius();
    /*43*/ virtual void awardKillScore(class Actor&, int);
    /*44*/ virtual enum ArmorMaterialType getArmorMaterialTypeInSlot(enum ArmorSlot) const;
    /*45*/ virtual enum ArmorTextureType getArmorMaterialTextureTypeInSlot(enum ArmorSlot) const;
    /*46*/ virtual float getArmorColorInSlot(enum ArmorSlot, int) const;
    /*47*/ virtual void setEquippedSlot(enum EquipmentSlot, class ItemStack const&);
    /*48*/ virtual class HashedString const& queryEntityRenderer() const;
    /*49*/ virtual struct ActorUniqueID getSourceUniqueID() const;
    /*50*/ virtual void __unk_vfn_20();
    /*51*/ virtual int getPortalWaitTime() const;
    /*52*/ virtual void __unk_vfn_21();
    /*53*/ virtual void __unk_vfn_22();
    /*54*/ virtual struct ActorUniqueID getControllingPlayer() const;
    /*55*/ virtual void __unk_vfn_23();
    /*56*/ virtual void __unk_vfn_24();
    /*57*/ virtual void __unk_vfn_25();
    /*58*/ virtual void __unk_vfn_26();
    /*59*/ virtual void __unk_vfn_27();
    /*60*/ virtual void buildDebugInfo(std::string&) const;
    /*61*/ virtual int getDeathTime() const;
    /*62*/ virtual void swing();
    /*63*/ virtual void __unk_vfn_28();
    /*64*/ virtual void __unk_vfn_29();
    /*65*/ virtual float getYHeadRot() const;
    /*66*/ virtual void __unk_vfn_30();
    /*67*/ virtual void __unk_vfn_31();
    /*68*/ virtual void __unk_vfn_32();
    /*69*/ virtual void __unk_vfn_33();
    /*70*/ virtual void setAuxValue(int);
    /*71*/ virtual void stopSpinAttack();
    /*72*/ virtual void __unk_vfn_34();
    /*73*/ virtual void __unk_vfn_35();
    /*74*/ virtual void kill();
    /*75*/ virtual void interpolatorTick();
    /*76*/ virtual void updateEntitySpecificMolangVariables(class RenderParams&);
    /*77*/ virtual void __unk_vfn_36();
    /*78*/ virtual bool _hurt(class ActorDamageSource const&, int, bool, bool);
    /*79*/ virtual void readAdditionalSaveData(class CompoundTag const&, class DataLoadHelper&);
    /*80*/ virtual void addAdditionalSaveData(class CompoundTag&);
    /*81*/ virtual void __unk_vfn_37();
    /*82*/ virtual void _onSizeUpdated();
    /*83*/ virtual void __unk_vfn_38();
    /*84*/ virtual void destroy(class ActorDamageSource const&, bool);
    /*85*/ virtual enum MinecartType getType() = 0;
    /*86*/ virtual class Block const* getDefaultDisplayBlock() const;
    /*87*/ virtual void __unk_vfn_39();
    /*88*/ virtual int getDefaultDisplayOffset() const;
    /*89*/ virtual void applyNaturalSlowdown(class BlockSource&);
    /*90*/ virtual void _lazyInitDisplayBlock();
    /*
    inline bool canMakeStepSound() const{
        bool (Minecart::*rv)() const;
        *((void**)&rv) = dlsym("?canMakeStepSound@Minecart@@EEBA_NXZ");
        return (this->*rv)();
    }
    inline int getDefaultDisplayData() const{
        int (Minecart::*rv)() const;
        *((void**)&rv) = dlsym("?getDefaultDisplayData@Minecart@@UEBAHXZ");
        return (this->*rv)();
    }
    inline  ~Minecart(){
         (Minecart::*rv)();
        *((void**)&rv) = dlsym("??1Minecart@@UEAA@XZ");
        return (this->*rv)();
    }
    inline bool isPickable(){
        bool (Minecart::*rv)();
        *((void**)&rv) = dlsym("?isPickable@Minecart@@UEAA_NXZ");
        return (this->*rv)();
    }
    */
    MCAPI Minecart(class ActorDefinitionGroup*, struct ActorDefinitionIdentifier const&, class EntityContext&);
    MCAPI void setCustomDisplay(bool);
    MCAPI void setDisplayBlock(class Block const&);

protected:

private:
    MCAPI void _registerLoopingSounds();

};