// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#include "Json.hpp"
#include "BlockCommandOrigin.hpp"
#define EXTRA_INCLUDE_PART_MINECARTBLOCKCOMMANDORIGIN
#include "Extra/MinecartBlockCommandOriginAPI.hpp"
#undef EXTRA_INCLUDE_PART_MINECARTBLOCKCOMMANDORIGIN
class MinecartBlockCommandOrigin : public BlockCommandOrigin {
#include "Extra/MinecartBlockCommandOriginAPI.hpp"
public:
    virtual ~MinecartBlockCommandOrigin();
    virtual std::string const& getRequestId() const;
    virtual class BlockPos getBlockPosition() const;
    virtual class Vec3 getWorldPosition() const;
    virtual class Level* getLevel() const;
    virtual class Actor* getEntity() const;
    virtual int /*enum CommandPermissionLevel*/ getPermissionsLevel() const;
    virtual std::unique_ptr<class CommandOrigin> clone() const;
    virtual class std::optional<class BlockPos> getCursorHitBlockPos() const;
    virtual class std::optional<class Vec3> getCursorHitPos() const;
    virtual bool canUseAbility(int /*enum AbilitiesIndex*/) const;
    virtual bool canUseCommandsWithoutCheatsEnabled() const;
    virtual bool isSelectorExpansionAllowed() const;
    virtual unsigned char getSourceSubId() const;
    virtual void unk_vfn_20();
    virtual int /*enum CommandOriginType*/ getOriginType() const;
    virtual void unk_vfn_24();
    virtual void handleCommandOutputCallback(class Json::Value&&) const;
    virtual class CompoundTag serialize() const;
    virtual bool isValid() const;
    virtual class BaseCommandBlock* _getBaseCommandBlock(class BlockSource&) const;
    virtual class CommandBlockActor* _getBlockEntity(class BlockSource&) const;

public:
    MCAPI static std::unique_ptr<class MinecartBlockCommandOrigin> load(class CompoundTag const&, class Level&);
};