// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"
#include "BlockCommandOrigin.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class MinecartBlockCommandOrigin : public BlockCommandOrigin {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_MINECARTBLOCKCOMMANDORIGIN
public:
    class MinecartBlockCommandOrigin& operator=(class MinecartBlockCommandOrigin const&) = delete;
    MinecartBlockCommandOrigin(class MinecartBlockCommandOrigin const&) = delete;
    MinecartBlockCommandOrigin() = delete;
#endif

public:
    /*0*/ virtual ~MinecartBlockCommandOrigin();
    /*1*/ virtual std::string const& getRequestId() const;
    /*2*/ virtual class BlockPos getBlockPosition() const;
    /*3*/ virtual class Vec3 getWorldPosition() const;
    /*4*/ virtual class std::optional<class Vec2> getRotation() const;
    /*5*/ virtual class Level* getLevel() const;
    /*6*/ virtual class Actor* getEntity() const;
    /*7*/ virtual void __unk_vfn_0();
    /*8*/ virtual std::unique_ptr<class CommandOrigin> clone() const;
    /*9*/ virtual class std::optional<class BlockPos> getCursorHitBlockPos() const;
    /*10*/ virtual class std::optional<class Vec3> getCursorHitPos() const;
    /*11*/ virtual void __unk_vfn_1();
    /*12*/ virtual void __unk_vfn_2();
    /*13*/ virtual void __unk_vfn_3();
    /*14*/ virtual void __unk_vfn_4();
    /*15*/ virtual void __unk_vfn_5();
    /*16*/ virtual void __unk_vfn_6();
    /*17*/ virtual void __unk_vfn_7();
    /*18*/ virtual void handleCommandOutputCallback(class Json::Value&&) const;
    /*19*/ virtual void updateValues();
    /*20*/ virtual class CompoundTag serialize() const;
    /*21*/ virtual void __unk_vfn_8();
    /*22*/ virtual void _setUUID(class mce::UUID const&);
    /*23*/ virtual class BaseCommandBlock* _getBaseCommandBlock(class BlockSource&) const;
    /*24*/ virtual class CommandBlockActor* _getBlockEntity(class BlockSource&) const;
    /*
    inline bool canUseCommandsWithoutCheatsEnabled() const{
        bool (MinecartBlockCommandOrigin::*rv)() const;
        *((void**)&rv) = dlsym("?canUseCommandsWithoutCheatsEnabled@MinecartBlockCommandOrigin@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline enum CommandOriginType getOriginType() const{
        enum CommandOriginType (MinecartBlockCommandOrigin::*rv)() const;
        *((void**)&rv) = dlsym("?getOriginType@MinecartBlockCommandOrigin@@UEBA?AW4CommandOriginType@@XZ");
        return (this->*rv)();
    }
    inline bool isValid() const{
        bool (MinecartBlockCommandOrigin::*rv)() const;
        *((void**)&rv) = dlsym("?isValid@MinecartBlockCommandOrigin@@UEBA_NXZ");
        return (this->*rv)();
    }
    */
    MCAPI MinecartBlockCommandOrigin(class BlockSource&, struct ActorUniqueID const&);
    MCAPI static std::unique_ptr<class MinecartBlockCommandOrigin> load(class CompoundTag const&, class Level&);

protected:

private:

};