/**
 * @file  MinecraftGameTest.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "BlockSourceListener.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class MinecraftGameTest.
 *
 */
class MinecraftGameTest : public BlockSourceListener {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_MINECRAFTGAMETEST
public:
    class MinecraftGameTest& operator=(class MinecraftGameTest const &) = delete;
    MinecraftGameTest(class MinecraftGameTest const &) = delete;
    MinecraftGameTest() = delete;
#endif

public:
    virtual ~MinecraftGameTest();
    virtual void __unk_vfn_1();
    virtual void __unk_vfn_3();
    virtual void __unk_vfn_4();
    virtual void __unk_vfn_6();
    virtual void __unk_vfn_8();
    virtual void __unk_vfn_9();
    virtual void __unk_vfn_10();
    virtual class Particle * addParticle(enum ParticleType, class Vec3 const &, class Vec3 const &, int, class CompoundTag const *, bool);
    virtual void __unk_vfn_12();
    virtual void __unk_vfn_13();
    virtual void __unk_vfn_14();
    virtual void __unk_vfn_15();
    virtual void __unk_vfn_16();
    virtual void __unk_vfn_17();
    virtual void __unk_vfn_18();
    virtual void __unk_vfn_19();
    virtual void __unk_vfn_20();
    virtual void __unk_vfn_21();
    virtual void __unk_vfn_22();
    virtual void __unk_vfn_23();
    virtual void __unk_vfn_24();
    virtual void __unk_vfn_25();
    virtual void onLevelDestruction(std::string const &);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_MINECRAFTGAMETEST
#endif
    MCAPI MinecraftGameTest(class Level &);
    MCAPI void clearAllTests(class BlockSource &);
    MCAPI class gametest::GameTestRegistry & getRegistry();
    MCAPI class gametest::GameTestTicker & getTicker();
    MCAPI void loadExistingTests(class Level &);
    MCAPI void registerDefaultGameBatches(class Level &);
    MCAPI void registerNativeGameTests();
    MCAPI std::string runTest(std::string const &, class Dimension &, struct gametest::TestParameters const &);
    MCAPI std::string runTestAt(class BlockSource &, class BlockPos const &, class std::optional<enum Rotation>);
    MCAPI std::vector<class std::shared_ptr<class gametest::BaseGameTestInstance>> const & runTests(class Dimension &, struct gametest::TestParameters &&);

//private:
    MCAPI void _runTestPreparation(class gametest::BaseGameTestFunction const &);

private:

};