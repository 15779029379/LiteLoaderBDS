// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#include "BlockSourceListener.hpp"
#include "Types.hpp"
#define EXTRA_INCLUDE_PART_MINECRAFTGAMETEST
#include "Extra/MinecraftGameTestAPI.hpp"
#undef EXTRA_INCLUDE_PART_MINECRAFTGAMETEST
class MinecraftGameTest : public BlockSourceListener {
#include "Extra/MinecraftGameTestAPI.hpp"
public:
    virtual ~MinecraftGameTest();
    virtual void unk_vfn_1();
    virtual void onSourceDestroyed(class BlockSource&);
    virtual void unk_vfn_3();
    virtual void unk_vfn_4();
    virtual void unk_vfn_6();
    virtual void unk_vfn_7();
    virtual void unk_vfn_8();
    virtual void unk_vfn_9();
    virtual void unk_vfn_10();
    virtual void unk_vfn_11();
    virtual void unk_vfn_12();
    virtual void unk_vfn_13();
    virtual void unk_vfn_14();
    virtual void unk_vfn_15();
    virtual void unk_vfn_16();
    virtual void unk_vfn_17();
    virtual void unk_vfn_18();
    virtual void unk_vfn_19();
    virtual void unk_vfn_20();
    virtual void unk_vfn_21();
    virtual void unk_vfn_22();
    virtual void unk_vfn_23();
    virtual void unk_vfn_24();
    virtual void unk_vfn_25();
    virtual void onLevelDestruction(std::string const&);

public:
    MCAPI void clearAllTests(class BlockSource&);
    MCAPI class gametest::GameTestRegistry& getRegistry();
    MCAPI class gametest::GameTestTicker& getTicker();
    MCAPI void loadExistingTests(class Level&);
    MCAPI void registerDefaultGameBatches(class Level&);
    MCAPI void registerNativeGameTests();
    MCAPI std::string runTest(std::string const&, class Dimension&, struct gametest::TestParameters const&);
    MCAPI std::string runTestAt(class BlockSource&, class BlockPos const&, class std::optional<enum Rotation>);
    MCAPI std::vector<class std::shared_ptr<class gametest::BaseGameTestInstance>> const& runTests(class Dimension&, struct gametest::TestParameters&&);

private:
    MCAPI void _runTestPreparation(class gametest::BaseGameTestFunction const&);
};