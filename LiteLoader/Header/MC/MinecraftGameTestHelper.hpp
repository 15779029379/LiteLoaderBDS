// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#define EXTRA_INCLUDE_PART_MINECRAFTGAMETESTHELPER
#include "Extra/MinecraftGameTestHelperAPI.hpp"
#undef EXTRA_INCLUDE_PART_MINECRAFTGAMETESTHELPER
class MinecraftGameTestHelper {
#include "Extra/MinecraftGameTestHelperAPI.hpp"
public:
    virtual ~MinecraftGameTestHelper();
    virtual void succeedWhenEntityPresent(struct ActorDefinitionIdentifier const&, class BlockPos const&, bool);
    virtual void succeedWhenEntityPresent(struct ActorDefinitionIdentifier const&, int, int, int, bool);
    virtual void succeedWhenEntityData(class BlockPos const&, struct ActorDefinitionIdentifier const&, class std::function<bool(class Actor&)>);
    virtual void succeedWhenEntityHasComponent(struct ActorDefinitionIdentifier const&, std::string const&, class BlockPos const&, bool);
    virtual void succeedWhenBlockPresent(class BlockLegacy const&, class BlockPos const&, bool);
    virtual void succeedWhenBlockPresent(class Block const&, class BlockPos const&, bool);
    virtual void succeedWhenBlockPresent(class Block const&, int, int, int, bool);
    virtual void setNight();
    virtual void setDayTime(int);
    virtual class std::optional<struct gametest::GameTestError> setBlock(class BlockPos const&, class Block const&, int);
    virtual class std::optional<struct gametest::GameTestError> setBlock(int, int, int, class Block const&, int);
    virtual class std::optional<struct gametest::GameTestError> pressButton(class BlockPos const&);
    virtual class std::optional<struct gametest::GameTestError> pressButton(int, int, int);
    virtual class std::optional<struct gametest::GameTestError> pullLever(class BlockPos const&);
    virtual class std::optional<struct gametest::GameTestError> pullLever(int, int, int);
    virtual class std::optional<struct gametest::GameTestError> killAllEntities();
    virtual class std::variant<struct gametest::GameTestError, class Actor*> spawn(struct ActorDefinitionIdentifier const&, class Vec3 const&);
    virtual class std::variant<struct gametest::GameTestError, class Actor*> spawn(struct ActorDefinitionIdentifier const&, class BlockPos const&);
    virtual class std::variant<struct gametest::GameTestError, class Actor*> spawn(struct ActorDefinitionIdentifier const&, int, int, int);
    virtual class std::variant<struct gametest::GameTestError, class Actor*> spawnItem(class ItemStack const&, class Vec3 const&);
    virtual class std::variant<struct gametest::GameTestError, class Actor*> spawnWithoutBehaviors(struct ActorDefinitionIdentifier const&, class Vec3 const&);
    virtual class std::variant<struct gametest::GameTestError, class Actor*> spawnWithoutBehaviors(struct ActorDefinitionIdentifier const&, class BlockPos const&);
    virtual class std::optional<struct gametest::GameTestError> walkTo(class Mob&, class Vec3 const&, float);
    virtual class std::optional<struct gametest::GameTestError> walkTo(class Mob&, class BlockPos const&, float);
    virtual class std::optional<struct gametest::GameTestError> setTntFuse(class Actor&, int);
    virtual class std::optional<struct gametest::GameTestError> assertEntityPresent(struct ActorDefinitionIdentifier const&, class BlockPos const&, float, bool);
    virtual class std::optional<struct gametest::GameTestError> assertEntityPresent(struct ActorDefinitionIdentifier const&, class BlockPos const&, bool);
    virtual class std::optional<struct gametest::GameTestError> assertEntityPresent(struct ActorDefinitionIdentifier const&, int, int, int, bool);
    virtual class std::optional<struct gametest::GameTestError> assertEntityPresent(struct ActorDefinitionIdentifier const&, bool);
    virtual class std::optional<struct gametest::GameTestError> assertEntityInstancePresent(class Actor const*, class BlockPos const&, bool);
    virtual class std::optional<struct gametest::GameTestError> assertEntityTouching(struct ActorDefinitionIdentifier const&, class Vec3 const&, bool);
    virtual class std::optional<struct gametest::GameTestError> assertEntityState(class BlockPos const&, struct ActorDefinitionIdentifier const&, class std::function<bool(class Actor&)>);
    virtual class std::optional<struct gametest::GameTestError> assertBlockPresent(class BlockLegacy const&, class BlockPos const&, bool);
    virtual class std::optional<struct gametest::GameTestError> assertBlockPresent(class BlockLegacy const&, int, int, int, bool);
    virtual class std::optional<struct gametest::GameTestError> assertBlockState(class BlockPos const&, class std::function<bool(class Block const&)>);
    virtual class std::optional<struct gametest::GameTestError> assertItemEntityPresent(class Item const&, class BlockPos const&, float, bool);
    virtual class std::optional<struct gametest::GameTestError> assertItemEntityPresent(class Item const&, int, int, int, float, bool);
    virtual class std::optional<struct gametest::GameTestError> assertItemEntityCountIs(class Item const&, class BlockPos const&, float, int);
    virtual class std::optional<struct gametest::GameTestError> assertContainerEmpty(class BlockPos const&);
    virtual class std::optional<struct gametest::GameTestError> assertContainerContains(class ItemStack const&, class BlockPos const&);
    virtual class std::optional<struct gametest::GameTestError> assertEntityHasComponent(struct ActorDefinitionIdentifier const&, std::string const&, class BlockPos const&, bool);
    virtual class std::optional<struct gametest::GameTestError> assertEntityHasArmor(struct ActorDefinitionIdentifier const&, int /*enum ArmorSlot*/, std::string const&, int, class BlockPos const&, bool);
    virtual class std::optional<struct gametest::GameTestError> print(std::string const&);
    virtual class std::optional<struct gametest::GameTestError> assertRedstonePower(class BlockPos const&, int);
    virtual class std::optional<struct gametest::GameTestError> assertIsWaterlogged(class BlockPos const&, bool);
    virtual class std::optional<struct gametest::GameTestError> pulseRedstone(class BlockPos const&, int);
    virtual class std::variant<struct gametest::GameTestError, class ScriptGameTestConnectivity> getFenceConnectivity(class BlockPos const&);
    virtual class std::variant<struct gametest::GameTestError, class Vec3> worldPosition(class Vec3 const&);
    virtual class std::variant<struct gametest::GameTestError, class BlockPos> worldPosition(class BlockPos const&);
    virtual class std::variant<struct gametest::GameTestError, class Vec3> relativePosition(class Vec3 const&);
    virtual class std::variant<struct gametest::GameTestError, class BlockPos> relativePosition(class BlockPos const&);
    virtual class std::optional<struct gametest::GameTestError> setFluidContainer(class BlockPos const&, int);
    virtual class std::optional<struct gametest::GameTestError> assertCanReachLocation(class Mob&, class BlockPos const&, bool);
    virtual class std::optional<struct gametest::GameTestError> spreadFromFaceTowardDirection(class BlockPos const&, unsigned char, unsigned char);
    virtual class std::variant<struct gametest::GameTestError, class SimulatedPlayer*> spawnSimulatedPlayer(std::string const&, class BlockPos const&);
    virtual void removeSimulatedPlayer(class SimulatedPlayer&);
    virtual class std::optional<struct gametest::GameTestError> getBlockSource(class BlockSource*&);


private:
    MCAPI class std::optional<struct gametest::GameTestError> _assertEntityPresent(struct ActorDefinitionIdentifier const&, class AABB const&, class BlockPos const&, bool) const;
    MCAPI class Container const* _getContainer(class BlockPos const&);
    MCAPI int _getItemEntityCount(class Item const&, class AABB const&);
    MCAPI class std::optional<struct gametest::GameTestError> _getStructureBlockMissingError() const;
    MCAPI bool _isEntityPresent(struct ActorDefinitionIdentifier const&, class AABB const&) const;
};