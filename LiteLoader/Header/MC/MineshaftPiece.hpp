// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#include "StructurePiece.hpp"
#define EXTRA_INCLUDE_PART_MINESHAFTPIECE
#include "Extra/MineshaftPieceAPI.hpp"
#undef EXTRA_INCLUDE_PART_MINESHAFTPIECE
class MineshaftPiece : public StructurePiece {
#include "Extra/MineshaftPieceAPI.hpp"
public:
    virtual ~MineshaftPiece();
    virtual void unk_vfn_2();
    virtual int /*enum StructurePieceType*/ getType() const;
    virtual void addChildren(class StructurePiece&, std::vector<std::unique_ptr<class StructurePiece>>&, class Random&);
    virtual bool postProcess(class BlockSource&, class Random&, class BoundingBox const&) = 0;
    virtual void postProcessMobsAt(class BlockSource&, class Random&, class BoundingBox const&);
    virtual bool canBeReplaced(class BlockSource&, int, int, int, class BoundingBox const&);
    virtual int getWorldZ(int, int);

public:
    MCAPI std::unique_ptr<class StructurePiece> createRandomShaftPiece(struct MineshaftData&, std::vector<std::unique_ptr<class StructurePiece>>&, class Random&, int, int, int, int, int);
    MCAPI class StructurePiece* generateAndAddPiece(class StructurePiece&, std::vector<std::unique_ptr<class StructurePiece>>&, class Random&, int, int, int, int, int);
    MCAPI void setPlanksBlock(class BlockSource&, class Block const&, int, int, int);
};