// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#define EXTRA_INCLUDE_PART
#include "Extra/MobAPI.hpp"
#undef EXTRA_INCLUDE_PART
class Mob : public Actor {
#include "Extra/MobAPI.hpp"
public:
    virtual bool hasComponent(class HashedString const&);
    virtual void outOfWorld();
    virtual void reloadHardcoded(int /*enum Actor::InitializationMethod*/, class VariantParameterList const&);
    virtual void reloadHardcodedClient(int /*enum Actor::InitializationMethod*/, class VariantParameterList const&);
    virtual void initializeComponents(int /*enum Actor::InitializationMethod*/, class VariantParameterList const&);
    virtual void _doInitialMove();
    virtual ~Mob();
    virtual bool isRuntimePredictedMovementEnabled();
    virtual void unk_vfn_22();
    virtual float getInterpolatedBodyRot(float);
    virtual float getInterpolatedHeadRot(float);
    virtual float getInterpolatedBodyYaw(float);
    virtual float getYawSpeedInDegreesPerSecond();
    virtual class Vec3 getInterpolatedRidingOffset(float);
    virtual void unk_vfn_41();
    virtual void blockedByShield(class ActorDamageSource const&, class Actor&);
    virtual void teleportTo(class Vec3 const&, bool, int, int);
    virtual void normalTick();
    virtual void baseTick();
    virtual void vehicleTick();
    virtual float getRidingHeight();
    virtual bool startRiding(class Actor&);
    virtual void addPassenger(class Actor&);
    virtual void unk_vfn_61();
    virtual void unk_vfn_68();
    virtual float getCameraOffset();
    virtual void unk_vfn_82();
    virtual void unk_vfn_87();
    virtual void playerTouch(class Player&);
    virtual bool isImmobile();
    virtual bool isPickable();
    virtual void unk_vfn_94();
    virtual bool isSleeping();
    virtual void setSleeping(bool);
    virtual void unk_vfn_97();
    virtual bool isBlocking();
    virtual bool isDamageBlocked(class ActorDamageSource const&);
    virtual bool isAlive();
    virtual void unk_vfn_103();
    virtual void unk_vfn_104();
    virtual bool isSurfaceMob();
    virtual void unk_vfn_106();
    virtual void unk_vfn_107();
    virtual void unk_vfn_108();
    virtual void setTarget(class Actor*);
    virtual class Actor* findAttackTarget();
    virtual bool isValidTarget(class Actor*);
    virtual bool attack(class Actor&, int /*enum ActorDamageCause*/ const&);
    virtual void adjustDamageAmount(int&);
    virtual void onTame();
    virtual void onFailedTame();
    virtual bool canPowerJump();
    virtual bool isJumping();
    virtual void unk_vfn_130();
    virtual void vehicleLanded(class Vec3 const&, class Vec3 const&);
    virtual int /*enum ActorDamageCause*/ getBlockDamageCause(class Block const&);
    virtual void actuallyHurt(int, class ActorDamageSource const&, bool);
    virtual void animateHurt();
    virtual bool doFireHurt(int);
    virtual void onBounceStarted(class BlockPos const&, class Block const&);
    virtual void handleEntityEvent(int /*enum ActorEvent*/, int);
    virtual void unk_vfn_144();
    virtual void awardKillScore(class Actor&, int);
    virtual int /*enum ArmorMaterialType*/ getArmorMaterialTypeInSlot(int /*enum ArmorSlot*/);
    virtual int /*enum ArmorTextureType*/ getArmorMaterialTextureTypeInSlot(int /*enum ArmorSlot*/);
    virtual float getArmorColorInSlot(int /*enum ArmorSlot*/, int);
    virtual void setEquippedSlot(int /*enum EquipmentSlot*/, class ItemStack const&);
    virtual int /*enum ActorType*/ getEntityTypeId();
    virtual class HashedString const& queryEntityRenderer();
    virtual struct ActorUniqueID getSourceUniqueID();
    virtual void setOnFire(int);
    virtual bool canFreeze();
    virtual int getPortalWaitTime();
    virtual bool canChangeDimensions();
    virtual void unk_vfn_184();
    virtual struct ActorUniqueID getControllingPlayer();
    virtual void causeFallDamage(float, float, class ActorDamageSource);
    virtual bool canPickupItem(class ItemStack const&);
    virtual bool canBePulledIntoVehicle();
    virtual bool inCaravan();
    virtual void unk_vfn_197();
    virtual bool canSynchronizeNewEntity();
    virtual void stopRiding(bool, bool, bool);
    virtual void buildDebugInfo(std::string&);
    virtual int getDeathTime();
    virtual void swing();
    virtual void unk_vfn_222();
    virtual void unk_vfn_223();
    virtual float getYHeadRot();
    virtual bool isWorldBuilder();
    virtual void unk_vfn_229();
    virtual bool isAdventure();
    virtual bool canDestroyBlock(class Block const&);
    virtual void setAuxValue(int);
    virtual void stopSpinAttack();
    virtual void unk_vfn_243();
    virtual void unk_vfn_246();
    virtual void kill();
    virtual void die(class ActorDamageSource const&);
    virtual bool shouldDropDeathLoot();
    virtual void updateEntitySpecificMolangVariables(class RenderParams&);
    virtual void unk_vfn_258();
    virtual bool _hurt(class ActorDamageSource const&, int, bool, bool);
    virtual void readAdditionalSaveData(class CompoundTag const&, class DataLoadHelper&);
    virtual void addAdditionalSaveData(class CompoundTag&);
    virtual void _playStepSound(class BlockPos const&, class Block const&);
    virtual void unk_vfn_266();
    virtual void _removePassenger(struct ActorUniqueID const&, bool, bool, bool);
    virtual void _onSizeUpdated();
    virtual void unk_vfn_275();
    virtual void knockback(class Actor*, int, float, float, float, float, float);
    virtual void spawnAnim();
    virtual void setSprinting(bool);
    virtual int /*enum LevelSoundEvent*/ getHurtSound();
    virtual int /*enum LevelSoundEvent*/ getDeathSound();
    virtual struct TextureUVCoordinateSet const* getItemInHandIcon(class ItemStack const&, int);
    virtual float getSpeed();
    virtual void setSpeed(float);
    virtual float getJumpPower();
    virtual bool hurtEffects(class ActorDamageSource const&, int, bool, bool);
    virtual int getMeleeWeaponDamageBonus(class Mob*);
    virtual int getMeleeKnockbackBonus();
    virtual void travel(struct IMobMovementProxy&, float, float, float);
    virtual void travel(float, float, float);
    virtual void applyFinalFriction(float, bool);
    virtual void updateWalkAnim();
    virtual void aiStep(struct IMobMovementProxy&);
    virtual void aiStep();
    virtual void pushActors();
    virtual void lookAt(class Actor*, float, float);
    virtual bool isLookingAtAnEntity();
    virtual bool checkSpawnRules(bool);
    virtual bool checkSpawnObstruction();
    virtual float getAttackAnim(float);
    virtual int getItemUseDuration();
    virtual float getItemUseStartupProgress();
    virtual float getItemUseIntervalProgress();
    virtual int getItemUseIntervalAxis();
    virtual int getTimeAlongSwing();
    virtual void unk_vfn_305();
    virtual float getMaxHeadXRot();
    virtual bool isAlliedTo(class Mob*);
    virtual bool doHurtTarget(class Actor*, int /*enum ActorDamageCause*/ const&);
    virtual void unk_vfn_309();
    virtual void leaveCaravan();
    virtual void joinCaravan(class Mob*);
    virtual bool hasCaravanTail();
    virtual struct ActorUniqueID getCaravanHead();
    virtual int getArmorValue();
    virtual float getArmorCoverPercentage();
    virtual void hurtArmorSlots(class ActorDamageSource const&, int, class std::bitset<4> const&);
    virtual void setDamagedArmor(int /*enum ArmorSlot*/, class ItemStack const&);
    virtual void sendArmorDamage(class std::bitset<4> const&);
    virtual void sendArmor(class std::bitset<4> const&);
    virtual void containerChanged(int);
    virtual void updateEquipment();
    virtual int clearEquipment();
    virtual std::vector<class ItemStack const*> getAllArmor();
    virtual std::vector<int> getAllArmorID();
    virtual std::vector<class ItemStack const*> getAllHand();
    virtual std::vector<class ItemStack const*> getAllEquipment();
    virtual int getArmorTypeHash();
    virtual void dropEquipmentOnDeath();
    virtual void dropEquipmentOnDeath(class ActorDamageSource const&, int);
    virtual void clearVanishEnchantedItemsOnDeath();
    virtual void sendInventory(bool);
    virtual int getDamageAfterMagicAbsorb(class ActorDamageSource const&, int);
    virtual bool createAIGoals();
    virtual void onBorn(class Actor&, class Actor&);
    virtual bool setItemSlot(int /*enum EquipmentSlot*/, class ItemStack const&);
    virtual void setTransitioningSitting(bool);
    virtual void attackAnimation(class Actor*, float);
    virtual void unk_vfn_338();
    virtual float _getWalkTargetValue(class BlockPos const&);
    virtual bool canExistWhenDisallowMob();
    virtual void unk_vfn_341();
    virtual void ascendLadder();
    virtual void ascendBlockByJumping();
    virtual void descendBlockByCrouching();
    virtual void dropContainer();
    virtual std::unique_ptr<class BodyControl> initBodyControl();
    virtual void jumpFromGround(struct IMobMovementProxy&);
    virtual void jumpFromGround();
    virtual void updateAi();
    virtual void newServerAiStep();
    virtual void _serverAiMobStep();
    virtual int getDamageAfterEnchantReduction(class ActorDamageSource const&, int);
    virtual int getDamageAfterArmorAbsorb(class ActorDamageSource const&, int);
    virtual void dropBags();
    virtual void tickDeath();
    virtual void updateGliding();
    virtual void unk_vfn_357();

public:
    MCAPI void addSpeedModifier(class mce::UUID const&, std::string const&, float);
    MCAPI float calcMoveRelativeSpeed(enum TravelType);
    MCAPI bool checkTotemDeathProtection(class ActorDamageSource const&);
    MCAPI void createAI(std::vector<struct GoalDefinition>);
    MCAPI bool discardFriction() const;
    MCAPI void emitJumpPreventedEvent(class BlockPos const&);
    MCAPI void frostWalk();
    MCAPI class BlockPos getBoundOrigin() const;
    MCAPI int getCaravanSize() const;
    MCAPI int getEatCounter() const;
    MCAPI class Mob* getFirstCaravanHead();
    MCAPI float getFlightSpeed();
    MCAPI float getFrictionModifier() const;
    MCAPI int getGlidingTicks() const;
    MCAPI class ItemStack const& getItemSlot(enum EquipmentSlot) const;
    MCAPI float getJumpMultiplier();
    MCAPI struct Mob::JumpPreventionResult getJumpPrevention();
    MCAPI float getMovementComponentCurrentSpeed() const;
    MCAPI int getNoActionTime() const;
    MCAPI int getRollCounter() const;
    MCAPI enum MobSpawnMethod getSpawnMethod();
    MCAPI struct ActorUniqueID getTargetCaptain() const;
    MCAPI enum TravelType getTravelType();
    MCAPI float getYRotA() const;
    MCAPI float getZza() const;
    MCAPI bool hasBoundOrigin() const;
    MCAPI bool isEating() const;
    MCAPI bool isFrostWalking() const;
    MCAPI bool isGliding() const;
    MCAPI bool isLayingEgg() const;
    MCAPI bool isPregnant() const;
    MCAPI bool isRolling() const;
    MCAPI bool isSprinting() const;
    MCAPI bool isTransitioningSitting() const;
    MCAPI void onPlayerDimensionChanged(class Player*, class AutomaticID<class Dimension, int>);
    MCAPI void onPlayerJump(int);
    MCAPI void removeSpeedModifier(class mce::UUID const&);
    MCAPI void resetAttributes();
    MCAPI void resetNoActionTime();
    MCAPI void sendArmorDamageSlot(enum ArmorSlot);
    MCAPI void sendArmorSlot(enum ArmorSlot);
    MCAPI void setEatCounter(int);
    MCAPI void setEating(bool);
    MCAPI void setFlightSpeed(float);
    MCAPI void setFrictionModifier(float);
    MCAPI void setIsLayingEgg(bool);
    MCAPI void setIsPregnant(bool);
    MCAPI void setJumpVelRedux(bool);
    MCAPI void setJumping(bool);
    MCAPI void setMovementComponentCurrentSpeed(float);
    MCAPI void setNaturallySpawned(bool);
    MCAPI void setPassengerLockedBodyRot(float);
    MCAPI void setPassengerRotLimit(float);
    MCAPI void setRolling(bool);
    MCAPI void setSpawnMethod(enum MobSpawnMethod);
    MCAPI void setSpeedModifier(float);
    MCAPI void setSurfaceMob(bool);
    MCAPI void setTargetCaptain(struct ActorUniqueID);
    MCAPI void setXxa(float);
    MCAPI void setYHeadRot(float);
    MCAPI void setYRotA(float);
    MCAPI void setYya(float);
    MCAPI void setZza(float);
    MCAPI bool shouldApplyWaterGravity();
    MCAPI void snapToYBodyRot(float);
    MCAPI void snapToYHeadRot(float);

    MCAPI static int const ABSORPTION_FACTOR_MAX;
    MCAPI static int const ABSORPTION_FACTOR_MIN;
    MCAPI static int const ARMOR_DAMAGE_DIVISOR;
    MCAPI static float const ASCEND_BLOCK_BY_JUMPING_SPEED;
    MCAPI static float const DEFAULT_GRAVITY;
    MCAPI static float const FRICTION_CONSTANT;
    MCAPI static float const FRICTION_CONSTANT_MODIFIED;
    MCAPI static float const FRICTION_MODIFIER;
    MCAPI static float const GLIDING_FALL_RESET_DELTA;
    MCAPI static float const LADDER_CLIMB_SPEED;
    MCAPI static float const PLAYER_SWIMMING_SURFACE_OFFSET;
    MCAPI static int const REMOVE_PASSENGERS_DELAY;
    MCAPI static float const SLOW_FALL_GRAVITY;
    MCAPI static int const TOTAL_ROLL_STEPS;
    MCAPI static void _aiStep(struct IMobMovementProxy&);
    MCAPI static float _calcMoveRelativeSpeed(struct IMobMovementProxy&, enum TravelType);
    MCAPI static void _travel(struct IMobMovementProxy&, float, float, float);
    MCAPI static void _updateMobTravel(struct IMobMovementProxy&);
    MCAPI static float calculateJumpImpulse(struct IMobMovementProxy const&);
    MCAPI static struct Mob::JumpPreventionResult getJumpPrevention(struct IMobMovementProxy const&);
    MCAPI static enum TravelType getTravelType(struct IMobMovementProxy&);
    MCAPI static bool isImmobile(struct IActorMovementProxy const&);
    MCAPI static class Mob* tryGetFromEntity(class EntityContext&, bool);

private:
    MCAPI bool _initHardCodedComponents();
    MCAPI void _updateSprintingState();
    MCAPI void _verifyAttributes();

    MCAPI static bool _tryApplyingLevitation(struct IMobMovementProxy const&, class Vec3&);

protected:
    MCAPI void _doSprintParticleEffect();
    MCAPI void _endJump();
    MCAPI void _registerMobAttributes();
    MCAPI int getCurrentSwingDuration();
    MCAPI void processSoulSpeed();
    MCAPI std::unique_ptr<class ListTag> saveOffhand() const;
    MCAPI void tickEffects();
    MCAPI void updateAttackAnim();
    MCAPI bool updateGlidingDurability();

    MCAPI static int const MAX_INACTIVITY_TIMER;
    MCAPI static void _jumpFromGround(struct IMobMovementProxy&);
};