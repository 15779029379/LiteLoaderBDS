/**
 * @file  Mob.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here
class UserEntityIdentifierComponent;

#undef BEFORE_EXTRA

/**
 * @brief MC class Mob.
 *
 */
class Mob : public Actor {

#define AFTER_EXTRA
// Add Member There
public:
struct JumpPreventionResult {
    JumpPreventionResult() = delete;
    JumpPreventionResult(JumpPreventionResult const&) = delete;
    JumpPreventionResult(JumpPreventionResult const&&) = delete;
};

public:

    LIAPI bool refreshInventory();

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_MOB
public:
    class Mob& operator=(class Mob const &) = delete;
    Mob(class Mob const &) = delete;
    Mob() = delete;
#endif

public:
    virtual bool hasComponent(class HashedString const &) const;
    virtual void outOfWorld();
    virtual void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const &);
    virtual void reloadHardcodedClient(enum Actor::InitializationMethod, class VariantParameterList const &);
    virtual void initializeComponents(enum Actor::InitializationMethod, class VariantParameterList const &);
    virtual void _doInitialMove();
    virtual ~Mob();
    virtual float getInterpolatedBodyRot(float) const;
    virtual float getInterpolatedHeadRot(float) const;
    virtual float getInterpolatedBodyYaw(float) const;
    virtual float getYawSpeedInDegreesPerSecond() const;
    virtual void resetInterpolated();
    virtual void __unk_vfn_41();
    virtual void blockedByShield(class ActorDamageSource const &, class Actor &);
    virtual void teleportTo(class Vec3 const &, bool, int, int, bool);
    virtual void normalTick();
    virtual void baseTick();
    virtual void passengerTick();
    virtual bool startRiding(class Actor &);
    virtual void addPassenger(class Actor &);
    virtual void __unk_vfn_61();
    virtual void __unk_vfn_68();
    virtual void __unk_vfn_82();
    virtual void __unk_vfn_85();
    virtual void __unk_vfn_88();
    virtual bool isImmobile() const;
    virtual bool isPickable();
    virtual void __unk_vfn_96();
    virtual bool isSleeping() const;
    virtual void setSleeping(bool);
    virtual void __unk_vfn_99();
    virtual bool isBlocking() const;
    virtual bool isAlive() const;
    virtual void __unk_vfn_106();
    virtual bool isSurfaceMob() const;
    virtual void __unk_vfn_108();
    virtual void __unk_vfn_109();
    virtual void __unk_vfn_111();
    virtual void setTarget(class Actor *);
    virtual bool attack(class Actor &, enum ActorDamageCause const &);
    virtual bool canPowerJump() const;
    virtual bool isJumping() const;
    virtual enum ActorDamageCause getBlockDamageCause(class Block const &) const;
    virtual void animateHurt();
    virtual bool doFireHurt(int);
    virtual void handleEntityEvent(enum ActorEvent, int);
    virtual enum ArmorMaterialType getArmorMaterialTypeInSlot(enum ArmorSlot) const;
    virtual enum ArmorTextureType getArmorMaterialTextureTypeInSlot(enum ArmorSlot) const;
    virtual float getArmorColorInSlot(enum ArmorSlot, int) const;
    virtual void setEquippedSlot(enum EquipmentSlot, class ItemStack const &);
    virtual bool canFreeze() const;
    virtual void __unk_vfn_182();
    virtual void causeFallDamage(float, float, class ActorDamageSource);
    virtual bool canBePulledIntoVehicle() const;
    virtual bool inCaravan() const;
    virtual void __unk_vfn_196();
    virtual void stopRiding(bool, bool, bool);
    virtual void buildDebugInfo(std::string &) const;
    virtual int getDeathTime() const;
    virtual void swing();
    virtual void __unk_vfn_222();
    virtual void __unk_vfn_223();
    virtual float getYHeadRot() const;
    virtual void setYHeadRot(float);
    virtual float getYHeadRotO() const;
    virtual void __unk_vfn_248();
    virtual void __unk_vfn_251();
    virtual void kill();
    virtual void die(class ActorDamageSource const &);
    virtual bool shouldDropDeathLoot() const;
    virtual void updateEntitySpecificMolangVariables(class RenderParams &);
    virtual void __unk_vfn_269();
    virtual bool _hurt(class ActorDamageSource const &, float, bool, bool);
    virtual void readAdditionalSaveData(class CompoundTag const &, class DataLoadHelper &);
    virtual void addAdditionalSaveData(class CompoundTag &) const;
    virtual void _playStepSound(class BlockPos const &, class Block const &);
    virtual void __unk_vfn_277();
    virtual void _removePassenger(struct ActorUniqueID const &, bool, bool, bool);
    virtual void _onSizeUpdated();
    virtual void __unk_vfn_285();
    virtual void knockback(class Actor *, int, float, float, float, float, float);
    virtual void spawnAnim();
    virtual void setSprinting(bool);
    virtual enum LevelSoundEvent getHurtSound();
    virtual enum LevelSoundEvent getDeathSound();
    virtual struct TextureUVCoordinateSet const * getItemInHandIcon(class ItemStack const &, int);
    virtual float getSpeed() const;
    virtual void setSpeed(float);
    virtual void hurtEffects(class ActorDamageSource const &, float, bool, bool);
    virtual float getMeleeWeaponDamageBonus(class Mob *);
    virtual int getMeleeKnockbackBonus();
    virtual void travel(float, float, float);
    virtual void travel(struct IMobMovementProxy &, float, float, float) const;
    virtual void applyFinalFriction(float, bool);
    virtual void aiStep();
    virtual void aiStep(struct IMobMovementProxy &) const;
    virtual void pushActors();
    virtual void lookAt(class Actor *, float, float);
    virtual bool isLookingAtAnEntity();
    virtual bool checkSpawnRules(bool);
    virtual bool checkSpawnObstruction() const;
    virtual float getAttackAnim(float);
    virtual int getItemUseDuration() const;
    virtual float getItemUseStartupProgress() const;
    virtual float getItemUseIntervalProgress() const;
    virtual int getItemUseIntervalAxis() const;
    virtual int getTimeAlongSwing() const;
    virtual void __unk_vfn_313();
    virtual float getMaxHeadXRot();
    virtual bool isAlliedTo(class Mob *);
    virtual bool doHurtTarget(class Actor *, enum ActorDamageCause const &);
    virtual void __unk_vfn_317();
    virtual void leaveCaravan();
    virtual void joinCaravan(class Mob *);
    virtual bool hasCaravanTail() const;
    virtual struct ActorUniqueID getCaravanHead() const;
    virtual int getArmorValue() const;
    virtual float getArmorCoverPercentage() const;
    virtual int getToughnessValue() const;
    virtual void hurtArmorSlots(class ActorDamageSource const &, int, class std::bitset<4>);
    virtual void setDamagedArmor(enum ArmorSlot, class ItemStack const &);
    virtual void sendArmorDamage(class std::bitset<4>);
    virtual void sendArmor(class std::bitset<4>);
    virtual void containerChanged(int);
    virtual void updateEquipment();
    virtual int clearEquipment();
    virtual std::vector<int> getAllArmorID() const;
    virtual std::vector<class ItemStack const *> getAllHand() const;
    virtual std::vector<class ItemStack const *> getAllEquipment() const;
    virtual int getArmorTypeHash();
    virtual void dropEquipmentOnDeath(class ActorDamageSource const &, int);
    virtual void dropEquipmentOnDeath();
    virtual void clearVanishEnchantedItemsOnDeath();
    virtual void sendInventory(bool);
    virtual float getDamageAfterEnchantReduction(class ActorDamageSource const &, float) const;
    virtual float getDamageAfterArmorReduction(class ActorDamageSource const &, float) const;
    virtual float getDamageAfterResistanceEffect(class ActorDamageSource const &, float) const;
    virtual bool createAIGoals();
    virtual void onBorn(class Actor &, class Actor &);
    virtual bool setItemSlot(enum EquipmentSlot, class ItemStack const &);
    virtual void setTransitioningSitting(bool);
    virtual void attackAnimation(class Actor *, float);
    virtual int getAttackTime();
    virtual float _getWalkTargetValue(class BlockPos const &);
    virtual bool canExistWhenDisallowMob() const;
    virtual void __unk_vfn_351();
    virtual void ascendLadder();
    virtual void ascendBlockByJumping();
    virtual void descendBlockByCrouching();
    virtual void dropContainer();
    virtual std::unique_ptr<class BodyControl> initBodyControl();
    virtual void jumpFromGround();
    virtual void jumpFromGround(struct IMobMovementProxy &) const;
    virtual void updateAi();
    virtual void newServerAiStep();
    virtual void _serverAiMobStep();
    virtual void dropBags();
    virtual void tickDeath();
    virtual void updateGliding();
    virtual void __unk_vfn_365();
    virtual class AABB _getAdjustedAABBForSpawnCheck(class AABB const &, class Vec3 const &) const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_MOB
    MCVAPI bool _allowAscendingScaffolding() const;
    MCVAPI void ate();
    MCVAPI bool canBeControlledByPassenger();
    MCVAPI bool isShootable();
    MCVAPI void renderDebugServerState(class Options const &);
    MCVAPI bool useNewAi() const;
#endif
    MCAPI Mob(class ActorDefinitionGroup *, struct ActorDefinitionIdentifier const &, class EntityContext &);
    MCAPI Mob(class Level &, class EntityContext &);
    MCAPI void _endJump();
    MCAPI void addSpeedModifier(class mce::UUID const &, std::string const &, float);
    MCAPI float calcMoveRelativeSpeed(enum TravelType);
    MCAPI bool checkForPostHitDamageImmunity(float, class ActorDamageSource const &);
    MCAPI bool checkTotemDeathProtection(class ActorDamageSource const &);
    MCAPI void createAI(std::vector<struct GoalDefinition>);
    MCAPI bool discardFriction() const;
    MCAPI void emitJumpPreventedEvent(class BlockPos const &);
    MCAPI void frostWalk();
    MCAPI class BlockPos getBoundOrigin() const;
    MCAPI int getCaravanSize() const;
    MCAPI int getEatCounter() const;
    MCAPI class Mob * getFirstCaravanHead();
    MCAPI float getFlightSpeed() const;
    MCAPI float getFrictionModifier() const;
    MCAPI int getGlidingTicks() const;
    MCAPI class ItemStack const & getItemSlot(enum EquipmentSlot) const;
    MCAPI float getJumpEffectAmplifierValue();
    MCAPI float getJumpMultiplier();
    MCAPI float getJumpPower() const;
    MCAPI struct JumpPreventionResult getJumpPrevention();
    MCAPI float getMovementComponentCurrentSpeed() const;
    MCAPI int getNoActionTime() const;
    MCAPI float getPassengerLockedBodyRot() const;
    MCAPI float getPassengerRotLimit() const;
    MCAPI int getRollCounter() const;
    MCAPI float getSwimSpeedMultiplier() const;
    MCAPI struct ActorUniqueID getTargetCaptain() const;
    MCAPI enum TravelType getTravelType();
    MCAPI float getYRotA() const;
    MCAPI float getZza() const;
    MCAPI bool hasBoundOrigin() const;
    MCAPI void hurtArmor(class ActorDamageSource const &, int);
    MCAPI bool isAbleToMove() const;
    MCAPI bool isEating() const;
    MCAPI bool isFrostWalking() const;
    MCAPI bool isGliding() const;
    MCAPI bool isLayingEgg() const;
    MCAPI bool isPregnant() const;
    MCAPI bool isRolling() const;
    MCAPI bool isSprinting() const;
    MCAPI bool isTransitioningSitting() const;
    MCAPI void onPlayerDimensionChanged(class Player *, class AutomaticID<class Dimension, int>);
    MCAPI void onPlayerJump(int);
    MCAPI void removeSpeedModifier(class mce::UUID const &);
    MCAPI void resetAttributes();
    MCAPI void resetNoActionTime();
    MCAPI void sendArmorDamageSlot(enum ArmorSlot);
    MCAPI void sendArmorSlot(enum ArmorSlot);
    MCAPI void setEatCounter(int);
    MCAPI void setEating(bool);
    MCAPI void setFlightSpeed(float);
    MCAPI void setFrictionModifier(float);
    MCAPI void setIsLayingEgg(bool);
    MCAPI void setIsPregnant(bool);
    MCAPI void setJumpVelRedux(bool);
    MCAPI void setJumping(bool);
    MCAPI void setMovementComponentCurrentSpeed(float);
    MCAPI void setNaturallySpawned(bool);
    MCAPI void setPassengerLockedBodyRot(float);
    MCAPI void setPassengerRotLimit(float);
    MCAPI void setRolling(bool);
    MCAPI void setSpawnMethod(enum MobSpawnMethod);
    MCAPI void setSpeedModifier(float);
    MCAPI void setSurfaceMob(bool);
    MCAPI void setSwimSpeedMultiplier(float);
    MCAPI void setTargetCaptain(struct ActorUniqueID);
    MCAPI void setXxa(float);
    MCAPI void setYRotA(float);
    MCAPI void setYya(float);
    MCAPI void setZza(float);
    MCAPI void snapToYBodyRot(float);
    MCAPI void snapToYHeadRot(float);
MCAPI static int const ARMOR_DAMAGE_DIVISOR;
MCAPI static float const ARMOR_PROTECTION_DIVIDER;
MCAPI static float const ASCEND_BLOCK_BY_JUMPING_SPEED;
MCAPI static float const BASE_ARMOR_TOUGHNESS;
MCAPI static float const DEFAULT_GRAVITY;
MCAPI static float const FRICTION_CONSTANT;
MCAPI static float const FRICTION_CONSTANT_MODIFIED;
MCAPI static float const FRICTION_MODIFIER;
MCAPI static float const GLIDING_FALL_RESET_DELTA;
MCAPI static float const LADDER_CLIMB_SPEED;
MCAPI static float const MAX_ARMOR;
MCAPI static float const MIN_ARMOR_RATIO;
MCAPI static float const NUM_ARMOR_ITEMS;
MCAPI static float const PLAYER_SWIMMING_SURFACE_OFFSET;
MCAPI static int const REMOVE_PASSENGERS_DELAY;
MCAPI static float const SLOW_FALL_GRAVITY;
MCAPI static int const SPAWN_XP_DELAY;
MCAPI static int const TOTAL_ROLL_STEPS;
    MCAPI static void _aiStep(struct IMobMovementProxy &);
    MCAPI static float _calcMoveRelativeSpeed(struct IMobMovementProxy &, enum TravelType);
    MCAPI static void _travel(struct IMobMovementProxy &, float, float, float);
    MCAPI static void _updateMobTravel(struct IMobMovementProxy &);
    MCAPI static float calculateJumpImpulse(struct IMobMovementProxy const &);
    MCAPI static float getJumpEffectAmplifierValue(struct IMobMovementProxy const &);
    MCAPI static struct JumpPreventionResult getJumpPrevention(struct IMobMovementProxy const &);
    MCAPI static enum TravelType getTravelType(struct IMobMovementProxy &);
    MCAPI static bool isImmobile(struct IActorMovementProxy const &);
    MCAPI static bool shouldApplyWaterGravity(struct IActorMovementProxy const &);
    MCAPI static class Mob * tryGetFromEntity(class EntityContext &, bool);

//protected:
    MCAPI void _doSprintParticleEffect();
    MCAPI void _processSoulSpeed();
    MCAPI void _registerMobAttributes();
    MCAPI int getCurrentSwingDuration();
    MCAPI std::unique_ptr<class ListTag> saveOffhand() const;
    MCAPI void tickEffects();
    MCAPI void updateAttackAnim();
    MCAPI bool updateGlidingDurability();
    MCAPI static void _jumpFromGround(struct IMobMovementProxy &);

//private:
    MCAPI bool _initHardCodedComponents();
    MCAPI void _initialize(class EntityContext &);
    MCAPI void _updateSprintingState();
    MCAPI void _verifyAttributes();
    MCAPI static bool _tryApplyingLevitation(struct IMobMovementProxy const &, class Vec3 &);

protected:
MCAPI static int const MAX_INACTIVITY_TIMER;

private:

};