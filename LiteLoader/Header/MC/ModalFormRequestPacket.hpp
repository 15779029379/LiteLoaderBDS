// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Packet.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class ModalFormRequestPacket : public Packet {

#define AFTER_EXTRA
// Add Member There
public:
    int formId;
    std::string data;

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_MODALFORMREQUESTPACKET
public:
    class ModalFormRequestPacket& operator=(class ModalFormRequestPacket const&) = delete;
    ModalFormRequestPacket(class ModalFormRequestPacket const&) = delete;
#endif

public:
    /*0*/ virtual ~ModalFormRequestPacket();
    /*1*/ virtual void __unk_vfn_0();
    /*2*/ virtual std::string getName() const;
    /*3*/ virtual void __unk_vfn_1();
    /*4*/ virtual bool disallowBatching() const;
    /*5*/ virtual void __unk_vfn_2();
    /*
    inline enum MinecraftPacketIds getId() const{
        enum MinecraftPacketIds (ModalFormRequestPacket::*rv)() const;
        *((void**)&rv) = dlsym("?getId@ModalFormRequestPacket@@UEBA?AW4MinecraftPacketIds@@XZ");
        return (this->*rv)();
    }
    inline enum StreamReadResult _read(class ReadOnlyBinaryStream& a0){
        enum StreamReadResult (ModalFormRequestPacket::*rv)(class ReadOnlyBinaryStream&);
        *((void**)&rv) = dlsym("?_read@ModalFormRequestPacket@@EEAA?AW4StreamReadResult@@AEAVReadOnlyBinaryStream@@@Z");
        return (this->*rv)(std::forward<class ReadOnlyBinaryStream&>(a0));
    }
    inline void write(class BinaryStream& a0) const{
        void (ModalFormRequestPacket::*rv)(class BinaryStream&) const;
        *((void**)&rv) = dlsym("?write@ModalFormRequestPacket@@UEBAXAEAVBinaryStream@@@Z");
        return (this->*rv)(std::forward<class BinaryStream&>(a0));
    }
    */
    MCAPI ModalFormRequestPacket();

protected:

private:

};