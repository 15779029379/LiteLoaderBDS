/**
 * @file  MoveToPOIGoal.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "BaseMoveToGoal.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class MoveToPOIGoal.
 *
 */
class MoveToPOIGoal : public BaseMoveToGoal {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_MOVETOPOIGOAL
public:
    class MoveToPOIGoal& operator=(class MoveToPOIGoal const &) = delete;
    MoveToPOIGoal(class MoveToPOIGoal const &) = delete;
    MoveToPOIGoal() = delete;
#endif

public:
    virtual ~MoveToPOIGoal();
    virtual bool canUse();
    virtual void __unk_vfn_3();
    virtual void stop();
    virtual void tick();
    virtual void appendDebugInfo(std::string &) const;
    virtual void __unk_vfn_8();
    virtual void __unk_vfn_9();
    virtual bool isValidTarget(class BlockSource &, class BlockPos const &);
    virtual void _moveToBlock();
    virtual class Vec3 _getTargetPosition() const;
    virtual class std::weak_ptr<class POIInstance> _getOwnedPOI(enum POIType) const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_MOVETOPOIGOAL
#endif
    MCAPI MoveToPOIGoal(class Mob &, float, enum POIType, float);
    MCAPI bool getPOI(enum POIType);

//protected:
    MCAPI bool _canReachPOI(class Vec3 const &, float, bool);

//private:
    MCAPI void _updatePOIBooking();

protected:

private:

};