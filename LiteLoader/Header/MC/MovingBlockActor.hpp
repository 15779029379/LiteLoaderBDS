/**
 * @file  MovingBlockActor.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "BlockActor.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class MovingBlockActor.
 *
 */
class MovingBlockActor : public BlockActor {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_MOVINGBLOCKACTOR
public:
    class MovingBlockActor& operator=(class MovingBlockActor const &) = delete;
    MovingBlockActor(class MovingBlockActor const &) = delete;
    MovingBlockActor() = delete;
#endif

public:
    virtual ~MovingBlockActor();
    virtual void load(class Level &, class CompoundTag const &, class DataLoadHelper &);
    virtual bool save(class CompoundTag &) const;
    virtual void tick(class BlockSource &);
    virtual void __unk_vfn_12();
    virtual void __unk_vfn_16();
    virtual class PistonBlockActor * getOwningPiston(class BlockSource &);
    virtual void __unk_vfn_28();
    virtual void __unk_vfn_29();
    virtual void __unk_vfn_30();
    virtual float getDeletionDelayTimeSeconds() const;
    virtual void __unk_vfn_32();
    virtual void __unk_vfn_33();
    virtual void __unk_vfn_34();
    virtual std::unique_ptr<class BlockActorDataPacket> _getUpdatePacket(class BlockSource &);
    virtual void _onUpdatePacket(class CompoundTag const &, class BlockSource &);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_MOVINGBLOCKACTOR
#endif
    MCAPI MovingBlockActor(class BlockPos const &);
    MCAPI bool _validPistonPos(class IConstBlockSource const &) const;
    MCAPI class std::shared_ptr<class BlockActor> aquireBlockEntity();
    MCAPI class AABB const & getCollisionShape() const;
    MCAPI class Vec3 getDrawPos(class IConstBlockSource const &, float) const;
    MCAPI class Block const & getExtraBlock();
    MCAPI class Block const & getMovingBlock() const;
    MCAPI void moveCollidedEntities(class PistonBlockActor &, class BlockSource &);
    MCAPI void registerPiston(class BlockSource const &, class BlockPos const &);
    MCAPI void setBlock(class Block const &);
    MCAPI void setBlockEntity(class std::shared_ptr<class BlockActor>);
    MCAPI void setCollisionShape(class AABB const &);
    MCAPI void setExtraBlock(class Block const &);

};