/**
 * @file  NBTSchemaReader.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

/**
 * @brief MC class NBTSchemaReader.
 *
 */
class NBTSchemaReader {

#define AFTER_EXTRA

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_NBTSCHEMAREADER
public:
    class NBTSchemaReader& operator=(class NBTSchemaReader const &) = delete;
    NBTSchemaReader(class NBTSchemaReader const &) = delete;
    NBTSchemaReader() = delete;
#endif

public:
    virtual ~NBTSchemaReader();
    virtual bool isValid() const;
    virtual bool isString() const;
    virtual bool isObject() const;
    virtual bool isArray() const;
    virtual void __unk_vfn_5();
    virtual void __unk_vfn_6();
    virtual void __unk_vfn_7();
    virtual void __unk_vfn_8();
    virtual void __unk_vfn_9();
    virtual void __unk_vfn_10();
    virtual void __unk_vfn_11();
    virtual void __unk_vfn_12();
    virtual void __unk_vfn_13();
    virtual bool isFloat() const;
    virtual bool isDouble() const;
    virtual bool asBool() const;
    virtual void __unk_vfn_17();
    virtual void __unk_vfn_18();
    virtual void __unk_vfn_19();
    virtual void __unk_vfn_20();
    virtual void __unk_vfn_21();
    virtual void __unk_vfn_22();
    virtual void __unk_vfn_23();
    virtual void __unk_vfn_24();
    virtual float asFloat() const;
    virtual double asDouble() const;
    virtual std::string asString() const;
    virtual unsigned __int64 members() const;
    virtual unsigned __int64 length() const;
    virtual std::string pushMember(unsigned __int64);
    virtual void pushElement(unsigned __int64);
    virtual void pop();
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_NBTSCHEMAREADER
    MCVAPI short asInt16() const;
    MCVAPI int asInt32() const;
    MCVAPI __int64 asInt64() const;
    MCVAPI signed char asInt8() const;
    MCVAPI unsigned short asUInt16() const;
    MCVAPI unsigned int asUInt32() const;
    MCVAPI unsigned __int64 asUInt64() const;
    MCVAPI unsigned char asUInt8() const;
    MCVAPI bool isBool() const;
    MCVAPI bool isInt16() const;
    MCVAPI bool isInt32() const;
    MCVAPI bool isInt64() const;
    MCVAPI bool isInt8() const;
    MCVAPI bool isUInt16() const;
    MCVAPI bool isUInt32() const;
    MCVAPI bool isUInt64() const;
    MCVAPI bool isUInt8() const;
#endif
    MCAPI NBTSchemaReader(class gsl::not_null<class CompoundTag const *>);

};