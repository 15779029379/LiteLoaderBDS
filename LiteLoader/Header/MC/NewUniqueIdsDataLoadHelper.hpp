/**
 * @file  NewUniqueIdsDataLoadHelper.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "InternalComponentRegistry.hpp"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

/**
 * @brief MC class NewUniqueIdsDataLoadHelper.
 *
 */
class NewUniqueIdsDataLoadHelper {

#define AFTER_EXTRA

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_NEWUNIQUEIDSDATALOADHELPER
public:
    class NewUniqueIdsDataLoadHelper& operator=(class NewUniqueIdsDataLoadHelper const &) = delete;
    NewUniqueIdsDataLoadHelper(class NewUniqueIdsDataLoadHelper const &) = delete;
    NewUniqueIdsDataLoadHelper() = delete;
#endif

public:
    virtual ~NewUniqueIdsDataLoadHelper();
    virtual void __unk_vfn_1();
    virtual void __unk_vfn_2();
    virtual void __unk_vfn_3();
    virtual void __unk_vfn_4();
    virtual void __unk_vfn_5();
    virtual void __unk_vfn_6();
    virtual void __unk_vfn_7();
    virtual void __unk_vfn_8();
    virtual void __unk_vfn_9();
    virtual void __unk_vfn_10();
    virtual void __unk_vfn_11();
    virtual void __unk_vfn_12();
    virtual struct ActorUniqueID loadActorUniqueID(struct ActorUniqueID);
    virtual struct ActorUniqueID loadOwnerID(struct ActorUniqueID);
    virtual struct InternalComponentRegistry::ComponentInfo const * loadActorInternalComponentInfo(class std::unordered_map<class HashedString, struct InternalComponentRegistry::ComponentInfo, struct std::hash<class HashedString>, struct std::equal_to<class HashedString>, class std::allocator<struct std::pair<class HashedString const, struct InternalComponentRegistry::ComponentInfo>>> const &, std::string const &);
    virtual enum DataLoadHelperType getType() const;
    virtual bool shouldResetTime();
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_NEWUNIQUEIDSDATALOADHELPER
    MCVAPI class BlockPos loadBlockPosition(class BlockPos const &);
    MCVAPI class BlockPos loadBlockPositionOffset(class BlockPos const &);
    MCVAPI class Vec3 loadDirection(class Vec3 const &);
    MCVAPI enum Direction::Type loadDirection(enum Direction::Type);
    MCVAPI unsigned char loadFacingID(unsigned char);
    MCVAPI enum Mirror loadMirror(enum Mirror);
    MCVAPI class Vec3 loadPosition(class Vec3 const &);
    MCVAPI enum Rotation loadRotation(enum Rotation);
    MCVAPI float loadRotationDegreesX(float);
    MCVAPI float loadRotationDegreesY(float);
    MCVAPI float loadRotationRadiansX(float);
    MCVAPI float loadRotationRadiansY(float);
#endif
    MCAPI NewUniqueIdsDataLoadHelper(class ILevel &);

};