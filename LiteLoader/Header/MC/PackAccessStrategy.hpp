// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Core.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class PackAccessStrategy {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_PACKACCESSSTRATEGY
public:
    class PackAccessStrategy& operator=(class PackAccessStrategy const&) = delete;
    PackAccessStrategy(class PackAccessStrategy const&) = delete;
#endif

public:
    /*0*/ virtual ~PackAccessStrategy();
    /*1*/ virtual void __unk_vfn_0() = 0;
    /*2*/ virtual void __unk_vfn_1() = 0;
    /*3*/ virtual void __unk_vfn_2() = 0;
    /*4*/ virtual void __unk_vfn_3() = 0;
    /*5*/ virtual void __unk_vfn_4() = 0;
    /*6*/ virtual void __unk_vfn_5() = 0;
    /*7*/ virtual void __unk_vfn_6() = 0;
    /*8*/ virtual void __unk_vfn_7() = 0;
    /*9*/ virtual void __unk_vfn_8() = 0;
    /*10*/ virtual void __unk_vfn_9() = 0;
    /*11*/ virtual void __unk_vfn_10() = 0;
    /*12*/ virtual void __unk_vfn_11() = 0;
    /*13*/ virtual void forEachInAssetSet(class Core::Path const&, class std::function<void (class Core::Path const& )>) const;
    /*14*/ virtual void __unk_vfn_12() = 0;
    /*15*/ virtual class Core::PathBuffer<std::string > const& getSubPath() const;
    /*16*/ virtual void __unk_vfn_13() = 0;
    /*17*/ virtual enum PackAccessAssetGenerationResult generateAssetSet();
    /*18*/ virtual bool canRecurse() const;
    /*19*/ virtual void __unk_vfn_14() = 0;
    /*20*/ virtual bool hasUpgradeFiles() const;
    /*21*/ virtual class ContentIdentity readContentIdentity() const;
    /*
    inline  ~PackAccessStrategy(){
         (PackAccessStrategy::*rv)();
        *((void**)&rv) = dlsym("??1PackAccessStrategy@@UEAA@XZ");
        return (this->*rv)();
    }
    */
    MCAPI PackAccessStrategy();
    MCAPI bool hasGeneratedAssetSet() const;
    MCAPI static class Core::PathBuffer<std::string > const PACK_IMPORT_LOCK_FILE;

protected:
    MCAPI void _addToAssetSet(class Core::Path const&);
    MCAPI void _deleteFromAssetSet(class Core::PathBuffer<std::string > const&);
    MCAPI bool _isInAssetSet(class Core::Path const&) const;

private:

};