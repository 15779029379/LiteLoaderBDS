/**
 * @file  PackSourceFactory.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Core.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class PackSourceFactory.
 *
 */
class PackSourceFactory {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_PACKSOURCEFACTORY
public:
    class PackSourceFactory& operator=(class PackSourceFactory const &) = delete;
    PackSourceFactory(class PackSourceFactory const &) = delete;
    PackSourceFactory() = delete;
#endif

public:
    virtual ~PackSourceFactory();
    virtual class WorldTemplatePackSource & createWorldTemplatePackSource(class WorldTemplateManager const &, class mce::UUID const &, enum PackType, enum PackOrigin);
    virtual class WorldTemplatePackSource * getWorldTemplatePackSource(class mce::UUID const &, enum PackType) const;
    virtual class DirectoryPackSource & createDirectoryPackSource(class Core::Path const &, enum PackType, enum PackOrigin, bool);
    virtual class DirectoryPackSource * getDirectoryPackSource(class Core::Path const &, enum PackType) const;
    virtual class InPackagePackSource & createInPackagePackSource(enum PackType);
    virtual class InPackagePackSource * getInPackagePackSource(enum PackType);
    virtual class WorldHistoryPackSource & createWorldHistoryPackSource(class Core::Path const &, enum PackType);
    virtual class WorldHistoryPackSource * getWorldHistoryPackSource(class Core::Path const &, enum PackType) const;
    virtual class DirectoryPackSource * getDirectoryPackSourceContaining(struct PackIdVersion const &) const;
    virtual void removeFromDirectoryPackSource(class Core::Path const &);
    virtual class InPackagePackSource & createDynamicPackagePackSource(enum PackType);
    virtual class InPackagePackSource * getDynamicPackagePackSource(enum PackType);
    virtual void setDynamicPackagePacks(class std::shared_ptr<class IDynamicPackagePacks> const &);
    virtual void setDynamicPackageRoot(class Core::PathBuffer<std::string>);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_PACKSOURCEFACTORY
#endif
    MCAPI PackSourceFactory(class std::shared_ptr<class IInPackagePacks> const &);

};