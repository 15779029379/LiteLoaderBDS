/**
 * @file  PathNavigation.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class PathNavigation.
 *
 */
class PathNavigation {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_PATHNAVIGATION
public:
    class PathNavigation& operator=(class PathNavigation const &) = delete;
    PathNavigation(class PathNavigation const &) = delete;
    PathNavigation() = delete;
#endif

public:
    virtual ~PathNavigation();
    virtual void initializeInternal(class Mob &, struct NavigationDescription *);
    virtual void tick(class NavigationComponent &, class Mob &);
    virtual class Vec3 getTempMobPos(class Mob const &) const;
    virtual std::unique_ptr<class Path> createPath(class NavigationComponent &, class Mob &, class Vec3 const &);
    virtual std::unique_ptr<class Path> createPath(class NavigationComponent &, class Mob &, class Actor &);
    virtual bool moveTo(class NavigationComponent &, class Mob &, class Vec3 const &, float);
    virtual bool moveTo(class NavigationComponent &, class Mob &, class Actor &, float);
    virtual bool moveTo(class NavigationComponent &, class Mob &, std::unique_ptr<class Path>, float);
    virtual void stop(class NavigationComponent &, class Mob &);
    virtual bool travel(class NavigationComponent &, class Mob &, float &, float &, float &);
    virtual bool canUpdatePath(class Mob const &) const;
    virtual void updatePath(class NavigationComponent &, class Mob &);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_PATHNAVIGATION
#endif

//protected:
    MCAPI float _getHighestBlockHeight(class BlockSource &, class Mob &, class Vec3 const &, class Vec2 const &) const;
    MCAPI bool _isPositionOnlyInAir(class BlockSource const &, class Vec3 const &, class Vec2 const &) const;
    MCAPI enum NodeType isFree(class NavigationComponent &, class Mob &, class BlockPos const &, class BlockPos const &, class BlockPos const &, enum CanJumpIntoNode);

protected:

};