// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#define EXTRA_INCLUDE_PART
#include "Extra/PathNavigationAPI.hpp"
#undef EXTRA_INCLUDE_PART
class PathNavigation {
#include "Extra/PathNavigationAPI.hpp"
public:
    virtual ~PathNavigation();
    virtual void initializeInternal(class Mob&, struct NavigationDescription*);
    virtual void tick(class NavigationComponent&, class Mob&);
    virtual class Vec3 getTempMobPos(class Mob const&);
    virtual std::unique_ptr<class Path> createPath(class NavigationComponent&, class Mob&, class Actor&);
    virtual std::unique_ptr<class Path> createPath(class NavigationComponent&, class Mob&, class Vec3 const&);
    virtual bool moveTo(class NavigationComponent&, class Mob&, std::unique_ptr<class Path>, float);
    virtual bool moveTo(class NavigationComponent&, class Mob&, class Actor&, float);
    virtual bool moveTo(class NavigationComponent&, class Mob&, class Vec3 const&, float);
    virtual void stop(class NavigationComponent&, class Mob&);
    virtual bool travel(class NavigationComponent&, class Mob&, float&, float&, float&);
    virtual bool canUpdatePath(class Mob const&);
    virtual void updatePath(class NavigationComponent&, class Mob&);


protected:
    MCAPI float _getHighestBlockHeight(class BlockSource&, class Mob&, class Vec3 const&, class Vec2 const&) const;
    MCAPI bool _isPositionOnlyInAir(class BlockSource const&, class Vec3 const&, class Vec2 const&) const;
    MCAPI enum NodeType isFree(class NavigationComponent&, class Mob&, class BlockPos const&, class BlockPos const&, class BlockPos const&, enum CanJumpIntoNode);
};