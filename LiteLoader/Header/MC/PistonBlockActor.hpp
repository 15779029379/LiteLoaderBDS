// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#include "BlockActor.hpp"
#define EXTRA_INCLUDE_PART_PISTONBLOCKACTOR
#include "Extra/PistonBlockActorAPI.hpp"
#undef EXTRA_INCLUDE_PART_PISTONBLOCKACTOR
class PistonBlockActor : public BlockActor {
#include "Extra/PistonBlockActorAPI.hpp"
public:
    virtual ~PistonBlockActor();
    virtual void load(class Level&, class CompoundTag const&, class DataLoadHelper&);
    virtual bool save(class CompoundTag&);
    virtual void saveBlockData(class CompoundTag&, class BlockSource&);
    virtual void loadBlockData(class CompoundTag const&, class BlockSource&, class DataLoadHelper&);
    virtual void onCustomTagLoadDone(class BlockSource&);
    virtual void tick(class BlockSource&);
    virtual void onChanged(class BlockSource&);
    virtual void onPlace(class BlockSource&);
    virtual void unk_vfn_12();
    virtual void onRemoved(class BlockSource&);
    virtual void triggerEvent(int, int);
    virtual void unk_vfn_15();
    virtual void unk_vfn_16();
    virtual void unk_vfn_17();
    virtual void unk_vfn_18();
    virtual class BlockActor* getCrackEntity(class BlockSource&, class BlockPos const&);
    virtual void unk_vfn_21();
    virtual std::string getName();
    virtual std::string getImmersiveReaderText(class BlockSource&);
    virtual void unk_vfn_26();
    virtual class PistonBlockActor* getOwningPiston(class BlockSource&);
    virtual void unk_vfn_28();
    virtual void unk_vfn_29();
    virtual void unk_vfn_30();
    virtual void unk_vfn_31();
    virtual void unk_vfn_32();
    virtual void unk_vfn_33();
    virtual std::unique_ptr<class BlockActorDataPacket> _getUpdatePacket(class BlockSource&);
    virtual void _onUpdatePacket(class CompoundTag const&, class BlockSource&);
    virtual bool _playerCanUpdate(class Player const&);

public:
    MCAPI PistonBlockActor(class BlockPos const&, bool);
    MCAPI std::vector<class BlockPos> const& getAttachedBlocks() const;
    MCAPI class Block const* getCorrectArmBlock() const;
    MCAPI class BlockPos const& getFacingDir(class BlockSource const&) const;
    MCAPI float getProgress(float) const;
    MCAPI bool isExpanded() const;
    MCAPI bool isExpanding() const;
    MCAPI bool isMoving() const;
    MCAPI bool isRetracted() const;
    MCAPI bool isRetracting() const;
    MCAPI void setShouldVerifyArmType(bool);


private:
    MCAPI bool _attachedBlockWalker(class BlockSource&, class BlockPos const&, unsigned char, unsigned char);
    MCAPI bool _checkAttachedBlocks(class BlockSource&);
    MCAPI void _checkInceptionAchievement(class BlockActor&, class BlockSource&, class BlockPos const&);
    MCAPI bool _handleSlimeConnections(class BlockSource&, class BlockPos const&, unsigned char, unsigned char);
    MCAPI bool _hasBlockAttached(class BlockPos const&);
    MCAPI void _moveCollidedEntities(class BlockSource&);
    MCAPI void _moveCollidedEntitiesHelper(class BlockSource&, class AABB const&, class BlockPos const&, class Actor*, unsigned int);
    MCAPI void _sortAttachedBlocks(class BlockSource&);
    MCAPI void _spawnBlocks(class BlockSource&);
    MCAPI void _spawnMovingBlocks(class BlockSource&);

    MCAPI static float const ARM_ANIMATION_SPEED;
};