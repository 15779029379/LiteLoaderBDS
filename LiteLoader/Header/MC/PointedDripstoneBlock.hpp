/**
 * @file  PointedDripstoneBlock.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "HeavyBlock.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class PointedDripstoneBlock.
 *
 */
class PointedDripstoneBlock : public HeavyBlock {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_POINTEDDRIPSTONEBLOCK
public:
    class PointedDripstoneBlock& operator=(class PointedDripstoneBlock const &) = delete;
    PointedDripstoneBlock(class PointedDripstoneBlock const &) = delete;
    PointedDripstoneBlock() = delete;
#endif

public:
    virtual ~PointedDripstoneBlock();
    virtual class Vec3 randomlyModifyPosition(class BlockPos const &) const;
    virtual class AABB const & getAABB(class IConstBlockSource const &, class BlockPos const &, class Block const &, class AABB &, bool) const;
    virtual void onProjectileHit(class BlockSource &, class BlockPos const &, class Actor const &) const;
    virtual void __unk_vfn_19();
    virtual void __unk_vfn_29();
    virtual void __unk_vfn_30();
    virtual void __unk_vfn_32();
    virtual void __unk_vfn_33();
    virtual void __unk_vfn_34();
    virtual void __unk_vfn_36();
    virtual void __unk_vfn_37();
    virtual void __unk_vfn_38();
    virtual void __unk_vfn_39();
    virtual void __unk_vfn_40();
    virtual void __unk_vfn_41();
    virtual void __unk_vfn_42();
    virtual void __unk_vfn_44();
    virtual void __unk_vfn_45();
    virtual void __unk_vfn_46();
    virtual void __unk_vfn_47();
    virtual void __unk_vfn_48();
    virtual void __unk_vfn_49();
    virtual void __unk_vfn_59();
    virtual void __unk_vfn_60();
    virtual void __unk_vfn_73();
    virtual void __unk_vfn_80();
    virtual bool mayPlace(class BlockSource &, class BlockPos const &) const;
    virtual void neighborChanged(class BlockSource &, class BlockPos const &, class BlockPos const &) const;
    virtual class ItemInstance getResourceItem(class Randomize &, class Block const &, int) const;
    virtual class ItemInstance asItemInstance(class BlockSource &, class BlockPos const &, class Block const &) const;
    virtual void __unk_vfn_105();
    virtual class Block const & getPlacementBlock(class Actor &, class BlockPos const &, unsigned char, class Vec3 const &, int) const;
    virtual void __unk_vfn_124();
    virtual void __unk_vfn_126();
    virtual void __unk_vfn_127();
    virtual void __unk_vfn_132();
    virtual class AABB const & getVisualShape(class Block const &, class AABB &, bool) const;
    virtual int getVariant(class Block const &) const;
    virtual void __unk_vfn_148();
    virtual void animateTick(class BlockSource &, class BlockPos const &, class Random &) const;
    virtual class BlockLegacy & init();
    virtual void __unk_vfn_157();
    virtual class ItemInstance getSilkTouchItemInstance(class Block const &) const;
    virtual void __unk_vfn_168();
    virtual void __unk_vfn_169();
    virtual void __unk_vfn_170();
    virtual void onFallOn(class BlockSource &, class BlockPos const &, class Actor &, float) const;
    virtual void tick(class BlockSource &, class BlockPos const &, class Random &) const;
    virtual void randomTick(class BlockSource &, class BlockPos const &, class Random &) const;
    virtual void __unk_vfn_177();
    virtual bool canSurvive(class BlockSource &, class BlockPos const &) const;
    virtual void __unk_vfn_188();
    virtual class mce::Color getDustColor(class Block const &) const;
    virtual std::string getDustParticleName(class Block const &) const;
    virtual void __unk_vfn_194();
    virtual void onLand(class BlockSource &, class BlockPos const &) const;
    virtual void startFalling(class BlockSource &, class BlockPos const &, class Block const &, bool) const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_POINTEDDRIPSTONEBLOCK
    MCVAPI bool falling() const;
#endif
    MCAPI PointedDripstoneBlock(std::string const &, int);
    MCAPI static void addDripParticle(class BlockSource &, class BlockPos const &, enum ParticleType);
    MCAPI static bool canGrow(class BlockSource &, class BlockPos const &, class BlockPos const &);
    MCAPI static void fillCauldron(class BlockSource &, class BlockPos const &);
    MCAPI static class std::optional<class BlockPos> findStalactiteTipAboveCauldron(class BlockSource &, class BlockPos const &);
    MCAPI static class std::optional<enum MaterialType> getCauldronFillLiquidType(class BlockSource &, class BlockPos const &);
    MCAPI static class std::optional<class BlockPos> getStalactiteTipBelowFillSource(class BlockSource &, class BlockPos const &);
    MCAPI static void growStalactite(class BlockSource &, class BlockPos const &);
    MCAPI static void growStalagmite(class BlockSource &, class BlockPos const &);

//private:
    MCAPI void _updateBlockThickness(class BlockSource &, class BlockPos const &) const;
    MCAPI static enum DripstoneThickness _calculateDripstoneThickness(class BlockSource &, class BlockPos const &, unsigned char, bool);
    MCAPI static bool _canDrip(class BlockSource &, class BlockPos const &);
    MCAPI static bool _canFillCauldron(class Block const &);
    MCAPI static bool _canTipGrow(class BlockSource &, class BlockPos const &);
    MCAPI static void _createDripstone(class BlockSource &, class BlockPos const &, unsigned char, enum DripstoneThickness);
    MCAPI static void _createMergedTips(class BlockSource &, class Block const &, class BlockPos const &);
    MCAPI static class std::optional<class BlockPos> _findBlockVertically(class BlockSource &, class BlockPos const &, unsigned char, class std::function<bool (class BlockSource &, class BlockPos const &)>, class std::function<bool (class BlockSource &, class BlockPos const &)>, int);
    MCAPI static class std::optional<class BlockPos> _findRootBlock(class BlockSource &, class BlockPos const &, int);
    MCAPI static class std::optional<class BlockPos> _findTip(class BlockSource &, class BlockPos const &, unsigned char, int, bool);
    MCAPI static class std::optional<class BlockPos> _getBlockAboveStalactiteRoot(class BlockSource &, class BlockPos const &);
    MCAPI static class Vec3 _getRandomBlockPositionOffset(class BlockPos const &);
    MCAPI static void _grow(class BlockSource &, class BlockPos const &, unsigned char);
    MCAPI static void _growStalagmiteBelow(class BlockSource &, class BlockPos const &);
    MCAPI static bool _isStalactiteBase(class BlockSource &, class BlockPos const &);
    MCAPI static bool _isTip(class Block const &, unsigned char, bool);
    MCAPI static bool _isValidPointedDripstonePlacement(class BlockSource &, class BlockPos const &, bool);
    MCAPI static bool _mayPlaceHanging(class BlockSource &, class BlockPos const &);
    MCAPI static bool _mayPlaceStanding(class BlockSource &, class BlockPos const &);

private:

};