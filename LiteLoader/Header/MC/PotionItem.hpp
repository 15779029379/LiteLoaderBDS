// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"
#include "Potion.hpp"
#include "Item.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class PotionItem : public Item {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_POTIONITEM
public:
    class PotionItem& operator=(class PotionItem const&) = delete;
    PotionItem(class PotionItem const&) = delete;
    PotionItem() = delete;
#endif

public:
    /*0*/ virtual ~PotionItem();
    /*4*/ virtual void __unk_vfn_4();
    /*5*/ virtual void __unk_vfn_5();
    /*7*/ virtual void __unk_vfn_7();
    /*10*/ virtual void __unk_vfn_10();
    /*12*/ virtual void __unk_vfn_12();
    /*24*/ virtual class FuelItemComponent* getFuel() const;
    /*46*/ virtual bool isGlint(class ItemStackBase const&) const;
    /*47*/ virtual void __unk_vfn_47();
    /*48*/ virtual void __unk_vfn_48();
    /*49*/ virtual void __unk_vfn_49();
    /*52*/ virtual bool isDestructive(int) const;
    /*56*/ virtual void appendFormattedHovertext(class ItemStackBase const&, class Level&, std::string&, bool) const;
    /*61*/ virtual void __unk_vfn_61();
    /*62*/ virtual bool isValidAuxValue(int) const;
    /*64*/ virtual void __unk_vfn_64();
    /*65*/ virtual void __unk_vfn_65();
    /*66*/ virtual void __unk_vfn_66();
    /*67*/ virtual void __unk_vfn_67();
    /*70*/ virtual void __unk_vfn_70();
    /*72*/ virtual void __unk_vfn_72();
    /*73*/ virtual void __unk_vfn_73();
    /*74*/ virtual void __unk_vfn_74();
    /*75*/ virtual void __unk_vfn_75();
    /*77*/ virtual void __unk_vfn_77();
    /*78*/ virtual void __unk_vfn_78();
    /*81*/ virtual class ItemStack& use(class ItemStack&, class Player&) const;
    /*83*/ virtual enum ItemUseMethod useTimeDepleted(class ItemStack&, class Level*, class Player*) const;
    /*92*/ virtual std::string buildDescriptionId(class ItemDescriptor const&, class CompoundTag const*) const;
    /*93*/ virtual std::string buildEffectDescriptionName(class ItemStackBase const&) const;
    /*115*/ virtual struct TextureUVCoordinateSet const& getIcon(class ItemStackBase const&, int, bool) const;
    /*117*/ virtual class Item& setIcon(std::string const&, int);
    /*122*/ virtual void __unk_vfn_122();
    /*127*/ virtual bool _calculatePlacePos(class ItemStackBase&, class Actor&, unsigned char&, class BlockPos&) const;
    /*
    inline enum Potion::PotionType getPotionType() const{
        enum Potion::PotionType (PotionItem::*rv)() const;
        *((void**)&rv) = dlsym("?getPotionType@PotionItem@@UEBA?AW4PotionType@Potion@@XZ");
        return (this->*rv)();
    }
    inline bool uniqueAuxValues() const{
        bool (PotionItem::*rv)() const;
        *((void**)&rv) = dlsym("?uniqueAuxValues@PotionItem@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline  ~PotionItem(){
         (PotionItem::*rv)();
        *((void**)&rv) = dlsym("??1PotionItem@@UEAA@XZ");
        return (this->*rv)();
    }
    */
    MCAPI PotionItem(std::string const&, int);
    MCAPI static void applyEffect(class ThrownPotion*, class ItemStack const&);
    MCAPI static bool isDestructivePotion(enum Potion::PotionVariant);

protected:

private:

};