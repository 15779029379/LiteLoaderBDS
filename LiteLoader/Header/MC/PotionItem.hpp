/**
 * @file  PotionItem.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"
#include "Potion.hpp"
#include "Item.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class PotionItem.
 *
 */
class PotionItem : public Item {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_POTIONITEM
public:
    class PotionItem& operator=(class PotionItem const &) = delete;
    PotionItem(class PotionItem const &) = delete;
    PotionItem() = delete;
#endif

public:
    virtual ~PotionItem();
    virtual void __unk_vfn_7();
    virtual void __unk_vfn_11();
    virtual void __unk_vfn_14();
    virtual void __unk_vfn_16();
    virtual bool isGlint(class ItemStackBase const &) const;
    virtual void __unk_vfn_52();
    virtual void __unk_vfn_54();
    virtual bool isDestructive(int) const;
    virtual void appendFormattedHovertext(class ItemStackBase const &, class Level &, std::string &, bool) const;
    virtual void __unk_vfn_67();
    virtual bool isValidAuxValue(int) const;
    virtual void __unk_vfn_71();
    virtual void __unk_vfn_72();
    virtual void __unk_vfn_73();
    virtual void __unk_vfn_76();
    virtual void __unk_vfn_80();
    virtual void __unk_vfn_81();
    virtual class ItemStack & use(class ItemStack &, class Player &) const;
    virtual bool dispense(class BlockSource &, class Container &, int, class Vec3 const &, unsigned char) const;
    virtual enum ItemUseMethod useTimeDepleted(class ItemStack &, class Level *, class Player *) const;
    virtual std::string buildDescriptionId(class ItemDescriptor const &, class CompoundTag const *) const;
    virtual std::string buildEffectDescriptionName(class ItemStackBase const &) const;
    virtual struct TextureUVCoordinateSet const & getIcon(class ItemStackBase const &, int, bool) const;
    virtual class Item & setIcon(std::string const &, int);
    virtual bool _useOn(class ItemStack &, class Actor &, class BlockPos, unsigned char, class Vec3 const &) const;
    virtual enum Potion::PotionType getPotionType() const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_POTIONITEM
    MCVAPI bool uniqueAuxValues() const;
#endif
    MCAPI PotionItem(std::string const &, int);
    MCAPI static void applyEffect(class ThrownPotion *, class ItemStack const &);
    MCAPI static bool isDestructivePotion(enum Potion::PotionVariant);

};