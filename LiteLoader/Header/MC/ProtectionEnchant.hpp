/**
 * @file  ProtectionEnchant.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Enchant.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class ProtectionEnchant.
 *
 */
class ProtectionEnchant : public Enchant {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_PROTECTIONENCHANT
public:
    class ProtectionEnchant& operator=(class ProtectionEnchant const &) = delete;
    ProtectionEnchant(class ProtectionEnchant const &) = delete;
    ProtectionEnchant() = delete;
#endif

public:
    virtual ~ProtectionEnchant();
    virtual int getMinCost(int) const;
    virtual int getMaxCost(int) const;
    virtual int getMaxLevel() const;
    virtual int getDamageProtection(int, class ActorDamageSource const &) const;
    virtual void doPostHurt(class ItemInstance &, class Actor &, class Actor &, int) const;
    virtual void __unk_vfn_10();
    virtual void __unk_vfn_11();
    virtual void __unk_vfn_12();
    virtual void __unk_vfn_13();
    virtual bool _isValidEnchantmentTypeForCategory(enum Enchant::Type) const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_PROTECTIONENCHANT
    MCVAPI bool isProtectionEnchant() const;
#endif
    MCAPI ProtectionEnchant(enum Enchant::Type, enum Enchant::Frequency, class gsl::basic_string_span<char const, -1>, class gsl::basic_string_span<char const, -1>, int, int);

//private:

private:
MCAPI static float const THORNS_CHANCE_PER_LEVEL;
MCAPI static std::vector<enum Enchant::Type> const VALID_ENCHANTMENTS;

};