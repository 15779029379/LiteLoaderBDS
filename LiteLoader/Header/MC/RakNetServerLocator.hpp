/**
 * @file  RakNetServerLocator.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "RakNet.hpp"
#include "RakPeerHelper.hpp"
#include "Bedrock.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class RakNetServerLocator.
 *
 */
class RakNetServerLocator {

#define AFTER_EXTRA
// Add Member There
public:
struct AnnounceServerData {
    AnnounceServerData() = delete;
    AnnounceServerData(AnnounceServerData const&) = delete;
    AnnounceServerData(AnnounceServerData const&&) = delete;
};

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_RAKNETSERVERLOCATOR
public:
    class RakNetServerLocator& operator=(class RakNetServerLocator const &) = delete;
    RakNetServerLocator(class RakNetServerLocator const &) = delete;
    RakNetServerLocator() = delete;
#endif

public:
    virtual ~RakNetServerLocator();
    virtual void _onDisable();
    virtual void _onEnable();
    virtual void startAnnouncingServer(std::string const &, std::string const &, enum GameType, int, int, bool, bool);
    virtual void stopAnnouncingServer();
    virtual void startServerDiscovery(struct PortPair);
    virtual void stopServerDiscovery();
    virtual void addCustomServer(class AsynchronousIPResolver const &, int);
    virtual void addCustomServer(std::string const &, int);
    virtual std::vector<struct PingedCompatibleServer> getServerList() const;
    virtual void clearServerList();
    virtual void update();
    virtual bool isIPv4Supported() const;
    virtual bool isIPv6Supported() const;
    virtual void setGetHostGUIDFn(class std::function<struct RakNet::RakNetGUID (void)> const &);
    virtual float getPingTimeForGUID(std::string const &);
    virtual void checkCanConnectToCustomServerAsync(std::string, int, class std::function<void (bool)>);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_RAKNETSERVERLOCATOR
#endif
    MCAPI RakNetServerLocator(class RakNetInstance &, class RakPeerHelper::IPSupportInterface &, std::vector<std::string>, bool, enum PermissionLAN, enum PermissionIPv6, class Bedrock::NonOwnerPointer<class AppPlatform> const &, class std::function<class std::unique_ptr<class RakNet::RakPeerInterface, void ( *)(class RakNet::RakPeerInterface *)> (void)>);
    MCAPI static bool parseUnconnectedPongPacketData(std::string const &, std::vector<std::string> &);

//private:
    MCAPI void _activate();
    MCAPI void _addCustomServerFromIpResolver(class AsynchronousIPResolver const &, int);
    MCAPI bool _addCustomServerV4(class AsynchronousIPResolver const &, int);
    MCAPI bool _addCustomServerV6(class AsynchronousIPResolver const &, int);
    MCAPI void _announceServer(struct RakNetServerLocator::AnnounceServerData const &);
    MCAPI void _enqueueStateChangeRequest(enum LocatorStateChangeRequest, struct RakNetServerLocator::AnnounceServerData, struct PortPair);
    MCAPI std::string _getHostGuid(std::string const &, int);
    MCAPI void _getServerOriginalAddress(std::string &, std::string const &);
    MCAPI bool _handleUnconnectedPong(std::string const &, struct RakNet::Packet const *, bool, unsigned __int64);
    MCAPI void _initializeBroadcastAddresses();
    MCAPI bool _onPongReceive(float &, struct RakNet::RakNetGUID const &, unsigned int const &, int);
    MCAPI bool _pingServerV4(std::string const &, int);
    MCAPI bool _pingServerV6(std::string const &, int);
    MCAPI void _punchHoles();
    MCAPI void _startAnnouncingServer(struct RakNetServerLocator::AnnounceServerData const &);
    MCAPI void _startServerDiscovery(struct PortPair const &);
    MCAPI void _stopAnnouncingServer();
    MCAPI void _stopServerDiscovery();
    MCAPI void _updateNetwork();
    MCAPI bool _updateQueuedPings();

private:

};