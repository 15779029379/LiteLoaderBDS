// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#define EXTRA_INCLUDE_PART
#include "Extra/RecipesAPI.hpp"
#undef EXTRA_INCLUDE_PART
class Recipes {
#include "Extra/RecipesAPI.hpp"

public:
    MCAPI void clearRecipes();
    MCAPI struct std::pair<std::string, class Json::Value> extractRecipeObjInfo(class Json::Value const&);
    MCAPI class ItemInstance getFurnaceRecipeResult(class ItemStackBase const&, class HashedString const&) const;
    MCAPI class Recipe const* getRecipeByNetId(class TypedServerNetId<struct RecipeNetIdTag, unsigned int, 0> const&) const;
    MCAPI class Recipe* getRecipeFor(class ItemInstance const&, class HashedString const&) const;
    MCAPI void init(class ResourcePackManager&, class ExternalRecipeStore&);
    MCAPI bool loadRecipe(struct std::pair<std::string, class Json::Value> const&, class SemVersion const&);

    MCAPI static int const RECIPE_MAXIMUM_HEIGHT;
    MCAPI static int const RECIPE_MAXIMUM_WIDTH;

private:
    MCAPI void _addItemRecipe(std::unique_ptr<class Recipe>);
    MCAPI void _addMapRecipes();
    MCAPI bool _isRecipeValidToAdd(class Recipe const&);
    MCAPI class ItemInstance _itemInstanceFromIngredient(class RecipeIngredient const&) const;
    MCAPI bool _loadBrewingMix(class Json::Value const&, class SemVersion const&);
    MCAPI void _loadHardcodedRecipes();
    MCAPI class RecipeIngredient const _loadIngredientFromJson(class Json::Value const&, class SemVersion const&) const;

protected:
    MCAPI void _loadDataDrivenRecipes(std::vector<class PackInstance>);
};