/**
 * @file  RedstoneTorchCapacitor.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "ProducerComponent.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class RedstoneTorchCapacitor.
 *
 */
class RedstoneTorchCapacitor : public ProducerComponent {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_REDSTONETORCHCAPACITOR
public:
    class RedstoneTorchCapacitor& operator=(class RedstoneTorchCapacitor const &) = delete;
    RedstoneTorchCapacitor(class RedstoneTorchCapacitor const &) = delete;
#endif

public:
    virtual ~RedstoneTorchCapacitor();
    virtual int getStrength() const;
    virtual bool removeSource(class BlockPos const &, class BaseCircuitComponent const *);
    virtual bool addSource(class CircuitSceneGraph &, class CircuitTrackingInfo const &, int &, bool &);
    virtual bool allowConnection(class CircuitSceneGraph &, class CircuitTrackingInfo const &, bool &);
    virtual bool evaluate(class CircuitSystem &, class BlockPos const &);
    virtual void cacheValues(class CircuitSystem &, class BlockPos const &);
    virtual void updateDependencies(class CircuitSceneGraph &, class BlockPos const &);
    virtual void __unk_vfn_17();
    virtual bool isHalfPulse() const;
    virtual void __unk_vfn_20();
    virtual enum CircuitComponentType getCircuitComponentType() const;
    virtual unsigned char getPoweroutDirection() const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_REDSTONETORCHCAPACITOR
#endif
    MCAPI RedstoneTorchCapacitor();
    MCAPI void resetBurnOutCount();
    MCAPI void setOn(bool);

//private:
    MCAPI int FindStrongestStrength(class BlockPos const &, class CircuitSystem &, bool &);

private:

};