// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "ProducerComponent.hpp"
#define EXTRA_INCLUDE_PART_REDSTONETORCHCAPACITOR
#include "Extra/RedstoneTorchCapacitorAPI.hpp"
#undef EXTRA_INCLUDE_PART_REDSTONETORCHCAPACITOR
class RedstoneTorchCapacitor : public ProducerComponent {
#include "Extra/RedstoneTorchCapacitorAPI.hpp"
public:
    /*0*/ virtual ~RedstoneTorchCapacitor();
    /*1*/ virtual int getStrength() const;
    /*2*/ virtual int getDirection() const;
    /*3*/ virtual void setDirection(unsigned char);
    /*4*/ virtual void __unk_vfn_0();
    /*5*/ virtual bool removeSource(class BlockPos const&, class BaseCircuitComponent const*);
    /*6*/ virtual bool addSource(class CircuitSceneGraph&, class CircuitTrackingInfo const&, int&, bool&);
    /*7*/ virtual bool allowConnection(class CircuitSceneGraph&, class CircuitTrackingInfo const&, bool&);
    /*8*/ virtual void checkLock(class CircuitSystem&, class BlockPos const&);
    /*9*/ virtual bool evaluate(class CircuitSystem&, class BlockPos const&);
    /*10*/ virtual void cacheValues(class CircuitSystem&, class BlockPos const&);
    /*11*/ virtual void updateDependencies(class CircuitSceneGraph&, class BlockPos const&);
    /*12*/ virtual void __unk_vfn_1();
    /*13*/ virtual bool isHalfPulse() const;
    /*14*/ virtual void __unk_vfn_2();
    /*15*/ virtual bool isSecondaryPowered() const;
    /*16*/ virtual int /*enum enum CircuitComponentType*/ getCircuitComponentType() const;
    /*
    inline unsigned char getPoweroutDirection() const{
        unsigned char (RedstoneTorchCapacitor::*rv)() const;
        *((void**)&rv) = dlsym("?getPoweroutDirection@RedstoneTorchCapacitor@@UEBAEXZ");
        return (this->*rv)();
    }
    */
    MCAPI void resetBurnOutCount();
    MCAPI void setOn(bool);

protected:

private:
    MCAPI int FindStrongestStrength(class BlockPos const&, class CircuitSystem&, bool&);
};