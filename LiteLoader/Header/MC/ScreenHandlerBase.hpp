// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"


#define BEFORE_EXTRA //DO NOT EDIT THIS LINE
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA //DO NOT EDIT THIS LINE

class ScreenHandlerBase {

#define AFTER_EXTRA //DO NOT EDIT THIS LINE
// Add Member There

#undef AFTER_EXTRA //DO NOT EDIT THIS LINE

public:
    /*0*/ virtual ~ScreenHandlerBase();
    /*1*/ virtual int /*enum enum ItemStackNetResult*/ handleAction(class ItemStackRequestAction const&);
    /*2*/ virtual int /*enum enum ItemStackNetResult*/ endRequest();

    /*
    inline void postRequest(bool a0){
        void (ScreenHandlerBase::*rv)(bool);
        *((void**)&rv) = dlsym("?postRequest@ScreenHandlerBase@@UEAAX_N@Z");
        return (this->*rv)(std::forward<bool>(a0));
    }
    inline void endRequestBatch(){
        void (ScreenHandlerBase::*rv)();
        *((void**)&rv) = dlsym("?endRequestBatch@ScreenHandlerBase@@UEAAXXZ");
        return (this->*rv)();
    }
    inline  ~ScreenHandlerBase(){
         (ScreenHandlerBase::*rv)();
        *((void**)&rv) = dlsym("??1ScreenHandlerBase@@UEAA@XZ");
        return (this->*rv)();
    }
    */

    MCAPI ScreenHandlerBase(class ItemStackRequestActionHandler&);

protected:

    MCAPI class std::shared_ptr<class SimpleSparseContainer> _tryGetSparseContainer(enum ContainerEnumName);

private:

};