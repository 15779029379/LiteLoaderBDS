// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#include "ScriptObject.hpp"
#define EXTRA_INCLUDE_PART
#include "Extra/ScriptActorAPI.hpp"
#undef EXTRA_INCLUDE_PART
class ScriptActor : public ScriptObject {
#include "Extra/ScriptActorAPI.hpp"
public:
    virtual ~ScriptActor();
    virtual class Scripting::Result<std::string> getNameTag();
    virtual class Scripting::Result<void> setNameTag(std::string const&);
    virtual class Scripting::Result<bool> getSneaking();
    virtual class Scripting::Result<void> setSneaking(bool);

public:
    MCAPI class Scripting::Result<void> addEffect(class ScriptEffectType const&, int, int);
    MCAPI class ScriptActor& operator=(class ScriptActor&&);
    MCAPI ScriptActor(class Actor const&, class Scripting::WeakLifetimeScope const&);
    MCAPI ScriptActor(class ScriptActor&&);
    MCAPI class Scripting::Result<class Scripting::StrongTypedObjectHandle<class ScriptMobEffectInstance>> getEffect(class ScriptEffectType const&);
    MCAPI class Scripting::Result<std::string> getId() const;
    MCAPI class Scripting::Result<class Vec3> getLocation() const;
    MCAPI class Scripting::Result<class Vec3> getVelocity() const;
    MCAPI class WeakRefT<struct EntityRefTraits> getWeakEntity() const;
    MCAPI class Scripting::Result<void> kill() const;
    MCAPI class Scripting::Result<void> triggerEvent(std::string const&) const;
    MCAPI class Actor* tryGetActor() const;

    MCAPI static void destroyHandle(struct ActorUniqueID const&, class Scripting::WeakLifetimeScope const&);
    MCAPI static class Scripting::StrongTypedObjectHandle<class ScriptActor> getHandle(class WeakEntityRef const&, class Scripting::WeakLifetimeScope const&);
    MCAPI static class Scripting::StrongTypedObjectHandle<class ScriptActor> getHandle(class Actor const*, class Scripting::WeakLifetimeScope const&);

private:
    MCAPI static std::string _ensureNamespace(std::string const&);
};