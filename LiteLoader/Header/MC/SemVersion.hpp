/**
 * @file  SemVersion.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class SemVersion.
 *
 */
class SemVersion {

#define AFTER_EXTRA
// Add Member There
public:
enum MatchType : int {
    Full = 0x0,
    Partial = 0x1,
    None = 0x2,
};
enum ParseOption : int {
    AllowWildcards = 0x0,
    NoWildcards = 0x1,
};
struct any_version_constructor {
    any_version_constructor() = delete;
    any_version_constructor(any_version_constructor const&) = delete;
    any_version_constructor(any_version_constructor const&&) = delete;
};
unsigned short mMajor, mMinor, mPatch;              // 0, 2, 4
std::string mPreRelease, mBuildMeta, mFullVersionString; // 8, 40, 72
bool mValidVersion, mAnyVersion;                      // 104, 105

#undef AFTER_EXTRA
public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_SEMVERSION
#endif
    MCAPI SemVersion();
    MCAPI SemVersion(struct SemVersion::any_version_constructor);
    MCAPI SemVersion(unsigned short, unsigned short, unsigned short, std::string const &, std::string const &);
    MCAPI SemVersion(class SemVersion const &);
    MCAPI std::string const & asString() const;
    MCAPI unsigned short getMajor() const;
    MCAPI unsigned short getMinor() const;
    MCAPI unsigned short getPatch() const;
    MCAPI std::string const & getPreRelease() const;
    MCAPI bool isAnyVersion() const;
    MCAPI bool isValid() const;
    MCAPI bool operator<(class SemVersion const &) const;
    MCAPI bool operator<=(class SemVersion const &) const;
    MCAPI class SemVersion & operator=(class SemVersion const &);
    MCAPI bool operator==(class SemVersion const &) const;
    MCAPI bool operator>(class SemVersion const &) const;
    MCAPI bool operator>=(class SemVersion const &) const;
    MCAPI bool satisfies(class SemVersion const &) const;
    MCAPI ~SemVersion();
MCAPI static struct SemVersion::any_version_constructor const AnyVersionConstructor;
    MCAPI static enum SemVersion::MatchType fromJson(class Json::Value const &, class SemVersion &, enum SemVersion::ParseOption);
    MCAPI static enum SemVersion::MatchType fromJsonArray(class Json::Value const &, class SemVersion &);
    MCAPI static enum SemVersion::MatchType fromString(std::string const &, class SemVersion &, enum SemVersion::ParseOption);

//private:
    MCAPI void _parseVersionToString();

private:

};