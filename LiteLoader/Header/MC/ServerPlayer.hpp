// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"
#include "Player.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here
#include "Player.hpp"

#undef BEFORE_EXTRA

class ServerPlayer : public Player {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SERVERPLAYER
public:
    class ServerPlayer& operator=(class ServerPlayer const&) = delete;
    ServerPlayer(class ServerPlayer const&) = delete;
    ServerPlayer() = delete;
#endif

public:
    /*0*/ virtual void initializeComponents(enum Actor::InitializationMethod, class VariantParameterList const&);
    /*1*/ virtual void _serverInitItemStackIds();
    /*2*/ virtual ~ServerPlayer();
    /*3*/ virtual void __unk_vfn_0();
    /*4*/ virtual void __unk_vfn_1();
    /*5*/ virtual class Vec3 getInterpolatedRidingOffset(float) const;
    /*6*/ virtual void __unk_vfn_2();
    /*7*/ virtual void lerpMotion(class Vec3 const&);
    /*8*/ virtual void normalTick();
    /*9*/ virtual void __unk_vfn_3();
    /*10*/ virtual void __unk_vfn_4();
    /*11*/ virtual void __unk_vfn_5();
    /*12*/ virtual void __unk_vfn_6();
    /*13*/ virtual void playerTouch(class Player&);
    /*14*/ virtual void __unk_vfn_7();
    /*15*/ virtual bool isSleeping() const;
    /*16*/ virtual void __unk_vfn_8();
    /*17*/ virtual void __unk_vfn_9();
    /*18*/ virtual void __unk_vfn_10();
    /*19*/ virtual void __unk_vfn_11();
    /*20*/ virtual void __unk_vfn_12();
    /*21*/ virtual class Actor* findAttackTarget();
    /*22*/ virtual bool isValidTarget(class Actor*) const;
    /*23*/ virtual void onTame();
    /*24*/ virtual void onFailedTame();
    /*25*/ virtual void vehicleLanded(class Vec3 const&, class Vec3 const&);
    /*26*/ virtual void handleEntityEvent(enum ActorEvent, int);
    /*27*/ virtual float getPickRadius();
    /*28*/ virtual void setArmor(enum ArmorSlot, class ItemStack const&);
    /*29*/ virtual class ItemStack const& getCarriedItem() const;
    /*30*/ virtual void setOffhandSlot(class ItemStack const&);
    /*31*/ virtual bool load(class CompoundTag const&, class DataLoadHelper&);
    /*32*/ virtual class HashedString const& queryEntityRenderer() const;
    /*33*/ virtual struct ActorUniqueID getSourceUniqueID() const;
    /*34*/ virtual int getPortalCooldown() const;
    /*35*/ virtual bool canChangeDimensions() const;
    /*36*/ virtual void __unk_vfn_13();
    /*37*/ virtual void changeDimension(class AutomaticID<class Dimension, int>, bool);
    /*38*/ virtual struct ActorUniqueID getControllingPlayer() const;
    /*39*/ virtual void checkFallDamage(float, bool);
    /*40*/ virtual void handleFallDistanceOnServer(float, float, bool);
    /*41*/ virtual void __unk_vfn_14();
    /*42*/ virtual void __unk_vfn_15();
    /*43*/ virtual void __unk_vfn_16();
    /*44*/ virtual void sendMotionPacketIfNeeded();
    /*45*/ virtual void __unk_vfn_17();
    /*46*/ virtual void onEffectAdded(class MobEffectInstance&);
    /*47*/ virtual void onEffectUpdated(class MobEffectInstance&);
    /*48*/ virtual void onEffectRemoved(class MobEffectInstance&);
    /*49*/ virtual void __unk_vfn_18();
    /*50*/ virtual void __unk_vfn_19();
    /*51*/ virtual void __unk_vfn_20();
    /*52*/ virtual void __unk_vfn_21();
    /*53*/ virtual void setAuxValue(int);
    /*54*/ virtual void __unk_vfn_22();
    /*55*/ virtual void __unk_vfn_23();
    /*56*/ virtual void die(class ActorDamageSource const&);
    /*57*/ virtual void __unk_vfn_24();
    /*58*/ virtual void __unk_vfn_25();
    /*59*/ virtual void __unk_vfn_26();
    /*60*/ virtual void knockback(class Actor*, int, float, float, float, float, float);
    /*61*/ virtual void spawnAnim();
    /*62*/ virtual void aiStep();
    /*63*/ virtual void __unk_vfn_27();
    /*64*/ virtual void __unk_vfn_28();
    /*65*/ virtual void __unk_vfn_29();
    /*66*/ virtual void hurtArmorSlots(class ActorDamageSource const&, int, class std::bitset<4> const&);
    /*67*/ virtual void setDamagedArmor(enum ArmorSlot, class ItemStack const&);
    /*68*/ virtual void sendArmorDamage(class std::bitset<4> const&);
    /*69*/ virtual void sendArmor(class std::bitset<4> const&);
    /*70*/ virtual void clearVanishEnchantedItemsOnDeath();
    /*71*/ virtual void sendInventory(bool);
    /*72*/ virtual void onBorn(class Actor&, class Actor&);
    /*73*/ virtual int getAttackTime();
    /*74*/ virtual float _getWalkTargetValue(class BlockPos const&);
    /*75*/ virtual void __unk_vfn_30();
    /*76*/ virtual void __unk_vfn_31();
    /*77*/ virtual void updateAi();
    /*78*/ virtual void _serverAiMobStep();
    /*79*/ virtual void __unk_vfn_32();
    /*80*/ virtual void prepareRegion(class ChunkSource&);
    /*81*/ virtual void destroyRegion();
    /*82*/ virtual void suspendRegion();
    /*83*/ virtual void resendAllChunks();
    /*84*/ virtual void changeDimensionWithCredits(class AutomaticID<class Dimension, int>);
    /*85*/ virtual void tickWorld(struct Tick const&);
    /*86*/ virtual void __unk_vfn_33();
    /*87*/ virtual void checkMovementStats(class Vec3 const&);
    /*88*/ virtual void __unk_vfn_34();
    /*89*/ virtual void __unk_vfn_35();
    /*90*/ virtual void __unk_vfn_36();
    /*91*/ virtual void __unk_vfn_37();
    /*92*/ virtual void setPermissions(enum CommandPermissionLevel);
    /*93*/ virtual void __unk_vfn_38();
    /*94*/ virtual void __unk_vfn_39();
    /*95*/ virtual void openTrading(struct ActorUniqueID const&, bool);
    /*96*/ virtual void __unk_vfn_40();
    /*97*/ virtual void __unk_vfn_41();
    /*98*/ virtual void openInventory();
    /*99*/ virtual void __unk_vfn_42();
    /*100*/ virtual void __unk_vfn_43();
    /*101*/ virtual void displayTextObjectMessage(class TextObjectRoot const&, std::string const&, std::string const&);
    /*102*/ virtual void displayTextObjectWhisperMessage(class ResolvedTextObject const&, std::string const&, std::string const&);
    /*103*/ virtual void displayWhisperMessage(std::string const&, std::string const&, std::string const&, std::string const&);
    /*104*/ virtual void stopSleepInBed(bool, bool);
    /*105*/ virtual void __unk_vfn_44();
    /*106*/ virtual void __unk_vfn_45();
    /*107*/ virtual bool isHostingPlayer() const;
    /*108*/ virtual bool isLoading() const;
    /*109*/ virtual bool isPlayerInitialized() const;
    /*110*/ virtual void __unk_vfn_46();
    /*111*/ virtual void setPlayerGameType(enum GameType);
    /*112*/ virtual void __unk_vfn_47();
    /*113*/ virtual void setContainerData(class IContainerManager&, int, int);
    /*114*/ virtual void slotChanged(class IContainerManager&, class Container&, int, class ItemStack const&, class ItemStack const&, bool);
    /*115*/ virtual void refreshContainer(class IContainerManager&);
    /*116*/ virtual bool is2DPositionRelevant(class AutomaticID<class Dimension, int>, class BlockPos const&);
    /*117*/ virtual bool isActorRelevant(class Actor const&);
    /*118*/ virtual bool isTeacher() const;
    /*119*/ virtual void onSuspension();
    /*120*/ virtual void onLinkedSlotsChanged();
    /*121*/ virtual void sendInventoryTransaction(class InventoryTransaction const&) const;
    /*122*/ virtual void sendComplexInventoryTransaction(std::unique_ptr<class ComplexInventoryTransaction>) const;
    /*123*/ virtual void sendNetworkPacket(class Packet&) const;
    /*124*/ virtual class PlayerEventCoordinator& getPlayerEventCoordinator();
    /*125*/ virtual class MoveInputHandler* getMoveInputHandler();
    /*126*/ virtual enum InputMode getInputMode() const;
    /*127*/ virtual enum ClientPlayMode getPlayMode() const;
    /*128*/ virtual void reportMovementTelemetry(enum MovementEventType);
    /*129*/ virtual void __unk_vfn_48();
    /*130*/ virtual int _getSpawnChunkLimit() const;
    /*131*/ virtual void _updateChunkPublisherView(class Vec3 const&, float);
    /*
    inline void frameUpdate(class FrameUpdateContextBase& a0){
        void (ServerPlayer::*rv)(class FrameUpdateContextBase&);
        *((void**)&rv) = dlsym("?frameUpdate@ServerPlayer@@UEAAXAEAVFrameUpdateContextBase@@@Z");
        return (this->*rv)(std::forward<class FrameUpdateContextBase&>(a0));
    }
    inline void openPortfolio(){
        void (ServerPlayer::*rv)();
        *((void**)&rv) = dlsym("?openPortfolio@ServerPlayer@@UEAAXXZ");
        return (this->*rv)();
    }
    inline  ~ServerPlayer(){
         (ServerPlayer::*rv)();
        *((void**)&rv) = dlsym("??1ServerPlayer@@UEAA@XZ");
        return (this->*rv)();
    }
    inline void openNpcInteractScreen(class std::shared_ptr<struct INpcDialogueData> a0){
        void (ServerPlayer::*rv)(class std::shared_ptr<struct INpcDialogueData>);
        *((void**)&rv) = dlsym("?openNpcInteractScreen@ServerPlayer@@UEAAXV?$shared_ptr@UINpcDialogueData@@@std@@@Z");
        return (this->*rv)(std::forward<class std::shared_ptr<struct INpcDialogueData>>(a0));
    }
    */
    MCAPI ServerPlayer(class Level&, class PacketSender&, class NetworkHandler&, class ClientBlobCache::Server::ActiveTransfersManager&, enum GameType, class NetworkIdentifier const&, unsigned char, class std::function<void (class ServerPlayer& )>, class mce::UUID, std::string const&, std::unique_ptr<class Certificate>, int, bool, class EntityContext&);
    MCAPI void checkCheating(class Vec3 const&);
    MCAPI void disconnect();
    MCAPI void doDeleteContainerManager(bool);
    MCAPI class ItemStackNetManagerServer& getItemStackNetManagerServer();
    MCAPI class ServerMoveInputHandler* getServerMoveInputHandler();
    MCAPI void handleActorPickRequestOnServer(class Actor&, bool, bool);
    MCAPI void handleBlockPickRequestOnServer(class BlockPos const&, bool);
    MCAPI enum ContainerID openUnmanagedContainer();
    MCAPI void postLoad(bool);
    MCAPI void selectItem(class ItemStack const&);
    MCAPI void sendMobEffectPackets();
    MCAPI void setClientChunkRadius(unsigned int);
    MCAPI void setInputMode(enum InputMode const&);
    MCAPI void setLocalPlayerAsInitialized();
    MCAPI void setPlayMode(enum ClientPlayMode const&);
    MCAPI void setPlayerInput(float, float, bool, bool);
    MCAPI void setSyncTimeIfClientServerPositionMatches(class Vec3 const&);
    MCAPI void triggerRespawnFromCompletingTheEnd();
    MCAPI static class ServerPlayer* tryGetFromEntity(class EntityContext&, bool);

protected:

private:
    MCAPI void _logCDEvent(enum CrashDumpLogStringID, enum CrashDumpLogStringID, enum CrashDumpLogStringID, enum CrashDumpLogStringID);
    MCAPI enum ContainerID _nextContainerCounter();
    MCAPI void _removeNearbyEntities();
    MCAPI void _scanForNearbyActors();
    MCAPI void _setContainerManager(class std::shared_ptr<class IContainerManager>);
    MCAPI void _updateNearbyActors();

};