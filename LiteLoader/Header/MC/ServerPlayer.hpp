/**
 * @file  ServerPlayer.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"
#include "Player.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here
#include "Player.hpp"

#undef BEFORE_EXTRA

/**
 * @brief MC class ServerPlayer.
 *
 */
class ServerPlayer : public Player {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SERVERPLAYER
public:
    class ServerPlayer& operator=(class ServerPlayer const &) = delete;
    ServerPlayer(class ServerPlayer const &) = delete;
    ServerPlayer() = delete;
#endif

public:
    virtual void initializeComponents(enum Actor::InitializationMethod, class VariantParameterList const &);
    virtual void _serverInitItemStackIds();
    virtual ~ServerPlayer();
    virtual void __unk_vfn_41();
    virtual void normalTick();
    virtual void __unk_vfn_61();
    virtual void __unk_vfn_68();
    virtual void __unk_vfn_82();
    virtual void __unk_vfn_85();
    virtual void __unk_vfn_88();
    virtual void __unk_vfn_96();
    virtual void __unk_vfn_99();
    virtual void __unk_vfn_106();
    virtual void __unk_vfn_108();
    virtual void __unk_vfn_109();
    virtual void __unk_vfn_111();
    virtual bool isValidTarget(class Actor *) const;
    virtual void handleEntityEvent(enum ActorEvent, int);
    virtual void setArmor(enum ArmorSlot, class ItemStack const &);
    virtual void setOffhandSlot(class ItemStack const &);
    virtual bool load(class CompoundTag const &, class DataLoadHelper &);
    virtual bool canChangeDimensionsUsingPortal() const;
    virtual void __unk_vfn_182();
    virtual void changeDimension(class AutomaticID<class Dimension, int>);
    virtual struct ActorUniqueID getControllingPlayer() const;
    virtual void checkFallDamage(float, bool);
    virtual void handleFallDistanceOnServer(float, float, bool);
    virtual void __unk_vfn_196();
    virtual void onEffectAdded(class MobEffectInstance &);
    virtual void onEffectUpdated(class MobEffectInstance &);
    virtual void onEffectRemoved(class MobEffectInstance &);
    virtual void __unk_vfn_222();
    virtual void __unk_vfn_223();
    virtual void __unk_vfn_248();
    virtual void __unk_vfn_251();
    virtual void die(class ActorDamageSource const &);
    virtual void __unk_vfn_269();
    virtual void __unk_vfn_277();
    virtual void __unk_vfn_285();
    virtual void knockback(class Actor *, int, float, float, float, float, float);
    virtual void aiStep();
    virtual void __unk_vfn_313();
    virtual void __unk_vfn_317();
    virtual void hurtArmorSlots(class ActorDamageSource const &, int, class std::bitset<4>);
    virtual void setDamagedArmor(enum ArmorSlot, class ItemStack const &);
    virtual void sendArmorDamage(class std::bitset<4>);
    virtual void sendArmor(class std::bitset<4>);
    virtual void clearVanishEnchantedItemsOnDeath();
    virtual void sendInventory(bool);
    virtual void __unk_vfn_351();
    virtual void __unk_vfn_365();
    virtual void prepareRegion(class ChunkSource &);
    virtual void destroyRegion();
    virtual void changeDimensionWithCredits(class AutomaticID<class Dimension, int>);
    virtual void tickWorld(struct Tick const &);
    virtual void __unk_vfn_375();
    virtual void moveView();
    virtual void moveSpawnView(class Vec3 const &, class AutomaticID<class Dimension, int>);
    virtual void checkMovementStats(class Vec3 const &);
    virtual void __unk_vfn_382();
    virtual void __unk_vfn_383();
    virtual void __unk_vfn_385();
    virtual void __unk_vfn_386();
    virtual void __unk_vfn_391();
    virtual void __unk_vfn_392();
    virtual void openTrading(struct ActorUniqueID const &, bool);
    virtual void __unk_vfn_395();
    virtual void openNpcInteractScreen(class std::shared_ptr<struct INpcDialogueData>);
    virtual void openInventory();
    virtual void __unk_vfn_398();
    virtual void __unk_vfn_399();
    virtual void displayTextObjectMessage(class TextObjectRoot const &, std::string const &, std::string const &);
    virtual void displayTextObjectWhisperMessage(class ResolvedTextObject const &, std::string const &, std::string const &);
    virtual void displayTextObjectWhisperMessage(std::string const &, std::string const &, std::string const &);
    virtual void displayWhisperMessage(std::string const &, std::string const &, std::string const &, std::string const &);
    virtual void stopSleepInBed(bool, bool);
    virtual void __unk_vfn_409();
    virtual void __unk_vfn_410();
    virtual bool isHostingPlayer() const;
    virtual bool isLoading() const;
    virtual bool isPlayerInitialized() const;
    virtual void __unk_vfn_414();
    virtual void setPlayerGameType(enum GameType);
    virtual void __unk_vfn_421();
    virtual void setContainerData(class IContainerManager &, int, int);
    virtual void slotChanged(class IContainerManager &, class Container &, int, class ItemStack const &, class ItemStack const &, bool);
    virtual void refreshContainer(class IContainerManager &);
    virtual bool isActorRelevant(class Actor const &);
    virtual bool isTeacher() const;
    virtual void onSuspension();
    virtual void onLinkedSlotsChanged();
    virtual void sendInventoryTransaction(class InventoryTransaction const &) const;
    virtual void sendComplexInventoryTransaction(std::unique_ptr<class ComplexInventoryTransaction>) const;
    virtual void sendNetworkPacket(class Packet &) const;
    virtual class PlayerEventCoordinator & getPlayerEventCoordinator();
    virtual class MoveInputHandler * tryGetMoveInputHandler() const;
    virtual enum InputMode getInputMode() const;
    virtual enum ClientPlayMode getPlayMode() const;
    virtual void reportMovementTelemetry(enum MovementEventType);
    virtual void __unk_vfn_448();
    virtual void addSavedChunk(class ChunkPos const &);
    virtual int _getSpawnChunkLimit() const;
    virtual void _updateChunkPublisherView(class Vec3 const &, float);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_SERVERPLAYER
    MCVAPI void frameUpdate(class FrameUpdateContextBase &);
    MCVAPI void openPortfolio();
#endif
    MCAPI ServerPlayer(class Level &, class PacketSender &, class NetworkHandler &, class ClientBlobCache::Server::ActiveTransfersManager &, enum GameType, class NetworkIdentifier const &, enum SubClientId, class std::function<void (class ServerPlayer &)>, class mce::UUID, std::string const &, std::string const &, std::unique_ptr<class Certificate>, int, bool, class EntityContext &);
    MCAPI void checkCheating(class Vec3 const &);
    MCAPI void disconnect();
    MCAPI void doDeleteContainerManager(bool);
    MCAPI void doInitialSpawn();
    MCAPI class ItemStackNetManagerServer & getItemStackNetManagerServer();
    MCAPI class ServerMoveInputHandler * getServerMoveInputHandler();
    MCAPI void handleActorPickRequestOnServer(class Actor &, bool, bool);
    MCAPI void handleBlockPickRequestOnServer(class BlockPos const &, bool);
    MCAPI enum ContainerID openUnmanagedContainer();
    MCAPI void postLoad(bool);
    MCAPI void selectItem(class ItemStack const &);
    MCAPI void sendMobEffectPackets();
    MCAPI void setClientChunkRadius(unsigned int);
    MCAPI void setInputMode(enum InputMode const &);
    MCAPI void setLocalPlayerAsInitialized();
    MCAPI void setPlayMode(enum ClientPlayMode const &);
    MCAPI void setPlayerInput(float, float, bool, bool);
    MCAPI void setSyncTimeIfClientServerPositionMatches(class Vec3 const &);
    MCAPI void triggerRespawnFromCompletingTheEnd();
    MCAPI static class ServerPlayer * tryGetFromEntity(class EntityContext &, bool);

//private:
    MCAPI bool _checkForLoadedTickingAreas() const;
    MCAPI void _logCDEvent(enum CrashDumpLogStringID, enum CrashDumpLogStringID, enum CrashDumpLogStringID, enum CrashDumpLogStringID);
    MCAPI enum ContainerID _nextContainerCounter();
    MCAPI void _removeNearbyEntities();
    MCAPI void _scanForNearbyActors();
    MCAPI void _setContainerManager(class std::shared_ptr<class IContainerManager>);
    MCAPI void _updateNearbyActors();

private:

};