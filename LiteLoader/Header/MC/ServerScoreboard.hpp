/**
 * @file  ServerScoreboard.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here
#include "Scoreboard.hpp"

#undef BEFORE_EXTRA

/**
 * @brief MC class ServerScoreboard.
 *
 */
class ServerScoreboard {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SERVERSCOREBOARD
public:
    class ServerScoreboard& operator=(class ServerScoreboard const &) = delete;
    ServerScoreboard(class ServerScoreboard const &) = delete;
    ServerScoreboard() = delete;
#endif

public:
    virtual ~ServerScoreboard();
    virtual class DisplayObjective const * setDisplayObjective(std::string const &, class Objective const &, enum ObjectiveSortOrder);
    virtual class Objective * clearDisplayObjective(std::string const &);
    virtual struct ScoreboardId const & createScoreboardId(class Player const &);
    virtual struct ScoreboardId const & createScoreboardId(class Actor const &);
    virtual struct ScoreboardId const & createScoreboardId(std::string const &);
    virtual void onObjectiveAdded(class Objective const &);
    virtual void onObjectiveRemoved(class Objective &);
    virtual void onScoreChanged(struct ScoreboardId const &, class Objective const &);
    virtual void onPlayerScoreRemoved(struct ScoreboardId const &, class Objective const &);
    virtual void onPlayerJoined(class Player const &);
    virtual void onPlayerIdentityUpdated(struct PlayerScoreboardId const &);
    virtual void tick();
    virtual void setPacketSender(class PacketSender *);
    virtual void writeToLevelStorage();
    virtual bool isClientSide() const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_SERVERSCOREBOARD
#endif
    MCAPI ServerScoreboard(class CommandSoftEnumRegistry, class LevelStorage *);
    MCAPI void deserialize(std::unique_ptr<class CompoundTag>);
    MCAPI std::unique_ptr<class CompoundTag> serialize() const;
    MCAPI void setClearDisplayObjectiveCallback(class std::function<void (std::string const &, class DisplayObjective const &)>);
    MCAPI void setIdentityUpdatedCallback(class std::function<void (struct ScoreboardId const &)>);
    MCAPI void setScoreChangedCallback(class std::function<void (struct ScoreboardId const &)>);
    MCAPI void setScoreRemovedCallback(class std::function<void (struct ScoreboardId const &)>);
    MCAPI void setSetDisplayObjectiveCallback(class std::function<void (std::string const &, class DisplayObjective const &)>);

//private:
    MCAPI void _stopTrackingObjective(class Objective const &);
    MCAPI struct ScorePacketInfo _unpackIdentityDefToScorePacket(class ScoreboardIdentityRef const &, std::string const &, int);

private:

};