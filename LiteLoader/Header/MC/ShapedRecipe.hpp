/**
 * @file  ShapedRecipe.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Recipe.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class ShapedRecipe.
 *
 */
class ShapedRecipe : public Recipe {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SHAPEDRECIPE
public:
    class ShapedRecipe& operator=(class ShapedRecipe const &) = delete;
    ShapedRecipe(class ShapedRecipe const &) = delete;
    ShapedRecipe() = delete;
#endif

public:
    virtual ~ShapedRecipe();
    virtual std::vector<class ItemInstance> const & assemble(class CraftingContainer &) const;
    virtual int getCraftingSize() const;
    virtual class RecipeIngredient const & getIngredient(int, int) const;
    virtual std::vector<class ItemInstance> const & getResultItem() const;
    virtual bool isShapeless() const;
    virtual bool matches(class CraftingContainer &, class Level &) const;
    virtual int size() const;
    virtual void loadResultList(class BlockPalette const &) const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_SHAPEDRECIPE
#endif
    MCAPI ShapedRecipe(class gsl::basic_string_span<char const, -1>, int, int, std::vector<class RecipeIngredient> const &, std::vector<class ItemInstance> const &, class HashedString, int, class mce::UUID const *);
    MCAPI void generateUUID();

//private:
    MCAPI bool matches(class CraftingContainer &, int, int, bool) const;

private:

};