/**
 * @file  ShooterItemComponent.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class ShooterItemComponent.
 *
 */
class ShooterItemComponent {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SHOOTERITEMCOMPONENT
public:
    class ShooterItemComponent& operator=(class ShooterItemComponent const &) = delete;
    ShooterItemComponent() = delete;
#endif

public:
    virtual ~ShooterItemComponent();
    virtual bool checkComponentDataForContentErrors() const;
    virtual void __unk_vfn_2();
    virtual void __unk_vfn_3();
    virtual bool isNetworkComponent() const;
    virtual std::unique_ptr<class CompoundTag> buildNetworkTag() const;
    virtual bool initializeFromNetwork(class CompoundTag const &);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_SHOOTERITEMCOMPONENT
#endif
    MCAPI ShooterItemComponent(class ShooterItemComponent const &);
    MCAPI bool releaseUsing(class ItemStack &, class Player *, int) const;
    MCAPI bool use(class ItemStack &, class Player &) const;
    MCAPI static void bindType();
    MCAPI static class HashedString const & getIdentifier();

//private:
    MCAPI void _consumeAmmunition(class Player *, class ItemStack const &, int, bool, bool) const;
    MCAPI int _getAmmunition(class Player const *, bool, class ItemStack &, bool &) const;
    MCAPI void _shootProjectiles(class ItemStack &, class Player *, int) const;

private:

};