// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#include "Tag.hpp"

#define BEFORE_EXTRA //DO NOT EDIT THIS LINE
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA //DO NOT EDIT THIS LINE

class ShortTag : public Tag {

#define AFTER_EXTRA //DO NOT EDIT THIS LINE
// Add Member There
public:
inline short& value() {
    return dAccess<short, 8>(this);
}
inline ShortTag& operator=(short val) {
    value() = val;
    return *this;
}
inline static ShortTag* create(short val = 0) {
    ShortTag* tag = (ShortTag*)Tag::createTag(Tag::Type::Short);
    *tag = val;
    return tag;
}
inline bool set(short val) {
    if (getTagType() != Tag::Type::Short)
        return false;
    value() = val;
    return true;
}
inline short get() {
    return value();
}

#undef AFTER_EXTRA //DO NOT EDIT THIS LINE

public:
    /*0*/ virtual ~ShortTag();
    /*1*/ virtual void deleteChildren();
    /*2*/ virtual void write(class IDataOutput&) const;
    /*3*/ virtual void load(class IDataInput&);
    /*4*/ virtual std::string toString() const;
    /*5*/ virtual int /*enum enum Tag::Type*/ getId() const;
    /*6*/ virtual bool equals(class Tag const&) const;
    /*7*/ virtual std::unique_ptr<class Tag> copy() const;
    /*8*/ virtual unsigned __int64 hash() const;


    MCAPI ShortTag(short);

protected:


private:

};