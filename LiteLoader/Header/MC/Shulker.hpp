// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"
#include "Mob.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class Shulker : public Mob {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SHULKER
public:
    class Shulker& operator=(class Shulker const&) = delete;
    Shulker(class Shulker const&) = delete;
    Shulker() = delete;
#endif

public:
    /*0*/ virtual void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const&);
    /*1*/ virtual ~Shulker();
    /*2*/ virtual void setPos(class Vec3 const&);
    /*3*/ virtual void __unk_vfn_0();
    /*4*/ virtual void __unk_vfn_1();
    /*5*/ virtual class Vec3 getInterpolatedRidingOffset(float) const;
    /*6*/ virtual void __unk_vfn_2();
    /*7*/ virtual void lerpMotion(class Vec3 const&);
    /*8*/ virtual void normalTick();
    /*9*/ virtual float getRidingHeight();
    /*10*/ virtual bool isInWall() const;
    /*11*/ virtual void __unk_vfn_3();
    /*12*/ virtual void __unk_vfn_4();
    /*13*/ virtual float getCameraOffset() const;
    /*14*/ virtual float getShadowRadius() const;
    /*15*/ virtual void __unk_vfn_5();
    /*16*/ virtual void __unk_vfn_6();
    /*17*/ virtual void playerTouch(class Player&);
    /*18*/ virtual void __unk_vfn_7();
    /*19*/ virtual void __unk_vfn_8();
    /*20*/ virtual void __unk_vfn_9();
    /*21*/ virtual void __unk_vfn_10();
    /*22*/ virtual void __unk_vfn_11();
    /*23*/ virtual void __unk_vfn_12();
    /*24*/ virtual void __unk_vfn_13();
    /*25*/ virtual bool canAttack(class Actor*, bool) const;
    /*26*/ virtual class Actor* findAttackTarget();
    /*27*/ virtual void __unk_vfn_14();
    /*28*/ virtual void adjustDamageAmount(int&) const;
    /*29*/ virtual void onTame();
    /*30*/ virtual void onFailedTame();
    /*31*/ virtual void vehicleLanded(class Vec3 const&, class Vec3 const&);
    /*32*/ virtual void __unk_vfn_15();
    /*33*/ virtual bool isInvulnerableTo(class ActorDamageSource const&) const;
    /*34*/ virtual void onBounceStarted(class BlockPos const&, class Block const&);
    /*35*/ virtual float getPickRadius();
    /*36*/ virtual void awardKillScore(class Actor&, int);
    /*37*/ virtual class HashedString const& queryEntityRenderer() const;
    /*38*/ virtual struct ActorUniqueID getSourceUniqueID() const;
    /*39*/ virtual int getPortalWaitTime() const;
    /*40*/ virtual void __unk_vfn_16();
    /*41*/ virtual void __unk_vfn_17();
    /*42*/ virtual struct ActorUniqueID getControllingPlayer() const;
    /*43*/ virtual void __unk_vfn_18();
    /*44*/ virtual void __unk_vfn_19();
    /*45*/ virtual void __unk_vfn_20();
    /*46*/ virtual void __unk_vfn_21();
    /*47*/ virtual void __unk_vfn_22();
    /*48*/ virtual void __unk_vfn_23();
    /*49*/ virtual void __unk_vfn_24();
    /*50*/ virtual void __unk_vfn_25();
    /*51*/ virtual void __unk_vfn_26();
    /*52*/ virtual void __unk_vfn_27();
    /*53*/ virtual void setAuxValue(int);
    /*54*/ virtual void stopSpinAttack();
    /*55*/ virtual void __unk_vfn_28();
    /*56*/ virtual void __unk_vfn_29();
    /*57*/ virtual void updateEntitySpecificMolangVariables(class RenderParams&);
    /*58*/ virtual void __unk_vfn_30();
    /*59*/ virtual bool _hurt(class ActorDamageSource const&, int, bool, bool);
    /*60*/ virtual void readAdditionalSaveData(class CompoundTag const&, class DataLoadHelper&);
    /*61*/ virtual void addAdditionalSaveData(class CompoundTag&);
    /*62*/ virtual void __unk_vfn_31();
    /*63*/ virtual void _onSizeUpdated();
    /*64*/ virtual void __unk_vfn_32();
    /*65*/ virtual void spawnAnim();
    /*66*/ virtual void travel(float, float, float);
    /*67*/ virtual void aiStep();
    /*68*/ virtual bool checkSpawnRules(bool);
    /*69*/ virtual int getItemUseDuration() const;
    /*70*/ virtual float getItemUseStartupProgress() const;
    /*71*/ virtual float getItemUseIntervalProgress() const;
    /*72*/ virtual void __unk_vfn_33();
    /*73*/ virtual float getMaxHeadXRot();
    /*74*/ virtual void __unk_vfn_34();
    /*75*/ virtual void __unk_vfn_35();
    /*76*/ virtual int getArmorValue();
    /*77*/ virtual void sendArmorDamage(class std::bitset<4> const&);
    /*78*/ virtual void onBorn(class Actor&, class Actor&);
    /*79*/ virtual int getAttackTime();
    /*80*/ virtual float _getWalkTargetValue(class BlockPos const&);
    /*81*/ virtual void __unk_vfn_36();
    /*82*/ virtual std::unique_ptr<class BodyControl> initBodyControl();
    /*83*/ virtual void _serverAiMobStep();
    /*84*/ virtual void __unk_vfn_37();
    /*
    inline bool isLeashableType(){
        bool (Shulker::*rv)();
        *((void**)&rv) = dlsym("?isLeashableType@Shulker@@UEAA_NXZ");
        return (this->*rv)();
    }
    inline bool useNewAi() const{
        bool (Shulker::*rv)() const;
        *((void**)&rv) = dlsym("?useNewAi@Shulker@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool shouldRender() const{
        bool (Shulker::*rv)() const;
        *((void**)&rv) = dlsym("?shouldRender@Shulker@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline std::unique_ptr<class BodyControl> initBodyControl(){
        std::unique_ptr<class BodyControl> (Shulker::*rv)();
        *((void**)&rv) = dlsym("?initBodyControl@Shulker@@UEAA?AV?$unique_ptr@VBodyControl@@U?$default_delete@VBodyControl@@@std@@@std@@XZ");
        return (this->*rv)();
    }
    */
    MCAPI Shulker(class ActorDefinitionGroup*, struct ActorDefinitionIdentifier const&, class EntityContext&);
    MCAPI void calculateBB();
    MCAPI bool isValidAttach(class BlockPos, unsigned char);
    MCAPI void setAttachFace(unsigned char);
    MCAPI void setPeekAmount(int);
    MCAPI void setShulkerAttachPos(class BlockPos);
    MCAPI static class std::shared_ptr<class AttributeModifier> COVERED_ARMOR_MODIFIER;
    MCAPI static class mce::UUID const COVERED_ARMOR_MODIFIER_UUID;

protected:
    MCAPI bool tryFindNewAttachPosition();
    MCAPI bool trySetNewAttachPosition(class BlockPos const&);

private:

};