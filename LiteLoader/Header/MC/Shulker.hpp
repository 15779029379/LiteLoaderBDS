/**
 * @file  Shulker.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"
#include "Mob.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class Shulker.
 *
 */
class Shulker : public Mob {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SHULKER
public:
    class Shulker& operator=(class Shulker const &) = delete;
    Shulker(class Shulker const &) = delete;
    Shulker() = delete;
#endif

public:
    virtual void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const &);
    virtual ~Shulker();
    virtual void setPos(class Vec3 const &);
    virtual void __unk_vfn_41();
    virtual void normalTick();
    virtual bool isInWall() const;
    virtual void __unk_vfn_61();
    virtual void __unk_vfn_68();
    virtual float getShadowRadius() const;
    virtual void __unk_vfn_82();
    virtual void __unk_vfn_85();
    virtual void __unk_vfn_88();
    virtual void __unk_vfn_96();
    virtual void __unk_vfn_99();
    virtual void __unk_vfn_106();
    virtual void __unk_vfn_108();
    virtual void __unk_vfn_109();
    virtual void __unk_vfn_111();
    virtual bool canAttack(class Actor *, bool) const;
    virtual bool shouldRender() const;
    virtual bool isInvulnerableTo(class ActorDamageSource const &) const;
    virtual float getPickRadius();
    virtual void __unk_vfn_182();
    virtual void __unk_vfn_196();
    virtual void __unk_vfn_222();
    virtual void __unk_vfn_223();
    virtual void __unk_vfn_248();
    virtual void __unk_vfn_251();
    virtual void updateEntitySpecificMolangVariables(class RenderParams &);
    virtual void __unk_vfn_269();
    virtual bool _hurt(class ActorDamageSource const &, float, bool, bool);
    virtual void readAdditionalSaveData(class CompoundTag const &, class DataLoadHelper &);
    virtual void addAdditionalSaveData(class CompoundTag &) const;
    virtual void __unk_vfn_277();
    virtual void _onSizeUpdated();
    virtual void __unk_vfn_285();
    virtual void travel(float, float, float);
    virtual void aiStep();
    virtual bool checkSpawnRules(bool);
    virtual void __unk_vfn_313();
    virtual float getMaxHeadXRot();
    virtual void __unk_vfn_317();
    virtual int getArmorValue() const;
    virtual void __unk_vfn_351();
    virtual std::unique_ptr<class BodyControl> initBodyControl();
    virtual void __unk_vfn_365();
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_SHULKER
    MCVAPI bool breaksFallingBlocks() const;
    MCVAPI bool isLeashableType();
    MCVAPI bool useNewAi() const;
#endif
    MCAPI Shulker(class ActorDefinitionGroup *, struct ActorDefinitionIdentifier const &, class EntityContext &);
    MCAPI void postNormalTick();
MCAPI static class std::shared_ptr<class AttributeModifier> COVERED_ARMOR_MODIFIER;
MCAPI static class mce::UUID const COVERED_ARMOR_MODIFIER_UUID;
    MCAPI static void setShulkerAttachPos(class SynchedActorData &, class BlockPos const &);

//protected:
    MCAPI bool _canOpenLidAt(class BlockPos, unsigned char) const;
    MCAPI static void _setPeekAmount(class SynchedActorData &, int);

//private:
    MCAPI void _calculateBB();
    MCAPI bool _isPosOccupiedByOtherShulker(class BlockPos) const;
    MCAPI bool _isValidAttach(class BlockPos, unsigned char);
    MCAPI void _peekAmountTick();
    MCAPI void _setAttachFace(unsigned char);
    MCAPI bool _tryAttachingToNeighbouringFaces(class BlockPos);
    MCAPI void _trySpawnShulker();
    MCAPI bool _tryTeleportSomewhere();

protected:

private:

};