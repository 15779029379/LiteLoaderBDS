/**
 * @file  SignBlockActor.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "BlockActor.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class SignBlockActor.
 *
 */
class SignBlockActor : public BlockActor {

#define AFTER_EXTRA
// Add Member There
public:
enum SignType;

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SIGNBLOCKACTOR
public:
    class SignBlockActor& operator=(class SignBlockActor const &) = delete;
    SignBlockActor(class SignBlockActor const &) = delete;
    SignBlockActor() = delete;
#endif

public:
    virtual ~SignBlockActor();
    virtual void load(class Level &, class CompoundTag const &, class DataLoadHelper &);
    virtual bool save(class CompoundTag &) const;
    virtual void onChanged(class BlockSource &);
    virtual void __unk_vfn_12();
    virtual void __unk_vfn_16();
    virtual float getShadowRadius(class BlockSource &) const;
    virtual std::string getImmersiveReaderText(class BlockSource &);
    virtual void __unk_vfn_28();
    virtual void __unk_vfn_29();
    virtual void __unk_vfn_30();
    virtual void __unk_vfn_32();
    virtual void __unk_vfn_33();
    virtual void __unk_vfn_34();
    virtual std::unique_ptr<class BlockActorDataPacket> _getUpdatePacket(class BlockSource &);
    virtual void _onUpdatePacket(class CompoundTag const &, class BlockSource &);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_SIGNBLOCKACTOR
#endif
    MCAPI SignBlockActor(class BlockPos const &);
    MCAPI std::string const & getMessage();
    MCAPI class mce::Color const & getSignTextColor() const;
    MCAPI bool isBug471852Resolved() const;
    MCAPI void resolveBug471852();
    MCAPI void setMessage(std::string, std::string);
    MCAPI void setMessage(class TextObjectRoot, std::string);
    MCAPI void setSignTextColor(class mce::Color const &);
    MCAPI void setType(enum SignBlockActor::SignType);

};