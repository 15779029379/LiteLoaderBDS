// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Packet.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class SimpleEventPacket : public Packet {

#define AFTER_EXTRA
// Add Member There
public:
enum Subtype;

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SIMPLEEVENTPACKET
public:
    class SimpleEventPacket& operator=(class SimpleEventPacket const&) = delete;
    SimpleEventPacket(class SimpleEventPacket const&) = delete;
#endif

public:
    /*0*/ virtual ~SimpleEventPacket();
    /*1*/ virtual void __unk_vfn_0();
    /*2*/ virtual std::string getName() const;
    /*3*/ virtual void __unk_vfn_1();
    /*4*/ virtual bool disallowBatching() const;
    /*5*/ virtual enum StreamReadResult _read(class ReadOnlyBinaryStream&);
    /*
    inline  ~SimpleEventPacket(){
         (SimpleEventPacket::*rv)();
        *((void**)&rv) = dlsym("??1SimpleEventPacket@@UEAA@XZ");
        return (this->*rv)();
    }
    inline void write(class BinaryStream& a0) const{
        void (SimpleEventPacket::*rv)(class BinaryStream&) const;
        *((void**)&rv) = dlsym("?write@SimpleEventPacket@@UEBAXAEAVBinaryStream@@@Z");
        return (this->*rv)(std::forward<class BinaryStream&>(a0));
    }
    inline enum MinecraftPacketIds getId() const{
        enum MinecraftPacketIds (SimpleEventPacket::*rv)() const;
        *((void**)&rv) = dlsym("?getId@SimpleEventPacket@@UEBA?AW4MinecraftPacketIds@@XZ");
        return (this->*rv)();
    }
    */
    MCAPI SimpleEventPacket(enum SimpleEventPacket::Subtype const&);
    MCAPI SimpleEventPacket();
    MCAPI enum SimpleEventPacket::Subtype const& getSubtype() const;

protected:

private:

};