// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#define EXTRA_INCLUDE_PART
#include "Extra/SimulatedPlayerAPI.hpp"
#undef EXTRA_INCLUDE_PART
class SimulatedPlayer : public ServerPlayer {
#include "Extra/SimulatedPlayerAPI.hpp"
public:
    virtual void initializeComponents(int /*enum Actor::InitializationMethod*/, class VariantParameterList const&);
    virtual ~SimulatedPlayer();
    virtual bool isRuntimePredictedMovementEnabled();
    virtual void unk_vfn_22();
    virtual class Vec3 getInterpolatedRidingOffset(float);
    virtual void unk_vfn_41();
    virtual void unk_vfn_61();
    virtual void unk_vfn_68();
    virtual void unk_vfn_82();
    virtual void unk_vfn_87();
    virtual void playerTouch(class Player&);
    virtual void unk_vfn_94();
    virtual void unk_vfn_97();
    virtual void unk_vfn_103();
    virtual void unk_vfn_104();
    virtual void unk_vfn_106();
    virtual void unk_vfn_107();
    virtual void unk_vfn_108();
    virtual class Actor* findAttackTarget();
    virtual void onTame();
    virtual void onFailedTame();
    virtual void unk_vfn_130();
    virtual void vehicleLanded(class Vec3 const&, class Vec3 const&);
    virtual void unk_vfn_144();
    virtual class ItemStack const& getCarriedItem();
    virtual class HashedString const& queryEntityRenderer();
    virtual struct ActorUniqueID getSourceUniqueID();
    virtual int getPortalCooldown();
    virtual void unk_vfn_184();
    virtual bool canPickupItem(class ItemStack const&);
    virtual bool canBePulledIntoVehicle();
    virtual void unk_vfn_197();
    virtual void sendMotionPacketIfNeeded();
    virtual bool canSynchronizeNewEntity();
    virtual void unk_vfn_222();
    virtual void unk_vfn_223();
    virtual void unk_vfn_229();
    virtual bool canDestroyBlock(class Block const&);
    virtual void setAuxValue(int);
    virtual void unk_vfn_243();
    virtual void unk_vfn_246();
    virtual void unk_vfn_258();
    virtual void unk_vfn_266();
    virtual void unk_vfn_275();
    virtual void spawnAnim();
    virtual void aiStep();
    virtual void unk_vfn_305();
    virtual bool isAlliedTo(class Mob*);
    virtual void unk_vfn_309();
    virtual void onBorn(class Actor&, class Actor&);
    virtual void unk_vfn_338();
    virtual float _getWalkTargetValue(class BlockPos const&);
    virtual bool canExistWhenDisallowMob();
    virtual void unk_vfn_341();
    virtual void updateAi();
    virtual void _serverAiMobStep();
    virtual void unk_vfn_357();
    virtual void unk_vfn_366();
    virtual void unk_vfn_371();
    virtual void unk_vfn_372();
    virtual void unk_vfn_374();
    virtual void unk_vfn_376();
    virtual void unk_vfn_382();
    virtual void unk_vfn_383();
    virtual void unk_vfn_386();
    virtual void unk_vfn_387();
    virtual void unk_vfn_389();
    virtual void unk_vfn_390();
    virtual void unk_vfn_399();
    virtual void unk_vfn_400();
    virtual void unk_vfn_404();
    virtual void unk_vfn_411();
    virtual void unk_vfn_439();
    virtual std::string getXuid();
    virtual struct PlayerMovementSettings const& getMovementSettings();
    virtual class std::shared_ptr<class ChunkViewSource> _createChunkSource(class ChunkSource&);
    virtual int _getSpawnChunkLimit();
    virtual void _updateChunkPublisherView(class Vec3 const&, float);

public:
    MCAPI class Bedrock::NonOwnerPointer<class gametest::BaseGameTestHelper> getGameTestHelper() const;
    MCAPI void setGameTestHelper(class Bedrock::NonOwnerPointer<class gametest::BaseGameTestHelper>);
    MCAPI bool simulateAttack(class Actor&);
    MCAPI bool simulateAttack();
    MCAPI bool simulateDestroyBlock(class BlockPos const&, unsigned char);
    MCAPI void simulateDisconnect();
    MCAPI bool simulateInteract(class Actor&);
    MCAPI bool simulateInteract(class BlockPos const&, unsigned char);
    MCAPI bool simulateInteract();
    MCAPI bool simulateJump();
    MCAPI void simulateLocalMove(class Vec3 const&, float);
    MCAPI void simulateLookAt(class Actor&);
    MCAPI void simulateLookAt(class BlockPos const&);
    MCAPI void simulateLookAt(class Vec3 const&);
    MCAPI void simulateMoveToLocation(class Vec3 const&, float);
    MCAPI struct ScriptNavigationResult simulateNavigateToEntity(class Actor&, float);
    MCAPI struct ScriptNavigationResult simulateNavigateToLocation(class Vec3 const&, float);
    MCAPI void simulateNavigateToLocations(std::vector<class Vec3>&&, float);
    MCAPI class ItemStack const& simulateSelectSlot(int);
    MCAPI void simulateSetBodyRotation(float);
    MCAPI void simulateStopDestroyingBlock();
    MCAPI void simulateStopInteracting();
    MCAPI void simulateStopMoving();
    MCAPI void simulateStopUsingItem();
    MCAPI bool simulateUseItem(class ItemStack&);
    MCAPI bool simulateUseItemInSlot(int);
    MCAPI bool simulateUseItemInSlotOnBlock(int, class BlockPos const&, unsigned char, class Vec3 const&);
    MCAPI bool simulateUseItemOnBlock(class ItemStack&, class BlockPos const&, unsigned char, class Vec3 const&);
    MCAPI void simulateWorldMove(class Vec3 const&, float);

    MCAPI static class SimulatedPlayer* create(std::string const&, class BlockPos const&, class AutomaticID<class Dimension, int>, class ServerNetworkHandler&);
    MCAPI static class SimulatedPlayer* tryGetFromEntity(class EntityContext&, bool);

private:
    MCAPI void _addMoveComponent();
    MCAPI struct ScriptNavigationResult _createNavigationResult(class NavigationComponent*) const;
    MCAPI float _getInputSpeed();
    MCAPI void _startCooldown();
    MCAPI bool _trySwing();
    MCAPI void _updateMovement();
};