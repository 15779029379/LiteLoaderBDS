// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#include "Monster.hpp"
#define EXTRA_INCLUDE_PART_SKELETON
#include "Extra/SkeletonAPI.hpp"
#undef EXTRA_INCLUDE_PART_SKELETON
class Skeleton : public Monster {
#include "Extra/SkeletonAPI.hpp"
public:
    virtual ~Skeleton();
    virtual bool isRuntimePredictedMovementEnabled();
    virtual void unk_vfn_22();
    virtual class Vec3 getInterpolatedRidingOffset(float);
    virtual void unk_vfn_41();
    virtual void normalTick();
    virtual void vehicleTick();
    virtual float getRidingHeight();
    virtual void unk_vfn_61();
    virtual void unk_vfn_68();
    virtual float getCameraOffset();
    virtual void unk_vfn_82();
    virtual void unk_vfn_87();
    virtual void playerTouch(class Player&);
    virtual void unk_vfn_94();
    virtual void unk_vfn_97();
    virtual bool isDamageBlocked(class ActorDamageSource const&);
    virtual void unk_vfn_103();
    virtual void unk_vfn_104();
    virtual void unk_vfn_106();
    virtual void unk_vfn_107();
    virtual void unk_vfn_108();
    virtual void setTarget(class Actor*);
    virtual bool isValidTarget(class Actor*);
    virtual void adjustDamageAmount(int&);
    virtual void onTame();
    virtual void onFailedTame();
    virtual void unk_vfn_130();
    virtual void vehicleLanded(class Vec3 const&, class Vec3 const&);
    virtual void onBounceStarted(class BlockPos const&, class Block const&);
    virtual void unk_vfn_144();
    virtual void awardKillScore(class Actor&, int);
    virtual int /*enum ActorType*/ getEntityTypeId();
    virtual class HashedString const& queryEntityRenderer();
    virtual struct ActorUniqueID getSourceUniqueID();
    virtual bool canFreeze();
    virtual int getPortalWaitTime();
    virtual bool canChangeDimensions();
    virtual void unk_vfn_184();
    virtual struct ActorUniqueID getControllingPlayer();
    virtual bool canPickupItem(class ItemStack const&);
    virtual bool canBePulledIntoVehicle();
    virtual void unk_vfn_197();
    virtual bool canSynchronizeNewEntity();
    virtual bool canBeAffected(class MobEffectInstance const&);
    virtual void unk_vfn_222();
    virtual void unk_vfn_223();
    virtual void getDebugText(std::vector<std::string>&);
    virtual bool isWorldBuilder();
    virtual void unk_vfn_229();
    virtual bool isAdventure();
    virtual bool canDestroyBlock(class Block const&);
    virtual void setAuxValue(int);
    virtual void stopSpinAttack();
    virtual void unk_vfn_243();
    virtual void unk_vfn_246();
    virtual void die(class ActorDamageSource const&);
    virtual void unk_vfn_258();
    virtual void readAdditionalSaveData(class CompoundTag const&, class DataLoadHelper&);
    virtual void addAdditionalSaveData(class CompoundTag&);
    virtual void unk_vfn_266();
    virtual void unk_vfn_275();
    virtual void spawnAnim();
    virtual void aiStep();
    virtual bool checkSpawnRules(bool);
    virtual float getItemUseStartupProgress();
    virtual float getItemUseIntervalProgress();
    virtual void unk_vfn_305();
    virtual bool isAlliedTo(class Mob*);
    virtual bool doHurtTarget(class Actor*, int /*enum ActorDamageCause*/ const&);
    virtual void unk_vfn_309();
    virtual void sendArmorDamage(class std::bitset<4> const&);
    virtual void onBorn(class Actor&, class Actor&);
    virtual void unk_vfn_338();
    virtual void unk_vfn_341();
    virtual void _serverAiMobStep();
    virtual void unk_vfn_357();

public:
    MCAPI Skeleton(class ActorDefinitionGroup*, struct ActorDefinitionIdentifier const&, class OwnerPtrT<struct EntityRefTraits> const&);
    MCAPI void setWitherParent(class WitherBoss*);


private:
    MCAPI static class mce::UUID const SPEED_MODIFIER_ATTACK_UUID;
};