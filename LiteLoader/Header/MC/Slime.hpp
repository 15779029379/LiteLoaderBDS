// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"
#include "Monster.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class Slime : public Monster {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SLIME
public:
    class Slime& operator=(class Slime const&) = delete;
    Slime(class Slime const&) = delete;
    Slime() = delete;
#endif

public:
    /*8*/ virtual void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const&);
    /*14*/ virtual ~Slime();
    /*18*/ virtual void remove();
    /*41*/ virtual void __unk_vfn_41();
    /*48*/ virtual void normalTick();
    /*61*/ virtual void __unk_vfn_61();
    /*68*/ virtual void __unk_vfn_68();
    /*80*/ virtual float getShadowRadius() const;
    /*82*/ virtual void __unk_vfn_82();
    /*87*/ virtual void __unk_vfn_87();
    /*88*/ virtual void playerTouch(class Player&);
    /*94*/ virtual void __unk_vfn_94();
    /*97*/ virtual void __unk_vfn_97();
    /*104*/ virtual void __unk_vfn_104();
    /*106*/ virtual void __unk_vfn_106();
    /*107*/ virtual void __unk_vfn_107();
    /*108*/ virtual void __unk_vfn_108();
    /*112*/ virtual class Actor* findAttackTarget();
    /*140*/ virtual void onBounceStarted(class BlockPos const&, class Block const&);
    /*172*/ virtual struct ActorUniqueID getSourceUniqueID() const;
    /*182*/ virtual void __unk_vfn_182();
    /*191*/ virtual void onSynchedDataUpdate(int);
    /*196*/ virtual void __unk_vfn_196();
    /*221*/ virtual void __unk_vfn_221();
    /*222*/ virtual void __unk_vfn_222();
    /*228*/ virtual void __unk_vfn_228();
    /*242*/ virtual void __unk_vfn_242();
    /*245*/ virtual void __unk_vfn_245();
    /*257*/ virtual void __unk_vfn_257();
    /*261*/ virtual void readAdditionalSaveData(class CompoundTag const&, class DataLoadHelper&);
    /*262*/ virtual void addAdditionalSaveData(class CompoundTag&);
    /*265*/ virtual void __unk_vfn_265();
    /*274*/ virtual void __unk_vfn_274();
    /*290*/ virtual void aiStep();
    /*295*/ virtual bool checkSpawnRules(bool);
    /*303*/ virtual void __unk_vfn_303();
    /*307*/ virtual void __unk_vfn_307();
    /*336*/ virtual float _getWalkTargetValue(class BlockPos const&);
    /*338*/ virtual void __unk_vfn_338();
    /*348*/ virtual void _serverAiMobStep();
    /*354*/ virtual void __unk_vfn_354();
    /*357*/ virtual bool canDealDamage();
    /*358*/ virtual enum LevelSoundEvent getSquishSound();
    /*359*/ virtual void setSlimeSize(int);
    /*360*/ virtual bool doPlayJumpSound();
    /*361*/ virtual bool doPlayLandSound();
    /*362*/ virtual void playJumpSound();
    /*363*/ virtual void playLandSound();
    /*364*/ virtual void decreaseSquish();
    /*365*/ virtual class OwnerPtrT<struct EntityRefTraits> createChild(int);
    /*
    inline bool useNewAi() const{
        bool (Slime::*rv)() const;
        *((void**)&rv) = dlsym("?useNewAi@Slime@@UEBA_NXZ");
        return (this->*rv)();
    }
    */
    MCAPI Slime(class ActorDefinitionGroup*, struct ActorDefinitionIdentifier const&, class EntityContext&);
    MCAPI float getOldSquishValue() const;
    MCAPI float getSquishValue() const;

protected:
    MCAPI void justJumped();
    MCAPI void justLanded();

private:

};