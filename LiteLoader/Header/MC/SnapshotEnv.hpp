/**
 * @file  SnapshotEnv.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Core.hpp"
#include "TransactionalWorldBlockTarget.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class SnapshotEnv.
 *
 */
class SnapshotEnv : public TransactionalWorldBlockTarget {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SNAPSHOTENV
public:
    class SnapshotEnv& operator=(class SnapshotEnv const &) = delete;
    SnapshotEnv(class SnapshotEnv const &) = delete;
    SnapshotEnv() = delete;
#endif

public:
    virtual ~SnapshotEnv();
    virtual class leveldb::Status NewSequentialFile(std::string const &, class leveldb::SequentialFile **);
    virtual class leveldb::Status NewRandomAccessFile(std::string const &, class leveldb::RandomAccessFile **);
    virtual class leveldb::Status NewWritableFile(std::string const &, class leveldb::WritableFile **);
    virtual class leveldb::Status NewAppendableFile(std::string const &, class leveldb::WritableFile **);
    virtual class leveldb::Status DeleteFileA(std::string const &);
    virtual class leveldb::Status RenameFile(std::string const &, std::string const &);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_SNAPSHOTENV
#endif
    MCAPI SnapshotEnv(class leveldb::Env *);
    MCAPI std::vector<struct SnapshotFilenameAndLength> createSnapshot(class Core::Path const &);
    MCAPI void releaseSnapshot();

//private:
    MCAPI bool _isQueuedForRemoval(class Core::PathBuffer<std::string> const &);

private:

};