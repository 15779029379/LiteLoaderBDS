/**
 * @file  SpyglassItem.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"
#include "Item.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class SpyglassItem.
 *
 */
class SpyglassItem : public Item {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SPYGLASSITEM
public:
    class SpyglassItem& operator=(class SpyglassItem const &) = delete;
    SpyglassItem(class SpyglassItem const &) = delete;
    SpyglassItem() = delete;
#endif

public:
    virtual ~SpyglassItem();
    virtual void __unk_vfn_7();
    virtual void __unk_vfn_11();
    virtual void __unk_vfn_14();
    virtual void __unk_vfn_16();
    virtual void __unk_vfn_52();
    virtual void __unk_vfn_54();
    virtual void __unk_vfn_67();
    virtual float getViewDamping() const;
    virtual void __unk_vfn_71();
    virtual void __unk_vfn_72();
    virtual void __unk_vfn_73();
    virtual void __unk_vfn_76();
    virtual void __unk_vfn_80();
    virtual void __unk_vfn_81();
    virtual class ItemStack & use(class ItemStack &, class Player &) const;
    virtual enum ItemUseMethod useTimeDepleted(class ItemStack &, class Level *, class Player *) const;
    virtual void releaseUsing(class ItemStack &, class Player *, int) const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_SPYGLASSITEM
#endif
    MCAPI SpyglassItem(std::string const &, short);

};