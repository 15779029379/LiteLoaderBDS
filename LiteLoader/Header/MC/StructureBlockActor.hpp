// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#include "BlockActor.hpp"
#define EXTRA_INCLUDE_PART
#include "Extra/StructureBlockActorAPI.hpp"
#undef EXTRA_INCLUDE_PART
class StructureBlockActor : public BlockActor {
#include "Extra/StructureBlockActorAPI.hpp"
public:
    virtual ~StructureBlockActor();
    virtual void load(class Level&, class CompoundTag const&, class DataLoadHelper&);
    virtual bool save(class CompoundTag&);
    virtual void saveBlockData(class CompoundTag&, class BlockSource&);
    virtual void loadBlockData(class CompoundTag const&, class BlockSource&, class DataLoadHelper&);
    virtual void onCustomTagLoadDone(class BlockSource&);
    virtual void tick(class BlockSource&);
    virtual void onChanged(class BlockSource&);
    virtual void onPlace(class BlockSource&);
    virtual void unk_vfn_12();
    virtual void onRemoved(class BlockSource&);
    virtual void triggerEvent(int, int);
    virtual void unk_vfn_15();
    virtual void unk_vfn_16();
    virtual void unk_vfn_17();
    virtual void unk_vfn_18();
    virtual class BlockActor* getCrackEntity(class BlockSource&, class BlockPos const&);
    virtual void unk_vfn_21();
    virtual std::string getName();
    virtual std::string getImmersiveReaderText(class BlockSource&);
    virtual void unk_vfn_26();
    virtual class PistonBlockActor* getOwningPiston(class BlockSource&);
    virtual void unk_vfn_28();
    virtual void unk_vfn_29();
    virtual void unk_vfn_30();
    virtual void unk_vfn_31();
    virtual void unk_vfn_32();
    virtual void unk_vfn_33();
    virtual std::unique_ptr<class BlockActorDataPacket> _getUpdatePacket(class BlockSource&);
    virtual void _onUpdatePacket(class CompoundTag const&, class BlockSource&);
    virtual bool _playerCanUpdate(class Player const&);

public:
    MCAPI class StructureEditorData const& getStructureData() const;
    MCAPI void setPowered(class BlockSource&, class BlockPos const&, bool, bool);
    MCAPI void setStructureData(class StructureEditorData const&);

    MCAPI static float const MAX_WIREFRAME_RENDER_DISTANCE;
    MCAPI static class mce::Color const X_AXIS_COLOR;
    MCAPI static class mce::Color const Y_AXIS_COLOR;
    MCAPI static class mce::Color const Z_AXIS_COLOR;

private:
    MCAPI bool _loadStructure(class BlockSource&, class BlockPos const&, class BaseGameVersion const&);
    MCAPI bool _saveStructure(class BlockSource&, class BlockPos const&, bool);
    MCAPI void _trigger(class BlockSource&, class BlockPos const&, class BaseGameVersion const&, bool);
};