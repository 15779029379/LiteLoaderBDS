/**
 * @file  StructureDataLoadHelper.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Direction.hpp"
#include "InternalComponentRegistry.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class StructureDataLoadHelper.
 *
 */
class StructureDataLoadHelper {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_STRUCTUREDATALOADHELPER
public:
    class StructureDataLoadHelper& operator=(class StructureDataLoadHelper const &) = delete;
    StructureDataLoadHelper(class StructureDataLoadHelper const &) = delete;
    StructureDataLoadHelper() = delete;
#endif

public:
    virtual ~StructureDataLoadHelper();
    virtual class Vec3 loadPosition(class Vec3 const &);
    virtual class BlockPos loadBlockPosition(class BlockPos const &);
    virtual class BlockPos loadBlockPositionOffset(class BlockPos const &);
    virtual void __unk_vfn_4();
    virtual float loadRotationDegreesY(float);
    virtual void __unk_vfn_6();
    virtual float loadRotationRadiansY(float);
    virtual unsigned char loadFacingID(unsigned char);
    virtual class Vec3 loadDirection(class Vec3 const &);
    virtual enum Direction::Type loadDirection(enum Direction::Type);
    virtual enum Rotation loadRotation(enum Rotation);
    virtual enum Mirror loadMirror(enum Mirror);
    virtual struct ActorUniqueID loadActorUniqueID(struct ActorUniqueID);
    virtual struct ActorUniqueID loadOwnerID(struct ActorUniqueID);
    virtual struct InternalComponentRegistry::ComponentInfo const * loadActorInternalComponentInfo(class std::unordered_map<class HashedString, struct InternalComponentRegistry::ComponentInfo, struct std::hash<class HashedString>, struct std::equal_to<class HashedString>, class std::allocator<struct std::pair<class HashedString const, struct InternalComponentRegistry::ComponentInfo>>> const &, std::string const &);
    virtual enum DataLoadHelperType getType() const;
    virtual bool shouldResetTime();
    virtual struct ActorUniqueID _generateNewID();
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_STRUCTUREDATALOADHELPER
    MCVAPI float loadRotationDegreesX(float);
    MCVAPI float loadRotationRadiansX(float);
#endif
    MCAPI StructureDataLoadHelper(class BlockPos const &, class BlockPos const &, class Vec3 const &, struct ActorUniqueID, enum Rotation, enum Mirror, class Level &);

};