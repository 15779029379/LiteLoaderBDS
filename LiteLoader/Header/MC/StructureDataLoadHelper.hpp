// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "Direction.hpp"
#define EXTRA_INCLUDE_PART_STRUCTUREDATALOADHELPER
#include "Extra/StructureDataLoadHelperAPI.hpp"
#undef EXTRA_INCLUDE_PART_STRUCTUREDATALOADHELPER
class StructureDataLoadHelper {
#include "Extra/StructureDataLoadHelperAPI.hpp"
public:
    /*0*/ virtual ~StructureDataLoadHelper();
    /*1*/ virtual class Vec3 loadPosition(class Vec3 const&);
    /*2*/ virtual class BlockPos loadBlockPosition(class BlockPos const&);
    /*3*/ virtual class BlockPos loadBlockPositionOffset(class BlockPos const&);
    /*4*/ virtual void __unk_vfn_0();
    /*5*/ virtual float loadRotationDegreesY(float);
    /*6*/ virtual void __unk_vfn_1();
    /*7*/ virtual float loadRotationRadiansY(float);
    /*8*/ virtual unsigned char loadFacingID(unsigned char);
    /*9*/ virtual class Vec3 loadDirection(class Vec3 const&);
    /*10*/ virtual int /*enum enum Direction::Type*/ loadDirection(int /*enum enum Direction::Type*/);
    /*11*/ virtual int /*enum enum Rotation*/ loadRotation(int /*enum enum Rotation*/);
    /*12*/ virtual int /*enum enum Mirror*/ loadMirror(int /*enum enum Mirror*/);
    /*13*/ virtual struct ActorUniqueID loadActorUniqueID(struct ActorUniqueID);
    /*14*/ virtual struct ActorUniqueID loadOwnerID(struct ActorUniqueID);
    /*15*/ virtual int /*enum enum DataLoadHelperType*/ getType() const;
    /*16*/ virtual bool shouldResetTime();
    /*17*/ virtual struct ActorUniqueID _generateNewID();
    /*
    inline float loadRotationDegreesX(float a0){
        float (StructureDataLoadHelper::*rv)(float);
        *((void**)&rv) = dlsym("?loadRotationDegreesX@StructureDataLoadHelper@@UEAAMM@Z");
        return (this->*rv)(std::forward<float>(a0));
    }
    inline float loadRotationRadiansX(float a0){
        float (StructureDataLoadHelper::*rv)(float);
        *((void**)&rv) = dlsym("?loadRotationRadiansX@StructureDataLoadHelper@@UEAAMM@Z");
        return (this->*rv)(std::forward<float>(a0));
    }
    */

protected:

private:
};