// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#define EXTRA_INCLUDE_PART
#include "Extra/StructureFeatureAPI.hpp"
#undef EXTRA_INCLUDE_PART
class StructureFeature {
#include "Extra/StructureFeatureAPI.hpp"
public:
    virtual ~StructureFeature();
    virtual bool postProcess(class BlockSource&, class Random&, int, int);
    virtual bool getNearestGeneratedFeature(class Dimension&, class BiomeSource const&, class BlockPos const&, class BlockPos&, bool);
    virtual bool isFeatureChunk(class Dimension const&, class BiomeSource const&, class Random&, class ChunkPos const&, unsigned int);
    virtual int getFeatureChunkSampleHeight(class Dimension const&);
    virtual std::unique_ptr<class StructureStart> createStructureStart(class Dimension&, class BiomeSource const&, class Random&, class ChunkPos const&, class IPreliminarySurfaceProvider const&);
    virtual class StructureStart* getStructureAt(int, int, int);

public:
    MCAPI StructureFeature(unsigned int);
    MCAPI void createBlueprints(class Dimension&, class ChunkPos const&, class BiomeSource const&, class IPreliminarySurfaceProvider const&);
    MCAPI void debugRender();
    MCAPI std::vector<class ChunkPos> findFarAwayStructures(class buffer_span<class ChunkPos>, unsigned int);
    MCAPI void foreachIntersectingStructureStart(class BoundingBox const&, class std::function<void(class StructureStart&)>);
    MCAPI void garbageCollectBlueprints(class buffer_span<class ChunkPos>, unsigned int);
    MCAPI void generateHardcodedMobSpawns(class LevelChunk&);
    MCAPI bool isInsideBoundingFeature(int, int, int);
    MCAPI void postProcessMobsAt(class BlockSource&, int, int, class Random&);
    MCAPI void waitForFeatureBlueprints();

    MCAPI static bool findNearestFeaturePositionBySpacing(class Dimension&, class StructureFeature&, class BiomeSource const&, class BlockPos const&, class BlockPos&, int, int, int, bool, int, bool);
    MCAPI static void setRandomSeedFor(class Random&, int, int, int, unsigned int);
};