// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#define EXTRA_INCLUDE_PART
#include "Extra/StructurePoolElementAPI.hpp"
#undef EXTRA_INCLUDE_PART
class StructurePoolElement {
#include "Extra/StructurePoolElementAPI.hpp"
public:
    virtual class BlockPos getSize(int /*enum Rotation*/);
    virtual std::vector<class JigsawBlockInfo> getJigsawMarkers(class BlockPos, class LegacyStructureSettings&, class BlockSource*);
    virtual std::vector<class JigsawBlockInfo> getJigsawMarkers(class BlockPos, int /*enum Rotation*/);
    virtual class BoundingBox getBoundingBox(class BlockPos, int /*enum Rotation*/);
    virtual void unk_vfn_4();
    virtual void unk_vfn_5();
    virtual void unk_vfn_6();
    virtual bool place(class BlockSource&, class BlockPos, int /*enum Rotation*/, class BoundingBox, class Random&, class std::unordered_map<class BlockPos, class std::optional<struct ActorDefinitionIdentifier>, struct std::hash<class BlockPos>, struct std::equal_to<class BlockPos>, class std::allocator<struct std::pair<class BlockPos const, class std::optional<struct ActorDefinitionIdentifier>>>>&, class BlockPos);
    virtual void placeActors(class BlockSource&, class BlockPos, int /*enum Rotation*/, class Random&);
    virtual void handleJigsawBlock(class BlockSource&, class JigsawBlockInfo&, class LegacyStructureSettings&);
    virtual void handleDataMarker(class BlockSource&, class BlockPos, std::string, class std::unordered_map<class BlockPos, class std::optional<struct ActorDefinitionIdentifier>, struct std::hash<class BlockPos>, struct std::equal_to<class BlockPos>, class std::allocator<struct std::pair<class BlockPos const, class std::optional<struct ActorDefinitionIdentifier>>>>&);
    virtual void unk_vfn_11();
    virtual ~StructurePoolElement();

private:
    MCAPI class StructurePoolElement::LazyTemplate const& _getTemplate() const;
};