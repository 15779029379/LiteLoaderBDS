/**
 * @file  StructureTemplateData.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class StructureTemplateData.
 *
 */
class StructureTemplateData {

#define AFTER_EXTRA
// Add Member There
public:
    void* __vftable;
    int mFormatVersion;
    BlockPos mSize;
    BlockPos mStructureWorldOrigin;
    std::vector<int> mBlockIndices;
    std::vector<int> mExtraBlockIndices;
    std::unordered_map<std::string, StructureBlockPalette> mPalettes;
    std::vector<std::unique_ptr<CompoundTag>> mEntityData;
	
#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_STRUCTURETEMPLATEDATA
public:
    class StructureTemplateData& operator=(class StructureTemplateData const &) = delete;
    StructureTemplateData(class StructureTemplateData const &) = delete;
#endif

public:
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_STRUCTURETEMPLATEDATA
#endif
    MCAPI StructureTemplateData();
    MCAPI void addEntityData(std::unique_ptr<class CompoundTag>);
    MCAPI void addPalette(std::string const &, class StructureBlockPalette);
    MCAPI void clear();
    MCAPI std::vector<int> const & getBlockIndices() const;
    MCAPI std::vector<std::unique_ptr<class CompoundTag>> const & getEntityData() const;
    MCAPI std::vector<int> const & getExtraBlockIndices() const;
    MCAPI class StructureBlockPalette const * getPalette(std::string const &) const;
    MCAPI class BlockPos const & getSize() const;
    MCAPI class BlockPos const & getStructureWorldOrigin() const;
    MCAPI bool load(class CompoundTag const &);
    MCAPI std::unique_ptr<class CompoundTag> save() const;
    MCAPI void setBlockIndices(std::vector<int>);
    MCAPI void setExtraBlockIndices(std::vector<int>);
    MCAPI void setSize(class BlockPos const &);
    MCAPI void setStructureWorldOrigin(class BlockPos const &);
MCAPI static std::string const DEFAULT_PALETTE_NAME;

//protected:
    MCAPI enum StructureLoadResult _parseBlockIndices(class CompoundTag const &);
    MCAPI enum StructureLoadResult _parseEntities(class CompoundTag const &);
    MCAPI enum StructureLoadResult _parseFormatVersion(class CompoundTag const &);
    MCAPI enum StructureLoadResult _parsePalettes(class CompoundTag const &);
    MCAPI enum StructureLoadResult _parseSize(class CompoundTag const &);
    MCAPI void _saveBlockIndices(class CompoundTag &) const;
    MCAPI void _savePalettes(class CompoundTag &) const;
    MCAPI void _saveStructureTag(class CompoundTag &) const;

//private:
    MCAPI void _contentErrorMissingField(std::string const &) const;

protected:

private:

};