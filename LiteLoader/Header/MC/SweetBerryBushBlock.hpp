/**
 * @file  SweetBerryBushBlock.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "BushBlock.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class SweetBerryBushBlock.
 *
 */
class SweetBerryBushBlock : public BushBlock {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_SWEETBERRYBUSHBLOCK
public:
    class SweetBerryBushBlock& operator=(class SweetBerryBushBlock const &) = delete;
    SweetBerryBushBlock(class SweetBerryBushBlock const &) = delete;
    SweetBerryBushBlock() = delete;
#endif

public:
    virtual ~SweetBerryBushBlock();
    virtual bool hasTag(class BlockSource &, class BlockPos const &, class Block const &, std::string const &) const;
    virtual class AABB const & getAABB(class IConstBlockSource const &, class BlockPos const &, class Block const &, class AABB &, bool) const;
    virtual void __unk_vfn_19();
    virtual void __unk_vfn_29();
    virtual void __unk_vfn_30();
    virtual void __unk_vfn_32();
    virtual void __unk_vfn_33();
    virtual void __unk_vfn_34();
    virtual void __unk_vfn_36();
    virtual void __unk_vfn_37();
    virtual void __unk_vfn_38();
    virtual void __unk_vfn_39();
    virtual void __unk_vfn_40();
    virtual void __unk_vfn_41();
    virtual void __unk_vfn_42();
    virtual void __unk_vfn_44();
    virtual void __unk_vfn_45();
    virtual void __unk_vfn_46();
    virtual void __unk_vfn_47();
    virtual void __unk_vfn_48();
    virtual void __unk_vfn_49();
    virtual void __unk_vfn_59();
    virtual void __unk_vfn_60();
    virtual bool canContainLiquid() const;
    virtual bool checkIsPathable(class Actor &, class BlockPos const &, class BlockPos const &) const;
    virtual void __unk_vfn_73();
    virtual void __unk_vfn_80();
    virtual bool onFertilized(class BlockSource &, class BlockPos const &, class Actor *, enum FertilizerType) const;
    virtual bool canBeFertilized(class BlockSource &, class BlockPos const &, class Block const &) const;
    virtual bool mayPlace(class BlockSource &, class BlockPos const &) const;
    virtual bool mayPlaceOn(class BlockSource &, class BlockPos const &) const;
    virtual int getResourceCount(class Randomize &, class Block const &, int) const;
    virtual class ItemInstance asItemInstance(class BlockSource &, class BlockPos const &, class Block const &) const;
    virtual void spawnResources(class BlockSource &, class BlockPos const &, class Block const &, class Randomize &, std::vector<class Item const *> *, float, int) const;
    virtual void __unk_vfn_105();
    virtual bool attack(class Player *, class BlockPos const &) const;
    virtual void entityInside(class BlockSource &, class BlockPos const &, class Actor &) const;
    virtual void executeEvent(class BlockSource &, class BlockPos const &, class Block const &, std::string const &, class Actor &) const;
    virtual void __unk_vfn_124();
    virtual void __unk_vfn_126();
    virtual void __unk_vfn_127();
    virtual void __unk_vfn_132();
    virtual class AABB const & getVisualShape(class Block const &, class AABB &, bool) const;
    virtual int getVariant(class Block const &) const;
    virtual void __unk_vfn_148();
    virtual void __unk_vfn_157();
    virtual bool dealsContactDamage(class Actor const &, class Block const &, bool) const;
    virtual void __unk_vfn_168();
    virtual void __unk_vfn_169();
    virtual void __unk_vfn_170();
    virtual void randomTick(class BlockSource &, class BlockPos const &, class Random &) const;
    virtual void __unk_vfn_177();
    virtual bool use(class Player &, class BlockPos const &, unsigned char) const;
    virtual bool canSurvive(class BlockSource &, class BlockPos const &) const;
    virtual enum BlockRenderLayer getRenderLayer() const;
    virtual enum BlockRenderLayer getRenderLayer(class Block const &, class BlockSource &, class BlockPos const &) const;
    virtual void __unk_vfn_188();
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_SWEETBERRYBUSHBLOCK
    MCVAPI bool canBeSilkTouched() const;
    MCVAPI bool isInteractiveBlock() const;
#endif
    MCAPI SweetBerryBushBlock(std::string const &, int);
MCAPI static class Vec3 const SLOWDOWN_MULTIPLIER;

//private:
    MCAPI bool _growBush(class BlockSource &, class BlockPos const &) const;
    MCAPI bool _pickBerries(class BlockSource &, class BlockPos const &, class Block const &) const;
    MCAPI void _popBerries(class BlockSource &, class BlockPos const &, int const &, std::vector<class Item const *> *) const;

private:

};