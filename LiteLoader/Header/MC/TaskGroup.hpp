// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#include "Types.h"
class TaskGroup : public BackgroundTask<class TaskResult, void> {
public:
    virtual ~TaskGroup();
    virtual void taskRegister(class std::shared_ptr<class BackgroundTaskBase>);
    virtual void requeueTask(class std::shared_ptr<class BackgroundTaskBase>, bool);
    virtual int /*enum TaskGroupState*/ getState();
    virtual void processCoroutines();
    virtual void taskComplete(class gsl::not_null<class BackgroundTaskBase*>);
    virtual void unk_vfn_6();
    virtual void unk_vfn_7();
    virtual void unk_vfn_8();
    virtual void unk_vfn_9();
    virtual void unk_vfn_10();
    virtual void unk_vfn_11();
    virtual void unk_vfn_12();
    virtual void unk_vfn_13();
    virtual void unk_vfn_14();
    virtual();
    virtual void unk_vfn_17();
    virtual void unk_vfn_18();
    virtual void unk_vfn_19();
    virtual void unk_vfn_20();
    virtual void unk_vfn_21();
    virtual void unk_vfn_22();
    virtual void unk_vfn_23();
    virtual void unk_vfn_24();
    virtual();
    virtual void unk_vfn_27();
    virtual void unk_vfn_28();
    virtual void unk_vfn_29();
    virtual void unk_vfn_30();
    virtual void unk_vfn_31();
    virtual void unk_vfn_32();
    virtual void unk_vfn_33();
    virtual void unk_vfn_34();
    virtual void unk_vfn_35();
    virtual();
    virtual void unk_vfn_37();
    virtual void unk_vfn_38();

public:
    MCAPI void disableOwnerThreadChecks();
    MCAPI void flush(class std::function<void(void)>);
    MCAPI class Scheduler& getScheduler();
    MCAPI bool isEmpty() const;
    MCAPI class std::shared_ptr<class Bedrock::Threading::IAsyncResult<void>> queue(struct TaskStartInfoEx<void> const&, class std::function<class TaskResult(void)>&&, class std::function<void(void)>&&);
    MCAPI class std::shared_ptr<class Bedrock::Threading::IAsyncResult<void>> queue(class gsl::basic_string_span<char const, -1>, class std::function<class TaskResult(void)>&&, class std::function<void(void)>&&);
    MCAPI class std::shared_ptr<class Bedrock::Threading::IAsyncResult<void>> queueSync(struct TaskStartInfoEx<void> const&, class std::function<class TaskResult(void)>&&);
    MCAPI class std::shared_ptr<class Bedrock::Threading::IAsyncResult<void>> queueSync(class gsl::basic_string_span<char const, -1>, class std::function<class TaskResult(void)>&&);
    MCAPI void sync_DEPRECATED_ASK_TOMMO(class std::function<void(void)>);

    MCAPI static class std::shared_ptr<class Bedrock::Threading::IAsyncResult<void>> queueChild(struct TaskStartInfoEx<void> const&, class std::function<class TaskResult(void)>&&, class std::function<void(void)>&&);
    MCAPI static class std::shared_ptr<class Bedrock::Threading::IAsyncResult<void>> queueChildSync(struct TaskStartInfoEx<void> const&, class std::function<class TaskResult(void)>&&);

private:
    MCAPI void _forAllTasks(class std::unique_lock<class std::mutex>&, class std::function<void(class std::shared_ptr<class BackgroundTaskBase> const&)>);
    MCAPI bool _isEmptyInternal() const;
    MCAPI void _queueInternal(class std::shared_ptr<class BackgroundTaskBase>);

    MCAPI static class TaskGroup* getCurrentTaskGroup();
};