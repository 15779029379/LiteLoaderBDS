// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "Bedrock.hpp"
#define EXTRA_INCLUDE_PART_TASKGROUP
#include "Extra/TaskGroupAPI.hpp"
#undef EXTRA_INCLUDE_PART_TASKGROUP
class TaskGroup {
#include "Extra/TaskGroupAPI.hpp"
public:
    /*0*/ virtual ~TaskGroup();
    /*1*/ virtual void taskRegister(class std::shared_ptr<class BackgroundTaskBase>);
    /*2*/ virtual void requeueTask(class std::shared_ptr<class BackgroundTaskBase>, bool);
    /*3*/ virtual int /*enum enum TaskGroupState*/ getState() const;
    /*4*/ virtual void processCoroutines();
    /*5*/ virtual void taskComplete(class gsl::not_null<class BackgroundTaskBase* >);

    MCAPI void disableOwnerThreadChecks();
    MCAPI void flush(class std::function<void (void)>);
    MCAPI class Scheduler& getScheduler();
    MCAPI bool isEmpty() const;
    MCAPI class std::shared_ptr<class Bedrock::Threading::IAsyncResult<void> > queue(struct TaskStartInfoEx<void> const&, class std::function<class TaskResult (void)>&&, class std::function<void (void)>&&);
    MCAPI class std::shared_ptr<class Bedrock::Threading::IAsyncResult<void> > queue(class gsl::basic_string_span<char const, -1>, class std::function<class TaskResult (void)>&&, class std::function<void (void)>&&);
    MCAPI class std::shared_ptr<class Bedrock::Threading::IAsyncResult<void> > queueSync(struct TaskStartInfoEx<void> const&, class std::function<class TaskResult (void)>&&);
    MCAPI class std::shared_ptr<class Bedrock::Threading::IAsyncResult<void> > queueSync(class gsl::basic_string_span<char const, -1>, class std::function<class TaskResult (void)>&&);
    MCAPI void sync_DEPRECATED_ASK_TOMMO(class std::function<void (void)>);
    MCAPI static class std::shared_ptr<class Bedrock::Threading::IAsyncResult<void> > queueChildSync_DEPRECATED(struct TaskStartInfoEx<void> const&, class std::function<class TaskResult (void)>&&);
    MCAPI static class std::shared_ptr<class Bedrock::Threading::IAsyncResult<void> > queueChild_DEPRECATED(struct TaskStartInfoEx<void> const&, class std::function<class TaskResult (void)>&&, class std::function<void (void)>&&);

protected:

private:
    MCAPI void _forAllTasks(class std::unique_lock<class std::mutex>&, class std::function<void (class std::shared_ptr<class BackgroundTaskBase> const& )>);
    MCAPI bool _isEmptyInternal() const;
    MCAPI void _queueInternal(class std::shared_ptr<class BackgroundTaskBase>);
    MCAPI static class TaskGroup* getCurrentTaskGroup();
};