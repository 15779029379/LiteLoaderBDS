/**
 * @file  TaskQueueImpl.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

/**
 * @brief MC class TaskQueueImpl.
 *
 */
class TaskQueueImpl {

#define AFTER_EXTRA

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_TASKQUEUEIMPL
public:
    class TaskQueueImpl& operator=(class TaskQueueImpl const &) = delete;
    TaskQueueImpl(class TaskQueueImpl const &) = delete;
#endif

public:
    virtual struct XTaskQueueObject * GetHandle();
    virtual long GetPortContext(enum XTaskQueuePort, struct ITaskQueuePortContext **);
    virtual long RegisterWaitHandle(enum XTaskQueuePort, void *, void *, void ( *)(void *, bool), struct XTaskQueueRegistrationToken *);
    virtual void UnregisterWaitHandle(struct XTaskQueueRegistrationToken);
    virtual long RegisterSubmitCallback(void *, void ( *)(void *, struct XTaskQueueObject *, enum XTaskQueuePort), struct XTaskQueueRegistrationToken *);
    virtual void UnregisterSubmitCallback(struct XTaskQueueRegistrationToken);
    virtual bool CanTerminate();
    virtual bool CanClose();
    virtual long Terminate(bool, void *, void ( *)(void *));
    virtual ~TaskQueueImpl();
    virtual void RundownObject();
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_TASKQUEUEIMPL
#endif
    MCAPI long Initialize(struct XTaskQueuePortObject *, struct XTaskQueuePortObject *);
    MCAPI long Initialize(enum XTaskQueueDispatchMode, enum XTaskQueueDispatchMode, bool, bool);
    MCAPI TaskQueueImpl();

//private:
    MCAPI static void OnTerminationCallback(void *);

private:

};