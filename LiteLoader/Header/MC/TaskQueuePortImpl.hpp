/**
 * @file  TaskQueuePortImpl.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA

#undef BEFORE_EXTRA

/**
 * @brief MC class TaskQueuePortImpl.
 *
 */
class TaskQueuePortImpl {

#define AFTER_EXTRA

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_TASKQUEUEPORTIMPL
public:
    class TaskQueuePortImpl& operator=(class TaskQueuePortImpl const &) = delete;
    TaskQueuePortImpl(class TaskQueuePortImpl const &) = delete;
#endif

public:
    virtual struct XTaskQueuePortObject * GetHandle();
    virtual long QueueItem(struct ITaskQueuePortContext *, unsigned int, void *, void ( *)(void *, bool));
    virtual long RegisterWaitHandle(struct ITaskQueuePortContext *, void *, void *, void ( *)(void *, bool), struct XTaskQueueRegistrationToken *);
    virtual void UnregisterWaitHandle(struct XTaskQueueRegistrationToken);
    virtual long PrepareTerminate(struct ITaskQueuePortContext *, void *, void ( *)(void *), void **);
    virtual void CancelTermination(void *);
    virtual void Terminate(void *);
    virtual long Attach(struct ITaskQueuePortContext *);
    virtual void Detach(struct ITaskQueuePortContext *);
    virtual bool DrainOneItem();
    virtual bool Wait(struct ITaskQueuePortContext *, unsigned int);
    virtual bool IsEmpty();
    virtual long SuspendTermination(struct ITaskQueuePortContext *);
    virtual void ResumeTermination(struct ITaskQueuePortContext *);
    virtual ~TaskQueuePortImpl();
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_TASKQUEUEPORTIMPL
#endif
    MCAPI long Initialize(enum XTaskQueueDispatchMode);
    MCAPI TaskQueuePortImpl();

//private:
    MCAPI bool AppendEntry(struct TaskQueuePortImpl::QueueEntry const &, unsigned __int64, bool);
    MCAPI bool AppendWaitRegistrationEntry(struct TaskQueuePortImpl::WaitRegistration *, bool);
    MCAPI void CancelPendingEntries(struct ITaskQueuePortContext *, bool);
    MCAPI long InitializeWaitRegistration(struct TaskQueuePortImpl::WaitRegistration *);
    MCAPI void ScheduleTermination(struct TaskQueuePortImpl::TerminationEntry *);
    MCAPI void SubmitPendingCallback();
    MCAPI static void EraseQueue(class LocklessQueue<struct TaskQueuePortImpl::QueueEntry> *);
    MCAPI static void WaitCallback(struct _TP_CALLBACK_INSTANCE *, void *, struct _TP_WAIT *, unsigned long);

private:

};