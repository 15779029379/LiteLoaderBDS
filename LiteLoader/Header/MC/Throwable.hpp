// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"
#include "PredictableProjectile.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class Throwable : public PredictableProjectile {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_THROWABLE
public:
    class Throwable& operator=(class Throwable const&) = delete;
    Throwable(class Throwable const&) = delete;
    Throwable() = delete;
#endif

public:
    /*8*/ virtual void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const&);
    /*10*/ virtual void initializeComponents(enum Actor::InitializationMethod, class VariantParameterList const&);
    /*14*/ virtual ~Throwable();
    /*41*/ virtual void __unk_vfn_41();
    /*46*/ virtual void lerpMotion(class Vec3 const&);
    /*61*/ virtual void __unk_vfn_61();
    /*68*/ virtual void __unk_vfn_68();
    /*79*/ virtual float getShadowHeightOffs();
    /*82*/ virtual void __unk_vfn_82();
    /*87*/ virtual void __unk_vfn_87();
    /*94*/ virtual void __unk_vfn_94();
    /*97*/ virtual void __unk_vfn_97();
    /*104*/ virtual void __unk_vfn_104();
    /*106*/ virtual void __unk_vfn_106();
    /*107*/ virtual void __unk_vfn_107();
    /*108*/ virtual void __unk_vfn_108();
    /*112*/ virtual class Actor* findAttackTarget();
    /*172*/ virtual struct ActorUniqueID getSourceUniqueID() const;
    /*182*/ virtual void __unk_vfn_182();
    /*196*/ virtual void __unk_vfn_196();
    /*221*/ virtual void __unk_vfn_221();
    /*222*/ virtual void __unk_vfn_222();
    /*228*/ virtual void __unk_vfn_228();
    /*242*/ virtual void __unk_vfn_242();
    /*245*/ virtual void __unk_vfn_245();
    /*255*/ virtual void updateEntitySpecificMolangVariables(class RenderParams&);
    /*257*/ virtual void __unk_vfn_257();
    /*261*/ virtual void readAdditionalSaveData(class CompoundTag const&, class DataLoadHelper&);
    /*262*/ virtual void addAdditionalSaveData(class CompoundTag&);
    /*265*/ virtual void __unk_vfn_265();
    /*273*/ virtual void _onSizeUpdated();
    /*274*/ virtual void __unk_vfn_274();
    /*275*/ virtual float getThrowPower();
    /*276*/ virtual void __unk_vfn_276();
    /*277*/ virtual float getThrowUpAngleOffset();
    /*278*/ virtual float getGravity();
    /*279*/ virtual enum ParticleType getParticleType();
    /*
    inline bool stopUponGroundCollision() const{
        bool (Throwable::*rv)() const;
        *((void**)&rv) = dlsym("?stopUponGroundCollision@Throwable@@UEBA_NXZ");
        return (this->*rv)();
    }
    inline bool canMakeStepSound() const{
        bool (Throwable::*rv)() const;
        *((void**)&rv) = dlsym("?canMakeStepSound@Throwable@@MEBA_NXZ");
        return (this->*rv)();
    }
    inline void onHit(class HitResult const& a0){
        void (Throwable::*rv)(class HitResult const&);
        *((void**)&rv) = dlsym("?onHit@Throwable@@MEAAXAEBVHitResult@@@Z");
        return (this->*rv)(std::forward<class HitResult const&>(a0));
    }
    inline  ~Throwable(){
         (Throwable::*rv)();
        *((void**)&rv) = dlsym("??1Throwable@@UEAA@XZ");
        return (this->*rv)();
    }
    */
    MCAPI Throwable(class ActorDefinitionGroup*, struct ActorDefinitionIdentifier const&, class EntityContext&);
    MCAPI void shoot(class Mob&);
    MCAPI void shoot(class Vec3 const&, float, float, class Vec3 const&);

protected:

private:

};