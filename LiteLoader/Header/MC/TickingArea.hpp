// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#define EXTRA_INCLUDE_PART_TICKINGAREA
#include "Extra/TickingAreaAPI.hpp"
#undef EXTRA_INCLUDE_PART_TICKINGAREA
class TickingArea {
#include "Extra/TickingAreaAPI.hpp"
public:
    /*0*/ virtual ~TickingArea();
    /*1*/ virtual class mce::UUID const& getId() const;
    /*2*/ virtual std::string const& getName() const;
    /*3*/ virtual struct ActorUniqueID const& getEntityId() const;
    /*4*/ virtual bool isEntityOwned() const;
    /*5*/ virtual class BlockSource& getBlockSource();
    /*6*/ virtual bool isAlwaysActive() const;
    /*7*/ virtual float getMaxDistToPlayers() const;
    /*8*/ virtual void __unk_vfn_0();
    /*9*/ virtual void __unk_vfn_1();
    /*10*/ virtual struct TickingAreaDescription getDescription() const;
    /*11*/ virtual void tick(struct Tick const&, bool);
    /*12*/ virtual void tickSeasons(class Random&);
    /*13*/ virtual void updatePosition(class Vec3 const&);
    /*14*/ virtual void center();
    /*15*/ virtual class Actor* findOwner(unsigned char&);
    /*16*/ virtual bool entityHasBeenFound() const;
    /*17*/ virtual void setEntityFound();
    /*18*/ virtual bool isRemoved();
    /*19*/ virtual void remove();
    /*20*/ virtual void onComponentChanged(unsigned int, float, bool);
    /*
    inline class ITickingAreaView const& getView() const{
        class ITickingAreaView const& (TickingArea::*rv)() const;
        *((void**)&rv) = dlsym("?getView@TickingArea@@UEBAAEBVITickingAreaView@@XZ");
        return (this->*rv)();
    }
    inline class ITickingAreaView& getView(){
        class ITickingAreaView& (TickingArea::*rv)();
        *((void**)&rv) = dlsym("?getView@TickingArea@@UEAAAEAVITickingAreaView@@XZ");
        return (this->*rv)();
    }
    */

protected:

private:
    MCAPI void _save();
};