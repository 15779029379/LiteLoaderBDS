// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#define EXTRA_INCLUDE_PART_TICKINGAREA
#include "Extra/TickingAreaAPI.hpp"
#undef EXTRA_INCLUDE_PART_TICKINGAREA
class TickingArea {
#include "Extra/TickingAreaAPI.hpp"
public:
    virtual ~TickingArea();
    virtual void unk_vfn_1();
    virtual void unk_vfn_2();
    virtual void unk_vfn_3();
    virtual bool isEntityOwned();
    virtual void unk_vfn_5();
    virtual bool isAlwaysActive();
    virtual float getMaxDistToPlayers();
    virtual void unk_vfn_8();
    virtual void unk_vfn_9();
    virtual struct TickingAreaDescription getDescription();
    virtual void tick(struct Tick const&, bool);
    virtual void tickSeasons(class Random&);
    virtual void updatePosition(class Vec3 const&);
    virtual void center();
    virtual class Actor* findOwner(unsigned char&);
    virtual bool entityHasBeenFound();
    virtual void setEntityFound();
    virtual bool isRemoved();
    virtual void remove();
    virtual void onComponentChanged(unsigned int, float, bool);
    virtual void unk_vfn_21();
    virtual void unk_vfn_22();
    virtual void unk_vfn_23();
    virtual void unk_vfn_24();
    virtual void unk_vfn_25();
    virtual void unk_vfn_26();

public:
    MCAPI TickingArea(class Dimension&, class mce::UUID, std::string const&, struct Bounds const&, bool);
    MCAPI TickingArea(class Dimension&, class mce::UUID, struct Bounds const&, struct ActorUniqueID, float);
    MCAPI TickingArea(class Dimension&, class mce::UUID, struct Bounds const&, struct ActorUniqueID);


private:
    MCAPI TickingArea(class Dimension&, class mce::UUID, std::string const&, struct ActorUniqueID, struct Bounds const&, bool, float, bool);
    MCAPI void _save();
};