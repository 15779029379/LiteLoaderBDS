/**
 * @file  TickingArea.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class TickingArea.
 *
 */
class TickingArea {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_TICKINGAREA
public:
    class TickingArea& operator=(class TickingArea const &) = delete;
    TickingArea(class TickingArea const &) = delete;
    TickingArea() = delete;
#endif

public:
    virtual ~TickingArea();
    virtual class mce::UUID const & getId() const;
    virtual std::string const & getName() const;
    virtual struct ActorUniqueID const & getEntityId() const;
    virtual bool isEntityOwned() const;
    virtual void __unk_vfn_5();
    virtual void __unk_vfn_6();
    virtual struct Bounds const & getBounds() const;
    virtual bool isAlwaysActive() const;
    virtual float getMaxDistToPlayers() const;
    virtual void __unk_vfn_10();
    virtual void __unk_vfn_11();
    virtual struct TickingAreaDescription getDescription() const;
    virtual enum TickingAreaLoadMode getLoadMode() const;
    virtual void setLoadMode(enum TickingAreaLoadMode, class LevelStorage &);
    virtual bool isPreloadDone() const;
    virtual void tick(struct Tick const &, bool);
    virtual void tickSeasons(class Random &);
    virtual void updatePosition(class Vec3 const &);
    virtual void updateAndCenter(class LevelStorage &, struct Tick);
    virtual class Actor * findOwner(unsigned char &);
    virtual bool entityHasBeenFound() const;
    virtual void setEntityFound();
    virtual bool isRemoved();
    virtual void remove(class LevelStorage &);
    virtual void onComponentChanged(unsigned int, float, bool, class LevelStorage &);
    virtual void updateBlockSourceCurrentTick(struct Tick const &);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_TICKINGAREA
    MCVAPI class BlockSource & getBlockSource();
    MCVAPI class BlockSource const & getBlockSource() const;
    MCVAPI class ITickingAreaView & getView();
    MCVAPI class ITickingAreaView const & getView() const;
#endif
    MCAPI TickingArea(class Dimension &, class mce::UUID, std::string const &, struct Bounds const &, bool, enum TickingAreaLoadMode);
    MCAPI TickingArea(class Dimension &, class mce::UUID, struct Bounds const &, struct ActorUniqueID, float);
    MCAPI TickingArea(class Dimension &, class mce::UUID, struct Bounds const &, struct ActorUniqueID);

//private:
    MCAPI TickingArea(class Dimension &, class mce::UUID, std::string const &, struct ActorUniqueID, struct Bounds const &, bool, float, bool, enum TickingAreaLoadMode);
    MCAPI void _center(class LevelStorage &);
    MCAPI void _save(class LevelStorage &);

private:

};