/**
 * @file  TickingAreaView.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class TickingAreaView.
 *
 */
class TickingAreaView {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_TICKINGAREAVIEW
public:
    class TickingAreaView& operator=(class TickingAreaView const &) = delete;
    TickingAreaView(class TickingAreaView const &) = delete;
    TickingAreaView() = delete;
#endif

public:
    virtual ~TickingAreaView();
    virtual void init(struct Bounds const &, bool);
    virtual void tick(struct Tick const &, class BlockSource &, bool, bool);
    virtual void tickSeasons(class BlockSource &, class Random &);
    virtual class AutomaticID<class Dimension, int> getDimensionId() const;
    virtual struct Bounds const & getBounds() const;
    virtual bool isCircle() const;
    virtual bool isDoneLoading() const;
    virtual bool checkInitialLoadDone(struct Tick);
    virtual bool checkLoadedChunkNeighborsDone(class BlockSource const &, bool) const;
    virtual void move(struct Bounds const &);
    virtual std::unique_ptr<class ChunkViewSource> createChildSource();
    virtual class std::shared_ptr<class LevelChunk> getAvailableChunk(class ChunkPos const &);
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_TICKINGAREAVIEW
#endif
    MCAPI TickingAreaView(class ChunkSource &);
    MCAPI void unregisterChunkBuildOrderPolicy(class ChunkBuildOrderPolicyBase &);

//private:
    MCAPI bool _tickChunk(struct Tick const &, class BlockSource &, class Level &, class ChunkPos const &);

private:

};