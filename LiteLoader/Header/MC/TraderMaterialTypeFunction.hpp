// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"
#include "LootItemFunction.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class TraderMaterialTypeFunction : public LootItemFunction {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_TRADERMATERIALTYPEFUNCTION
public:
    class TraderMaterialTypeFunction& operator=(class TraderMaterialTypeFunction const&) = delete;
    TraderMaterialTypeFunction(class TraderMaterialTypeFunction const&) = delete;
    TraderMaterialTypeFunction() = delete;
#endif

public:
    /*0*/ virtual ~TraderMaterialTypeFunction();
    /*1*/ virtual void __unk_vfn_0();
    /*2*/ virtual void __unk_vfn_1();
    /*
    inline void apply(class ItemStack& a0, class Random& a1, class LootTableContext& a2){
        void (TraderMaterialTypeFunction::*rv)(class ItemStack&, class Random&, class LootTableContext&);
        *((void**)&rv) = dlsym("?apply@TraderMaterialTypeFunction@@UEAAXAEAVItemStack@@AEAVRandom@@AEAVLootTableContext@@@Z");
        return (this->*rv)(std::forward<class ItemStack&>(a0), std::forward<class Random&>(a1), std::forward<class LootTableContext&>(a2));
    }
    inline void apply(class ItemInstance& a0, class Random& a1, class LootTableContext& a2){
        void (TraderMaterialTypeFunction::*rv)(class ItemInstance&, class Random&, class LootTableContext&);
        *((void**)&rv) = dlsym("?apply@TraderMaterialTypeFunction@@UEAAXAEAVItemInstance@@AEAVRandom@@AEAVLootTableContext@@@Z");
        return (this->*rv)(std::forward<class ItemInstance&>(a0), std::forward<class Random&>(a1), std::forward<class LootTableContext&>(a2));
    }
    */
    MCAPI static std::unique_ptr<class LootItemFunction> deserialize(class Json::Value, std::vector<std::unique_ptr<class LootItemCondition>>&);

protected:

private:
    MCAPI void _applyBase(class ItemStackBase&, class Random&, class LootTableContext&) const;

};