/**
 * @file  TridentItem.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Json.hpp"
#include "Item.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class TridentItem.
 *
 */
class TridentItem : public Item {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_TRIDENTITEM
public:
    class TridentItem& operator=(class TridentItem const &) = delete;
    TridentItem(class TridentItem const &) = delete;
    TridentItem() = delete;
#endif

public:
    virtual ~TridentItem();
    virtual void __unk_vfn_7();
    virtual void __unk_vfn_11();
    virtual void __unk_vfn_14();
    virtual void __unk_vfn_16();
    virtual bool isThrowable() const;
    virtual short getMaxDamage() const;
    virtual int getAttackDamage() const;
    virtual void __unk_vfn_52();
    virtual void __unk_vfn_54();
    virtual bool canDestroyInCreative() const;
    virtual void appendFormattedHovertext(class ItemStackBase const &, class Level &, std::string &, bool) const;
    virtual int getEnchantSlot() const;
    virtual int getEnchantValue() const;
    virtual void __unk_vfn_67();
    virtual void __unk_vfn_71();
    virtual void __unk_vfn_72();
    virtual void __unk_vfn_73();
    virtual void __unk_vfn_76();
    virtual void __unk_vfn_80();
    virtual void __unk_vfn_81();
    virtual class ItemStack & use(class ItemStack &, class Player &) const;
    virtual bool dispense(class BlockSource &, class Container &, int, class Vec3 const &, unsigned char) const;
    virtual void releaseUsing(class ItemStack &, class Player *, int) const;
    virtual void hurtActor(class ItemStack &, class Actor &, class Mob &) const;
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_TRIDENTITEM
#endif
    MCAPI TridentItem(std::string const &, int);
MCAPI static int const CHARGE_THRESHOLD_TIME;
MCAPI static int const THROW_THRESHOLD_TIME;

//private:
    MCAPI class Actor * _setupProjectile(class Actor *, class ItemStack, bool) const;

private:

};