// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Packet.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class UpdateTradePacket : public Packet {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_UPDATETRADEPACKET
public:
    class UpdateTradePacket& operator=(class UpdateTradePacket const&) = delete;
    UpdateTradePacket(class UpdateTradePacket const&) = delete;
#endif

public:
    /*0*/ virtual ~UpdateTradePacket();
    /*1*/ virtual enum MinecraftPacketIds getId() const;
    /*2*/ virtual void __unk_vfn_0();
    /*3*/ virtual void write(class BinaryStream&) const;
    /*4*/ virtual bool disallowBatching() const;
    /*5*/ virtual enum StreamReadResult _read(class ReadOnlyBinaryStream&);
    /*
    inline std::string getName() const{
        std::string (UpdateTradePacket::*rv)() const;
        *((void**)&rv) = dlsym("?getName@UpdateTradePacket@@UEBA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ");
        return (this->*rv)();
    }
    inline  ~UpdateTradePacket(){
         (UpdateTradePacket::*rv)();
        *((void**)&rv) = dlsym("??1UpdateTradePacket@@UEAA@XZ");
        return (this->*rv)();
    }
    */
    MCAPI UpdateTradePacket(enum ContainerID, enum ContainerType, int, std::string const&, class CompoundTag&&, struct ActorUniqueID const&, struct ActorUniqueID const&, int, bool, bool);
    MCAPI UpdateTradePacket();

protected:

private:

};