// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#include "BlockSourceListener.hpp"
#define EXTRA_INCLUDE_PART_WEATHER
#include "Extra/WeatherAPI.hpp"
#undef EXTRA_INCLUDE_PART_WEATHER
class Weather : public BlockSourceListener {
#include "Extra/WeatherAPI.hpp"
public:
    virtual ~Weather();
    virtual void unk_vfn_1();
    virtual void onSourceDestroyed(class BlockSource&);
    virtual bool shouldTick(int /*enum SimulationType*/);
    virtual void unk_vfn_4();
    virtual void unk_vfn_6();
    virtual();
    virtual void unk_vfn_8();
    virtual void unk_vfn_9();
    virtual void unk_vfn_10();
    virtual void unk_vfn_11();
    virtual void unk_vfn_12();
    virtual void unk_vfn_13();
    virtual void unk_vfn_14();
    virtual void unk_vfn_15();
    virtual void unk_vfn_16();
    virtual void unk_vfn_17();
    virtual void unk_vfn_18();
    virtual void unk_vfn_19();
    virtual void unk_vfn_20();
    virtual void unk_vfn_21();
    virtual void unk_vfn_22();
    virtual void unk_vfn_23();
    virtual void unk_vfn_24();
    virtual void unk_vfn_25();
    virtual void unk_vfn_26();
    virtual void levelEvent(int /*enum LevelEvent*/, class Vec3 const&, int);
    virtual void unk_vfn_28();
    virtual void unk_vfn_29();
    virtual void unk_vfn_30();
    virtual void unk_vfn_31();
    virtual void unk_vfn_32();
    virtual void unk_vfn_33();

public:
    MCAPI Weather(class Dimension&, class IRandom&);
    MCAPI int calcSnowBlockDepth(class BlockSource&, class BlockPos const&, int) const;
    MCAPI bool canPlaceTopSnow(class BlockSource&, class BlockPos const&, bool, bool, int*) const;
    MCAPI float getFogLevel() const;
    MCAPI float getLightningLevel(float) const;
    MCAPI float getRainLevel(float) const;
    MCAPI bool isLightning() const;
    MCAPI bool isPrecipitatingAt(class BlockSource&, class BlockPos const&) const;
    MCAPI bool isRaining() const;
    MCAPI bool isRainingAt(class BlockSource&, class BlockPos const&) const;
    MCAPI bool isSnowingAt(class BlockSource&, class BlockPos const&) const;
    MCAPI void serverTick();
    MCAPI void setSkyFlashTime(int);
    MCAPI void setTargetLightningLevel(float);
    MCAPI void setTargetRainLevel(float);
    MCAPI void stop();
    MCAPI void tick();
    MCAPI bool tryToPlaceTopSnow(class BlockSource&, class BlockPos const&, bool, bool);

    MCAPI static int calcLightningCycleTime(class IRandom&);
    MCAPI static int calcRainCycleTime(class IRandom&);
    MCAPI static int calcRainDuration(class IRandom&);
    MCAPI static void rebuildTopSnowToDepth(class BlockSource&, class BlockPos const&, int);
};