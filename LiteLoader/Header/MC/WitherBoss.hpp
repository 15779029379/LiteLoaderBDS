// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"
#include "Actor.hpp"
#include "Monster.hpp"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class WitherBoss : public Monster {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_WITHERBOSS
public:
    class WitherBoss& operator=(class WitherBoss const&) = delete;
    WitherBoss(class WitherBoss const&) = delete;
    WitherBoss() = delete;
#endif

public:
    /*8*/ virtual void reloadHardcoded(enum Actor::InitializationMethod, class VariantParameterList const&);
    /*9*/ virtual void reloadHardcodedClient(enum Actor::InitializationMethod, class VariantParameterList const&);
    /*14*/ virtual ~WitherBoss();
    /*18*/ virtual void remove();
    /*26*/ virtual class Vec3 getFiringPos() const;
    /*41*/ virtual void __unk_vfn_41();
    /*53*/ virtual bool startRiding(class Actor&);
    /*61*/ virtual void __unk_vfn_61();
    /*68*/ virtual void __unk_vfn_68();
    /*76*/ virtual void setBlockMovementSlowdownMultiplier(class Vec3 const&);
    /*82*/ virtual void __unk_vfn_82();
    /*87*/ virtual void __unk_vfn_87();
    /*94*/ virtual void __unk_vfn_94();
    /*97*/ virtual void __unk_vfn_97();
    /*104*/ virtual void __unk_vfn_104();
    /*106*/ virtual void __unk_vfn_106();
    /*107*/ virtual void __unk_vfn_107();
    /*108*/ virtual void __unk_vfn_108();
    /*134*/ virtual bool isInvulnerableTo(class ActorDamageSource const&) const;
    /*140*/ virtual void onBounceStarted(class BlockPos const&, class Block const&);
    /*142*/ virtual void handleEntityEvent(enum ActorEvent, int);
    /*172*/ virtual struct ActorUniqueID getSourceUniqueID() const;
    /*174*/ virtual bool canFreeze() const;
    /*182*/ virtual void __unk_vfn_182();
    /*186*/ virtual void causeFallDamage(float, float, class ActorDamageSource);
    /*196*/ virtual void __unk_vfn_196();
    /*212*/ virtual bool canBeAffected(class MobEffectInstance const&) const;
    /*213*/ virtual bool canBeAffectedByArrow(class MobEffectInstance const&) const;
    /*221*/ virtual void __unk_vfn_221();
    /*222*/ virtual void __unk_vfn_222();
    /*228*/ virtual void __unk_vfn_228();
    /*242*/ virtual void __unk_vfn_242();
    /*245*/ virtual void __unk_vfn_245();
    /*247*/ virtual void die(class ActorDamageSource const&);
    /*257*/ virtual void __unk_vfn_257();
    /*258*/ virtual bool _hurt(class ActorDamageSource const&, int, bool, bool);
    /*261*/ virtual void readAdditionalSaveData(class CompoundTag const&, class DataLoadHelper&);
    /*262*/ virtual void addAdditionalSaveData(class CompoundTag&);
    /*265*/ virtual void __unk_vfn_265();
    /*274*/ virtual void __unk_vfn_274();
    /*284*/ virtual bool hurtEffects(class ActorDamageSource const&, int, bool, bool);
    /*290*/ virtual void aiStep();
    /*303*/ virtual void __unk_vfn_303();
    /*307*/ virtual void __unk_vfn_307();
    /*312*/ virtual int getArmorValue();
    /*338*/ virtual void __unk_vfn_338();
    /*347*/ virtual void newServerAiStep();
    /*348*/ virtual void _serverAiMobStep();
    /*354*/ virtual void __unk_vfn_354();
    /*
    inline void causeFallDamage(float a0, float a1, class ActorDamageSource a2){
        void (WitherBoss::*rv)(float, float, class ActorDamageSource);
        *((void**)&rv) = dlsym("?causeFallDamage@WitherBoss@@UEAAXMMVActorDamageSource@@@Z");
        return (this->*rv)(std::forward<float>(a0), std::forward<float>(a1), std::forward<class ActorDamageSource>(a2));
    }
    */
    MCAPI WitherBoss(class ActorDefinitionGroup*, struct ActorDefinitionIdentifier const&, class EntityContext&);
    MCAPI void awardSpawnWitherAchievement() const;
    MCAPI class Vec3 getHeadPos(int) const;
    MCAPI class Vec2 getHeadRot(int);
    MCAPI int getInvulnerableTicks() const;
    MCAPI float getOverlayAlpha();
    MCAPI float getSwellAmount(float) const;
    MCAPI bool hasAerialAttack() const;
    MCAPI void removeSkeleton();
    MCAPI void setAerialAttack(bool);
    MCAPI void setAlternativeTarget(int, struct ActorUniqueID);
    MCAPI void setInvulnerableTicks(int);
    MCAPI void setIsPathing(bool);
    MCAPI void setShotDelay(int);
    MCAPI void setWantsToMove(bool);
    MCAPI bool wantsToMove();
    MCAPI static class mce::UUID const MAX_HEALTH_CAP_UUID;
    MCAPI static bool canDestroy(class Block const&);

protected:

private:
    MCAPI void _destroyBlocks(class Level&, class AABB const&, class BlockSource&, int);
    MCAPI void _performRangedAttack(int, class Actor&);
    MCAPI void _performRangedAttack(int, class Vec3 const&, bool);
    MCAPI bool canShoot();
    MCAPI static int const TIME_BEFORE_MOVING;

};