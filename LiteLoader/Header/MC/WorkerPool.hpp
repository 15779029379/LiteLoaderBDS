// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#include "Bedrock.hpp"

#define BEFORE_EXTRA //DO NOT EDIT THIS LINE
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA //DO NOT EDIT THIS LINE

class WorkerPool {

#define AFTER_EXTRA //DO NOT EDIT THIS LINE
// Add Member There

#undef AFTER_EXTRA //DO NOT EDIT THIS LINE

public:
    /*0*/ virtual ~WorkerPool();

    /*
    inline  ~WorkerPool(){
         (WorkerPool::*rv)();
        *((void**)&rv) = dlsym("??1WorkerPool@@UEAA@XZ");
        return (this->*rv)();
    }
    */

    MCAPI WorkerPool(std::string, class Scheduler&);
    MCAPI WorkerPool(std::string, unsigned __int64, class Bedrock::Threading::OSThreadPriority const&, class std::optional<unsigned __int64>, bool);
    MCAPI void queue(class std::shared_ptr<class BackgroundTaskBase>, bool);
    MCAPI unsigned __int64 size() const;
    MCAPI class std::shared_ptr<class BackgroundTaskBase> tryPop(int);

protected:

    MCAPI static void _registerPool(class WorkerPool&);
    MCAPI static class SmallSet<class WorkerPool* > sAllPools;
    MCAPI static class std::mutex sAllPoolsMutex;

private:

    MCAPI bool _checkPendingWork();
};