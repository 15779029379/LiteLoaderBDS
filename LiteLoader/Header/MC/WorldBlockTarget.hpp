/**
 * @file  WorldBlockTarget.hpp
 * @note  This Header is auto generated by LiteLoaderBDS Toolchain.
 *
 */
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

/**
 * @brief MC class WorldBlockTarget.
 *
 */
class WorldBlockTarget {

#define AFTER_EXTRA
// Add Member There

#undef AFTER_EXTRA
#ifndef DISABLE_CONSTRUCTOR_PREVENTION_WORLDBLOCKTARGET
public:
    class WorldBlockTarget& operator=(class WorldBlockTarget const &) = delete;
    WorldBlockTarget(class WorldBlockTarget const &) = delete;
    WorldBlockTarget() = delete;
#endif

public:
    virtual ~WorldBlockTarget();
    virtual void __unk_vfn_1();
    virtual class LevelChunk * getChunk(class ChunkPos const &);
    virtual class Block const * tryGetLiquidBlock(class BlockPos const &) const;
    virtual class Block const & getBlock(class BlockPos const &) const;
    virtual class Block const & getBlockNoBoundsCheck(class BlockPos const &) const;
    virtual class Block const & getExtraBlock(class BlockPos const &) const;
    virtual class gsl::span<class BlockDataFetchResult<class Block> const, -1> fetchBlocksInBox(class BoundingBox const &, class std::function<bool (class Block const &)>);
    virtual bool hasBiomeTag(unsigned __int64, class BlockPos const &) const;
    virtual bool setBlock(class BlockPos const &, class Block const &, int);
    virtual bool setBlockSimple(class BlockPos const &, class Block const &);
    virtual void __unk_vfn_11();
    virtual bool placeStructure(class BlockPos const &, class StructureTemplate &, class StructureSettings &);
    virtual bool mayPlace(class BlockPos const &, class Block const &) const;
    virtual bool canSurvive(class BlockPos const &, class Block const &) const;
    virtual short getMaxHeight() const;
    virtual short getMinHeight() const;
    virtual bool shimPlaceForOldFeatures(class Feature const &, class BlockPos const &, class Random &) const;
    virtual short getHeightmap(int, int);
    virtual bool isLegacyLevel();
    virtual class Biome const * getBiome(class BlockPos const &) const;
    virtual bool isInBounds(class Pos const &) const;
    virtual short getLocalWaterLevel(class BlockPos const &) const;
    virtual class LevelData const & getLevelData() const;
    virtual struct WorldGenContext const & getContext();
    virtual void disableBlockSimple();
#ifdef ENABLE_VIRTUAL_FAKESYMBOL_WORLDBLOCKTARGET
    MCVAPI bool apply() const;
    MCVAPI bool canGetChunk() const;
#endif
    MCAPI WorldBlockTarget(class BlockSource &, struct WorldGenContext const &);

};