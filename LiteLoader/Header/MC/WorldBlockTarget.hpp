// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#define EXTRA_INCLUDE_PART_WORLDBLOCKTARGET
#include "Extra/WorldBlockTargetAPI.hpp"
#undef EXTRA_INCLUDE_PART_WORLDBLOCKTARGET
class WorldBlockTarget {
#include "Extra/WorldBlockTargetAPI.hpp"
public:
    virtual ~WorldBlockTarget();
    virtual void unk_vfn_1();
    virtual class LevelChunk* getChunk(class ChunkPos const&);
    virtual class Block const& getBlock(class BlockPos const&) const;
    virtual class Block const& getBlockNoBoundsCheck(class BlockPos const&) const;
    virtual class Block const& getExtraBlock(class BlockPos const&) const;
    virtual bool hasBiomeTag(unsigned __int64, class BlockPos const&) const;
    virtual bool setBlock(class BlockPos const&, class Block const&, int);
    virtual bool setBlockSimple(class BlockPos const&, class Block const&);
    virtual void unk_vfn_9();
    virtual bool placeStructure(class BlockPos const&, class StructureTemplate&, class StructureSettings&);
    virtual bool mayPlace(class BlockPos const&, class Block const&) const;
    virtual bool canSurvive(class BlockPos const&, class Block const&) const;
    virtual short getMaxHeight() const;
    virtual short getMinHeight() const;
    virtual bool shimPlaceForOldFeatures(class Feature const&, class BlockPos const&, class Random&) const;
    virtual short getHeightmap(int, int);
    virtual bool isLegacyLevel();
    virtual class Biome const* getBiome(class BlockPos const&) const;
    virtual bool isInBounds(class Pos const&) const;
    virtual short getLocalWaterLevel(class BlockPos const&) const;
    virtual class LevelData const& getLevelData() const;
    virtual struct WorldGenContext const& getContext();
};