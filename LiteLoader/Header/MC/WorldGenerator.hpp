// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#define AUTO_GENERATED
#include "../Global.h"

#define BEFORE_EXTRA
// Include Headers or Declare Types Here

#undef BEFORE_EXTRA

class WorldGenerator {

#define AFTER_EXTRA
// Add Member There
public:
struct BlockVolumeDimensions {
    BlockVolumeDimensions() = delete;
    BlockVolumeDimensions(BlockVolumeDimensions const&) = delete;
    BlockVolumeDimensions(BlockVolumeDimensions const&&) = delete;
};

#undef AFTER_EXTRA

#ifndef DISABLE_CONSTRUCTOR_PREVENTION_WORLDGENERATOR
public:
    class WorldGenerator& operator=(class WorldGenerator const&) = delete;
    WorldGenerator(class WorldGenerator const&) = delete;
#endif

public:
    /*0*/ virtual ~WorldGenerator();
    /*1*/ virtual class std::optional<short> getPreliminarySurfaceLevel(class DividedPos2d<4>) const;
    /*2*/ virtual void __unk_vfn_0() = 0;
    /*3*/ virtual void __unk_vfn_1() = 0;
    /*4*/ virtual void __unk_vfn_2();
    /*5*/ virtual void __unk_vfn_3();
    /*6*/ virtual void __unk_vfn_4() = 0;
    /*7*/ virtual void __unk_vfn_5() = 0;
    /*8*/ virtual void __unk_vfn_6() = 0;
    /*9*/ virtual void __unk_vfn_7() = 0;
    /*10*/ virtual void __unk_vfn_8() = 0;
    /*11*/ virtual void __unk_vfn_9() = 0;
    /*12*/ virtual void __unk_vfn_10() = 0;
    /*13*/ virtual void __unk_vfn_11() = 0;
    /*14*/ virtual void __unk_vfn_12() = 0;
    /*
    inline void debugRender(){
        void (WorldGenerator::*rv)();
        *((void**)&rv) = dlsym("?debugRender@WorldGenerator@@UEAAXXZ");
        return (this->*rv)();
    }
    inline void addHardcodedSpawnAreas(class LevelChunk& a0){
        void (WorldGenerator::*rv)(class LevelChunk&);
        *((void**)&rv) = dlsym("?addHardcodedSpawnAreas@WorldGenerator@@UEAAXAEAVLevelChunk@@@Z");
        return (this->*rv)(std::forward<class LevelChunk&>(a0));
    }
    inline  ~WorldGenerator(){
         (WorldGenerator::*rv)();
        *((void**)&rv) = dlsym("??1WorldGenerator@@UEAA@XZ");
        return (this->*rv)();
    }
    */
    MCAPI WorldGenerator();
    MCAPI static enum StructureFeatureType getFeatureId(std::string const&);
    MCAPI static class gsl::basic_string_span<char const, -1> getFeatureName(enum StructureFeatureType);

protected:
    MCAPI static unsigned __int64 const TICKING_QUEUE_PASS_LIMIT;

private:

};