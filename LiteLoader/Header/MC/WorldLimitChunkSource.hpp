// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include "../Global.h"
#include "ChunkSource.hpp"
#define EXTRA_INCLUDE_PART_WORLDLIMITCHUNKSOURCE
#include "Extra/WorldLimitChunkSourceAPI.hpp"
#undef EXTRA_INCLUDE_PART_WORLDLIMITCHUNKSOURCE
class WorldLimitChunkSource : public ChunkSource {
#include "Extra/WorldLimitChunkSourceAPI.hpp"
public:
    /*0*/ virtual ~WorldLimitChunkSource();
    /*1*/ virtual class std::shared_ptr<class LevelChunk> getExistingChunk(class ChunkPos const&);
    /*2*/ virtual class std::shared_ptr<class LevelChunk> getRandomChunk(class Random&);
    /*3*/ virtual class std::shared_ptr<class LevelChunk> createNewChunk(class ChunkPos const&, int /*enum enum ChunkSource::LoadMode*/, bool);
    /*4*/ virtual bool postProcess(class ChunkViewSource&);
    /*5*/ virtual void checkAndReplaceChunk(class ChunkViewSource&, class LevelChunk&);
    /*6*/ virtual bool isWithinWorldLimit(class ChunkPos const&) const;
    /*7*/ virtual class std::unordered_map<class ChunkPos, class std::weak_ptr<class LevelChunk>, struct std::hash<class ChunkPos>, struct std::equal_to<class ChunkPos>, class std::allocator<struct std::pair<class ChunkPos const, class std::weak_ptr<class LevelChunk> > > > const* getChunkMap();
    /*8*/ virtual void clearDeletedEntities();
    /*9*/ virtual bool canCreateViews() const;


protected:

private:
};