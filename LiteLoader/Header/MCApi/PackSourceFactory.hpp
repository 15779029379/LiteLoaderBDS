// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
class PackSourceFactory {
public:
    virtual ~PackSourceFactory();
    virtual class WorldTemplatePackSource& createWorldTemplatePackSource(class WorldTemplateManager const&, class mce::UUID const&, int /*enum PackType*/, int /*enum PackOrigin*/);
    virtual class WorldTemplatePackSource* getWorldTemplatePackSource(class mce::UUID const&, int /*enum PackType*/);
    virtual class DirectoryPackSource& createDirectoryPackSource(class Core::Path const&, int /*enum PackType*/, int /*enum PackOrigin*/, bool);
    virtual class DirectoryPackSource* getDirectoryPackSource(class Core::Path const&, int /*enum PackType*/);
    virtual class InPackagePackSource& createInPackagePackSource(int /*enum PackType*/);
    virtual class InPackagePackSource* getInPackagePackSource(int /*enum PackType*/);
    virtual class WorldHistoryPackSource& createWorldHistoryPackSource(class Core::Path const&, int /*enum PackType*/);
    virtual class WorldHistoryPackSource* getWorldHistoryPackSource(class Core::Path const&, int /*enum PackType*/);
    virtual class DirectoryPackSource* getDirectoryPackSourceContaining(struct PackIdVersion const&);
    virtual void removeFromDirectoryPackSource(class Core::Path const&);
    virtual class InPackagePackSource& createDynamicPackagePackSource(int /*enum PackType*/);
    virtual class InPackagePackSource* getDynamicPackagePackSource(int /*enum PackType*/);
    virtual void setDynamicPackagePacks(class std::shared_ptr<class IDynamicPackagePacks> const&);
    virtual void setDynamicPackageRoot(class Core::PathBuffer<std::string>);
};