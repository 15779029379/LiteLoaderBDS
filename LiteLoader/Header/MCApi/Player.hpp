// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
#include "Mob.hpp"
#include <MCApi/Mob.hpp>
class Player : public Mob {
public:
    virtual void reloadHardcoded(int /*enum Actor::InitializationMethod*/, class VariantParameterList const&);
    virtual void initializeComponents(int /*enum Actor::InitializationMethod*/, class VariantParameterList const&);
    virtual void _serverInitItemStackIds();
    virtual ~Player();
    virtual void remove();
    virtual bool isRuntimePredictedMovementEnabled();
    virtual void unk_vfn_22();
    virtual class Vec3 getAttachPos(int /*enum ActorLocation*/, float);
    virtual void move(struct IActorMovementProxy&, class Vec3 const&);
    virtual void move(class Vec3 const&);
    virtual class Vec3 getInterpolatedRidingOffset(float);
    virtual void unk_vfn_41();
    virtual void teleportTo(class Vec3 const&, bool, int, int);
    virtual std::unique_ptr<class AddActorBasePacket> tryCreateAddActorPacket();
    virtual void normalTick();
    virtual void vehicleTick();
    virtual float getRidingHeight();
    virtual void unk_vfn_61();
    virtual std::string getFormattedNameTag();
    virtual void unk_vfn_68();
    virtual float getCameraOffset();
    virtual void unk_vfn_82();
    virtual void unk_vfn_87();
    virtual void playerTouch(class Player&);
    virtual bool isImmobile();
    virtual void unk_vfn_94();
    virtual bool isSleeping();
    virtual void setSleeping(bool);
    virtual void unk_vfn_97();
    virtual bool isBlocking();
    virtual bool isDamageBlocked(class ActorDamageSource const&);
    virtual void unk_vfn_103();
    virtual void unk_vfn_104();
    virtual void unk_vfn_106();
    virtual void unk_vfn_107();
    virtual void unk_vfn_108();
    virtual class Actor* findAttackTarget();
    virtual bool isValidTarget(class Actor*);
    virtual bool attack(class Actor&, int /*enum ActorDamageCause*/ const&);
    virtual void adjustDamageAmount(int&);
    virtual void onTame();
    virtual void onFailedTame();
    virtual bool isJumping();
    virtual void unk_vfn_130();
    virtual void vehicleLanded(class Vec3 const&, class Vec3 const&);
    virtual bool isInvulnerableTo(class ActorDamageSource const&);
    virtual void actuallyHurt(int, class ActorDamageSource const&, bool);
    virtual void onBounceStarted(class BlockPos const&, class Block const&);
    virtual void feed(int);
    virtual void handleEntityEvent(int /*enum ActorEvent*/, int);
    virtual void unk_vfn_144();
    virtual class HashedString const& getActorRendererId();
    virtual void awardKillScore(class Actor&, int);
    virtual void setArmor(int /*enum ArmorSlot*/, class ItemStack const&);
    virtual class ItemStack const& getCarriedItem();
    virtual void setCarriedItem(class ItemStack const&);
    virtual void setOffhandSlot(class ItemStack const&);
    virtual class ItemStack const& getEquippedTotem();
    virtual bool consumeTotem();
    virtual int /*enum ActorType*/ getEntityTypeId();
    virtual class HashedString const& queryEntityRenderer();
    virtual struct ActorUniqueID getSourceUniqueID();
    virtual bool canFreeze();
    virtual int getPortalCooldown();
    virtual int getPortalWaitTime();
    virtual bool canChangeDimensions();
    virtual void unk_vfn_184();
    virtual struct ActorUniqueID getControllingPlayer();
    virtual void onSynchedDataUpdate(int);
    virtual bool canAddPassenger(class Actor&);
    virtual bool canPickupItem(class ItemStack const&);
    virtual bool canBePulledIntoVehicle();
    virtual void unk_vfn_197();
    virtual void sendMotionPacketIfNeeded();
    virtual bool canSynchronizeNewEntity();
    virtual void startSwimming();
    virtual void stopSwimming();
    virtual int /*enum CommandPermissionLevel*/ getCommandPermissionLevel();
    virtual class AnimationComponent& getAnimationComponent();
    virtual void useItem(class ItemStackBase&, int /*enum ItemUseMethod*/, bool);
    virtual void unk_vfn_222();
    virtual void unk_vfn_223();
    virtual float getMapDecorationRotation();
    virtual bool isWorldBuilder();
    virtual void unk_vfn_229();
    virtual bool isAdventure();
    virtual bool add(class ItemStack&);
    virtual bool drop(class ItemStack const&, bool);
    virtual bool canDestroyBlock(class Block const&);
    virtual void setAuxValue(int);
    virtual void setSize(float, float);
    virtual void startSpinAttack();
    virtual void stopSpinAttack();
    virtual void unk_vfn_243();
    virtual void unk_vfn_246();
    virtual void die(class ActorDamageSource const&);
    virtual bool shouldDropDeathLoot();
    virtual void unk_vfn_258();
    virtual bool _hurt(class ActorDamageSource const&, int, bool, bool);
    virtual void readAdditionalSaveData(class CompoundTag const&, class DataLoadHelper&);
    virtual void addAdditionalSaveData(class CompoundTag&);
    virtual void unk_vfn_266();
    virtual void _onSizeUpdated();
    virtual void unk_vfn_275();
    virtual void spawnAnim();
    virtual float getSpeed();
    virtual void setSpeed(float);
    virtual void travel(struct IMobMovementProxy&, float, float, float);
    virtual void travel(float, float, float);
    virtual void aiStep(struct IMobMovementProxy&);
    virtual void aiStep();
    virtual int getItemUseDuration();
    virtual float getItemUseStartupProgress();
    virtual float getItemUseIntervalProgress();
    virtual void unk_vfn_305();
    virtual bool isAlliedTo(class Mob*);
    virtual void unk_vfn_309();
    virtual void sendArmorDamage(class std::bitset<4> const&);
    virtual std::vector<class ItemStack const*> getAllHand();
    virtual std::vector<class ItemStack const*> getAllEquipment();
    virtual void dropEquipmentOnDeath();
    virtual void dropEquipmentOnDeath(class ActorDamageSource const&, int);
    virtual void clearVanishEnchantedItemsOnDeath();
    virtual void sendInventory(bool);
    virtual void onBorn(class Actor&, class Actor&);
    virtual void unk_vfn_338();
    virtual float _getWalkTargetValue(class BlockPos const&);
    virtual bool canExistWhenDisallowMob();
    virtual void unk_vfn_341();
    virtual std::unique_ptr<class BodyControl> initBodyControl();
    virtual void jumpFromGround(struct IMobMovementProxy&);
    virtual void jumpFromGround();
    virtual void updateAi();
    virtual void _serverAiMobStep();
    virtual void updateGliding();
    virtual void unk_vfn_357();
    virtual void prepareRegion(class ChunkSource&);
    virtual void destroyRegion();
    virtual void suspendRegion();
    virtual void resendAllChunks();
    virtual void _fireWillChangeDimension();
    virtual void _fireDimensionChanged();
    virtual void changeDimensionWithCredits(class AutomaticID<class Dimension, int>);
    virtual void tickWorld(struct Tick const&);
    virtual void unk_vfn_366();
    virtual std::vector<class ChunkPos> const& getTickingOffsets();
    virtual void moveView();
    virtual void setName(std::string const&);
    virtual void checkMovementStats(class Vec3 const&);
    virtual void unk_vfn_371();
    virtual void unk_vfn_372();
    virtual void respawn();
    virtual void unk_vfn_374();
    virtual void resetPos(bool);
    virtual void unk_vfn_376();
    virtual bool hasResource(int);
    virtual void completeUsingItem();
    virtual void setPermissions(int /*enum CommandPermissionLevel*/);
    virtual void startDestroying();
    virtual void stopDestroying();
    virtual void unk_vfn_382();
    virtual void unk_vfn_383();
    virtual void openTrading(struct ActorUniqueID const&, bool);
    virtual bool canOpenContainerScreen();
    virtual void unk_vfn_386();
    virtual void unk_vfn_387();
    virtual void openInventory();
    virtual void unk_vfn_389();
    virtual void unk_vfn_390();
    virtual void displayTextObjectMessage(class TextObjectRoot const&, std::string const&, std::string const&);
    virtual void displayTextObjectWhisperMessage(class ResolvedTextObject const&, std::string const&, std::string const&);
    virtual void displayWhisperMessage(std::string const&, std::string const&, std::string const&, std::string const&);
    virtual int /*enum BedSleepingResult*/ startSleepInBed(class BlockPos const&);
    virtual void stopSleepInBed(bool, bool);
    virtual bool canStartSleepInBed();
    virtual int getSleepTimer();
    virtual int getPreviousTickSleepTimer();
    virtual void unk_vfn_399();
    virtual void unk_vfn_400();
    virtual bool isHostingPlayer();
    virtual bool isLoading();
    virtual bool isPlayerInitialized();
    virtual void unk_vfn_404();
    virtual void registerTrackedBoss(struct ActorUniqueID);
    virtual void unRegisterTrackedBoss(struct ActorUniqueID);
    virtual void setPlayerGameType(int /*enum GameType*/);
    virtual void initHUDContainerManager();
    virtual void _crit(class Actor&);
    virtual class IMinecraftEventing* getEventing();
    virtual void unk_vfn_411();
    virtual void sendEventPacket(class EventPacket&);
    virtual void addExperience(int);
    virtual void addLevels(int);
    virtual void setContainerData(class IContainerManager&, int, int);
    virtual void slotChanged(class IContainerManager&, class Container&, int, class ItemStack const&, class ItemStack const&, bool);
    virtual void inventoryChanged(class Container&, int, class ItemStack const&, class ItemStack const&, bool);
    virtual void refreshContainer(class IContainerManager&);
    virtual void deleteContainerManager();
    virtual void setFieldOfViewModifier(float);
    virtual bool is2DPositionRelevant(class AutomaticID<class Dimension, int>, class BlockPos const&);
    virtual bool isActorRelevant(class Actor const&);
    virtual bool isTeacher();
    virtual void onSuspension();
    virtual void onLinkedSlotsChanged();
    virtual void startCooldown(class Item const*);
    virtual int getItemCooldownLeft(unsigned __int64);
    virtual int getItemCooldownLeft(class HashedString const&);
    virtual int getMaxItemCooldownLeft();
    virtual bool isItemInCooldown(class HashedString const&);
    virtual void sendInventoryTransaction(class InventoryTransaction const&);
    virtual void sendComplexInventoryTransaction(std::unique_ptr<class ComplexInventoryTransaction>);
    virtual void sendNetworkPacket(class Packet&);
    virtual class PlayerEventCoordinator& getPlayerEventCoordinator();
    virtual class MoveInputHandler* getMoveInputHandler();
    virtual int /*enum InputMode*/ getInputMode();
    virtual int /*enum ClientPlayMode*/ getPlayMode();
    virtual void reportMovementTelemetry(int /*enum MovementEventType*/);
    virtual void unk_vfn_439();
    virtual std::string getXuid();
    virtual struct PlayerMovementSettings const& getMovementSettings();
    virtual void onMovePlayerPacketNormal(class Vec3 const&, class Vec2 const&, float);
    virtual class std::shared_ptr<class ChunkViewSource> _createChunkSource(class ChunkSource&);

public:
    MCAPI void broadcastPlayerSpawnedMobEvent(enum ActorType, enum MobSpawnMethod);
    MCAPI bool canBeSeenOnMap() const;
    MCAPI bool canDestroy(class Block const&) const;
    MCAPI bool canUseAbility(enum AbilitiesIndex) const;
    MCAPI bool canUseOperatorBlocks() const;
    MCAPI void causeFoodExhaustion(float);
    MCAPI void clearRespawnPosition();
    MCAPI void eat(class ItemStack const&);
    MCAPI void eat(int, float);
    MCAPI bool equippedArmorItemCanBeMoved(class ItemStack const&) const;
    MCAPI void fireDimensionChangedEvent(class AutomaticID<class Dimension, int>);
    MCAPI bool forceAllowEating() const;
    MCAPI class Agent* getAgent() const;
    MCAPI struct ActorUniqueID getAgentID() const;
    MCAPI class Agent* getAgentIfAllowed(bool, struct ActorUniqueID) const;
    MCAPI class BlockPos const& getBedPosition() const;
    MCAPI __int64 getBlockedUsingDamagedShieldTimeStamp() const;
    MCAPI __int64 getBlockedUsingShieldTimeStamp() const;
    MCAPI __int64 getBlockingStartTimeStamp() const;
    MCAPI class Vec3 getCapePos(float);
    MCAPI class std::weak_ptr<class IContainerManager> getContainerManager();
    MCAPI class ItemStack const& getCurrentActiveShield() const;
    MCAPI float getDestroyProgress(class Block const&) const;
    MCAPI float getDestroySpeed(class Block const&) const;
    MCAPI int getDirection() const;
    MCAPI int getEnchantmentSeed() const;
    MCAPI class AutomaticID<class Dimension, int> getExpectedSpawnDimensionId() const;
    MCAPI class BlockPos const& getExpectedSpawnPosition() const;
    MCAPI std::string getInteractText() const;
    MCAPI class Container& getInventory();
    MCAPI class ItemStack const& getItemInUse() const;
    MCAPI std::string getItemInteractText(class Item const&) const;
    MCAPI class ItemStackNetManagerBase const* getItemStackNetManager() const;
    MCAPI class ItemStackNetManagerBase* getItemStackNetManager();
    MCAPI float getLuck();
    MCAPI int getMapIndex();
    MCAPI void getNewEnchantmentSeed();
    MCAPI class AABB getPickupArea() const;
    MCAPI enum BuildPlatform getPlatform() const;
    MCAPI std::string const& getPlatformOnlineId() const;
    MCAPI enum GameType getPlayerGameType() const;
    MCAPI int getPlayerIndex() const;
    MCAPI int getPlayerLevel() const;
    MCAPI enum PlayerPermissionLevel getPlayerPermissionLevel() const;
    MCAPI std::string const& getPlayerSessionId() const;
    MCAPI class ItemStack const& getPlayerUIItem(enum PlayerUISlot);
    MCAPI class BlockPos const& getRespawnAnchorPosition() const;
    MCAPI class ItemStack const& getSelectedItem() const;
    MCAPI int getSelectedItemSlot() const;
    MCAPI class SerializedSkin& getSkin();
    MCAPI class SerializedSkin const& getSkin() const;
    MCAPI float getSleepRotation() const;
    MCAPI class AutomaticID<class Dimension, int> getSpawnDimension() const;
    MCAPI class BlockPos const& getSpawnPosition() const;
    MCAPI class PlayerInventory& getSupplies();
    MCAPI class PlayerInventory const& getSupplies() const;
    MCAPI std::vector<struct ActorUniqueID> const& getTrackedBosses();
    MCAPI enum GameType getUnmappedPlayerGameType() const;
    MCAPI bool getUsedPotion();
    MCAPI int getXpNeededForNextLevel() const;
    MCAPI void handleJumpEffects();
    MCAPI bool hasBedPosition() const;
    MCAPI bool hasOpenContainer() const;
    MCAPI bool hasOpenContainerOfContainerType(enum ContainerType) const;
    MCAPI bool hasOwnedChunkSource() const;
    MCAPI bool hasResource(class ItemDescriptor const&);
    MCAPI bool hasRespawnAnchorPosition() const;
    MCAPI bool hasRespawnPosition() const;
    MCAPI bool interact(class Actor&, class Vec3 const&);
    MCAPI bool isBouncing() const;
    MCAPI bool isForcedRespawn() const;
    MCAPI bool isHiddenFrom(class Mob&) const;
    MCAPI bool isHungry() const;
    MCAPI bool isHurt();
    MCAPI bool isInCreativeMode() const;
    MCAPI bool isInRaid() const;
    MCAPI bool isRespawningFromTheEnd() const;
    MCAPI bool isSleepingLongEnough() const;
    MCAPI bool isSpawned() const;
    MCAPI bool isSurvival() const;
    MCAPI bool isUsingItem() const;
    MCAPI void moveSpawnView(class Vec3 const&, class AutomaticID<class Dimension, int>);
    MCAPI void recheckSpawnPosition();
    MCAPI void releaseUsingItem();
    MCAPI void resetPlayerLevel();
    MCAPI void resetToDefaultGameMode();
    MCAPI void setAgent(class Agent*);
    MCAPI void setAllPlayersSleeping();
    MCAPI void setBedRespawnPosition(class BlockPos const&);
    MCAPI void setBlockRespawnUntilClientMessage(bool);
    MCAPI void setChunkRadius(unsigned int);
    MCAPI void setContainerManager(class std::shared_ptr<class IContainerManager>);
    MCAPI void setCursorSelectedItem(class ItemStack const&);
    MCAPI void setCursorSelectedItemGroup(class ItemGroup const&);
    MCAPI void setEnchantmentSeed(int);
    MCAPI void setHasSeenCredits(bool);
    MCAPI void setMapIndex(int);
    MCAPI void setPlatformOnlineId(std::string const&);
    MCAPI void setPlayerIndex(int);
    MCAPI void setPlayerUIItem(enum PlayerUISlot, class ItemStack const&);
    MCAPI void setRespawnPosition(class BlockPos const&, class AutomaticID<class Dimension, int>);
    MCAPI void setRespawnPositionCandidate();
    MCAPI void setRespawnReady(class Vec3 const&);
    MCAPI void setSelectedItem(class ItemStack const&);
    MCAPI void setSpawnBlockRespawnPosition(class BlockPos const&, class AutomaticID<class Dimension, int>);
    MCAPI void setUsedPotion(bool);
    MCAPI bool shouldShowCredits() const;
    MCAPI void spawnExperienceOrb(class Vec3 const&, int);
    MCAPI void startGliding();
    MCAPI void startUsingItem(class ItemStack const&, int);
    MCAPI void stopGliding();
    MCAPI void stopUsingItem();
    MCAPI bool take(class Actor&, int, int);
    MCAPI void updateInventoryTransactions();
    MCAPI void updateSkin(class SerializedSkin const&, int);
    MCAPI void updateSpawnChunkView();
    MCAPI void updateTrackedBosses();
    MCAPI void useSelectedItem(enum ItemUseMethod, bool);

    MCAPI static float const DEFAULT_BB_HEIGHT;
    MCAPI static float const DEFAULT_BB_WIDTH;
    MCAPI static float const DEFAULT_FLY_SPEED;
    MCAPI static float const DEFAULT_PLAYER_HEIGHT_OFFSET;
    MCAPI static float const DEFAULT_WALK_SPEED;
    MCAPI static float const DISTANCE_TO_TRANSFORM_EVENT;
    MCAPI static float const DISTANCE_TO_TRAVELLED_EVENT;
    MCAPI static class Attribute const EXHAUSTION;
    MCAPI static class Attribute const EXPERIENCE;
    MCAPI static int const GLIDE_STOP_DELAY;
    MCAPI static class Attribute const HUNGER;
    MCAPI static class Attribute const LEVEL;
    MCAPI static float const PLAYER_ALIVE_HEIGHT;
    MCAPI static float const PLAYER_ALIVE_WIDTH;
    MCAPI static float const PLAYER_DEAD_HEIGHT;
    MCAPI static float const PLAYER_DEAD_WIDTH;
    MCAPI static float const PLAYER_DOWN_SWIM_SPEED;
    MCAPI static float const PLAYER_GLIDING_CAMERA_OFFSET;
    MCAPI static float const PLAYER_SLEEPING_CAMERA_OFFSET;
    MCAPI static float const PLAYER_SLEEPING_HEIGHT;
    MCAPI static float const PLAYER_SLEEPING_WIDTH;
    MCAPI static float const PLAYER_SNEAK_OFFSET;
    MCAPI static float const PLAYER_SWIMMING_CAMERA_OFFSET;
    MCAPI static float const PLAYER_SWIM_BREACH_ANGLE;
    MCAPI static float const PLAYER_SWIM_ENTER_THRESHOLD;
    MCAPI static float const PLAYER_SWIM_FLY_MULTI;
    MCAPI static float const PLAYER_UP_SWIM_SPEED;
    MCAPI static class Attribute const SATURATION;
    MCAPI static unsigned int const SPAWN_CHUNK_LARGE_JUMP;
    MCAPI static unsigned int const SPAWN_CHUNK_RADIUS;
    MCAPI static void _aiStep(struct IPlayerMovementProxy&);
    MCAPI static void _jumpFromGround(struct IPlayerMovementProxy&);
    MCAPI static void _travel(struct IPlayerMovementProxy&, float, float, float);
    MCAPI static bool canJump(struct IPlayerMovementProxy&);
    MCAPI static bool checkAndFixSpawnPosition(class Vec3&, std::vector<class gsl::not_null<class BlockSource*>>, class AABB, bool, bool, bool, bool, bool, bool, short);
    MCAPI static bool checkNeedAutoJump(struct IPlayerMovementProxy*, float, float);
    MCAPI static void goDownInWater(struct IActorMovementProxy&);
    MCAPI static class Player* tryGetFromEntity(class EntityContext&, bool);
    MCAPI static class Player* tryGetFromEntity(class OwnerPtrT<struct EntityRefTraits> const&, bool);

private:
    MCAPI void _addLevels(int);
    MCAPI bool _blockUsingShield(class ActorDamageSource const&, float);
    MCAPI void _ensureSafeSpawnPosition(class Vec3&);
    MCAPI bool _findFallbackSpawnPosition(class Vec3&, std::vector<class gsl::not_null<class BlockSource*>>, unsigned int);
    MCAPI void _handleCarriedItemInteractText();
    MCAPI bool _isChunkSourceLoaded(class Vec3 const&, class BlockSource const&) const;
    MCAPI void _registerElytraLoopSound();
    MCAPI void _sendShieldUpdatePacket(class ShieldItem const&, class ItemStack const&, class ItemStack const&, enum ContainerID, int);
    MCAPI void _tickLevelChunks(struct Tick const&);

protected:
    MCAPI bool _checkAndFixSpawnPosition(class Vec3&, std::vector<class gsl::not_null<class BlockSource*>>, bool, bool, bool, bool, bool) const;
    MCAPI void _chooseSpawnArea();
    MCAPI bool _chooseSpawnPositionWithinArea();
    MCAPI void _registerPlayerAttributes();
    MCAPI void _updateInteraction();
    MCAPI bool _validateSpawnPositionAvailability(class Vec3 const&, class BlockSource*, class Vec3 const* const) const;
    MCAPI bool checkBed(class BlockSource*, class Vec3 const* const);
    MCAPI bool checkSpawnBlock(class BlockSource const&) const;
};