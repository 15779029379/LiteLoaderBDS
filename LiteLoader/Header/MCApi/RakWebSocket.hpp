// This Header is auto generated by BDSLiteLoader Toolchain
#pragma once
#include <Global.h>
class RakWebSocket {
public:
    virtual ~RakWebSocket();
    virtual int /*enum WSConnectionResult*/ connect(std::string const&);
    virtual int /*enum WSConnectionResult*/ connect(std::string const&, std::vector<std::string> const&);
    virtual bool isReady();
    virtual void setOnMessageReceivedHandler(class std::function<void(class RakWebSocketDataFrame const&)> const&);
    virtual void setOnCloseHandler(class std::function<void(int /*enum CloseStatusCode*/, std::string const&)> const&);
    virtual void setOnConnectedHandler(class std::function<void(std::string const&)> const&);
    virtual void tick();
    virtual void _updateState();
    virtual unsigned int _genMaskingKey();

protected:
    MCAPI void _close(enum CloseStatusCode);
    MCAPI void _createWebSocketKey();
    MCAPI void _fail(std::string const&, enum CloseStatusCode);
    MCAPI std::string _generateBase64SHA1Key(std::string const&);
    MCAPI void _processClosingHandshake(bool);
    MCAPI void _processDataFrames(class RakNet::BitStream&);
    MCAPI void _reset();
    MCAPI bool _sendControlFrame(unsigned char const*, unsigned __int64, enum OpCode);
    MCAPI bool _sendDataFrame(unsigned char const*, unsigned int, enum OpCode, bool);
    MCAPI bool _sendNonControlFrame(unsigned char const*, unsigned __int64, enum OpCode);
    MCAPI void _splitWebSocketURI(std::string const&, std::string&, std::string&, std::string&);
    MCAPI void _subProcessHttpResponse(class RakNet::BitStream&);
    MCAPI void _validateFields();
    MCAPI bool _validateWebSocketURI();
};