{
    "api.parseJson.fail": "Json parse error",
    "base.getDimName.0": "Overworld",
    "base.getDimName.1": "Nether",
    "base.getDimName.2": "End",
    "base.getDimName.unknown": "Other dimension",
    "init.fileMapping.fail": "Failed to load global shared data",
    "init.idFile.fail": "Failed to initialize unique identification file! Code: ",
    "init.llMoney.noFound": "LLMoney.dll not found, ScriptEngine Economy System won't work",
    "init.loadConfig.fail": "Loading ScriptEngine config failed",
    "init.mapFile.fail": "Global shared data mapping failed",
    "llseapi.require.download.success": " - Successfully downloaded require! Path: ",
    "llseapi.require.fail": " - Plugin require load failed",
    "llseapi.require.network.fail": " - Download plugin require failed! Code: ",
    "llseapi.require.success": " - Plugin require loaded successfully. Loaded: ",
    "remoteCall.createEventObject.fail": "Creating Event Object failed",
    "remoteCall.createMessageThread.fail": "Creating Message Thread failed",
    "remoteCall.inRemoteEngine.fail": "Remote call error in remote engine",
    "remoteCall.postMessage.fail": "Posting remote call information failed",
    "remoteCall.postMessageReturn.fail": "Remote call post return value failed",
    "remoteCall.timeout.fail": "Remote call timeout, call failed",
    "remoteCall.waitFail.fail": "Remote call waiting failed, call failed",
    "ll.main.checkRunningBDS.detected": "Detected the existence of another BDS process with the same path!",
    "ll.main.checkRunningBDS.tip": "This may cause the network port and the level to be occupied",
    "ll.main.checkRunningBDS.ask": "Do you want to terminate the process with PID {}?  (y=Yes, n=No)",
    "ll.main.fixAllowList.removeEmptyAllowlist": "allowlist.json is empty! Removing...",
    "ll.main.fixAllowList.checkManually": "Both allowlist.json and whitelist.json exist and aren't empty. Please check them manually",
    "ll.main.fixAllowList.renamed": "Renamed whitelist.json to allowlist.json",
    "ll.main.warning.inDevMode": "Currently in developer mode!",
    "ll.main.warning.betaVersion": "Currently using a beta version.",
    "ll.main.warning.productionEnv": "PLEASE DO NOT USE IN PRODUCTION ENVIRONMENT!",
    "ll.main.warning.protocolVersionNotMatch.1": "Protocol version not match, target version: {}, current version: {}.",
    "ll.main.warning.protocolVersionNotMatch.2": "This will most likely crash the server, please use the LiteLoader that matches the BDS version!",
    "ll.main.license": "LiteLoader is licensed under AGPLv3",
    "ll.main.newForum": "Our new forum is live! -> https://forum.litebds.com",
    "ll.main.thanks.rhymc": "Thanks to RhyMC(rhymc.com) for the support",
    "ll.antiAbnormalItem.detected": "Player({}) item data error!",
    "ll.antiAbnormalItem.itemInfo": "Item: {}",
    "ll.cmd.tpdim.success": "Teleported {} to {} ({:2f}, {:2f}, {:2f})",
    "ll.cmd.tpdim.error.noActorTeleported": "No Actor Teleported",    
    "ll.cmd.tpdim.error.noActorSpecified": "No Actor Specified",
    "ll.cmd.tpdim.invalidDimid": "Invalid DimensionId: {}",
    "ll.cmd.listPlugin.overview": "Plugin List [{}]",
    "ll.cmd.listPlugin.tip": "* Send command \"ll list <Plugin Name>\" for more information",
    "ll.cmd.pluginInfo.title": "Plugin <{}>",
    "ll.cmd.pluginInfo.error.pluginNotFound": "Plugin <{}> is not found!",
    "ll.cmd.version.msg": "Bedrock Dedicated Server {}\n- with LiteLoaderBDS {}\n- Network Protocol: {}",
    "ll.cmd.help.msg": "[Introduction]\nLiteLoaderBDS is an unofficial plugin loader for modding development of Bedrock Dedicated Server.\nIt provides a huge nubmer of APIs, a powerful event system and lots of packed utility interfaces .\n[Github]\n--> https://github.com/LiteLDev/LiteLoaderBDS <--\nWelcome to our github project to get more information ~",
    "ll.cmd.loadPlugin.success": "Plugin <{}> loaded.",
    "ll.cmd.loadPlugin.fail": "Failed to load plugin {}",
    "ll.cmd.unloadPlugin.success": "Plugin <{}> unloaded.",
    "ll.cmd.unloadPlugin.fail": "Failed to unload plugin <{}>",
    "ll.cmd.reloadPlugin.success": "Plugin <{}> reloaded.",
    "ll.cmd.reloadPlugin.fail": "Failed to reload plugin <{}>",
    "ll.cmd.reloadAllPlugins.success": "{} plugins reloaded successfully.",
    "ll.cmd.reloadAllPlugins.fail": "Failed to reload any plugin",
    "ll.cmd.error.noPathSpecified": "You must provide a valid path of LiteLoader plugin!",
    "ll.cmd.error.noNameSpecified": "You must provide a valid name of LiteLoader plugin!",
    "ll.config.save.fail": "Failed to save(create) configuration file!",
    "ll.config.creating": "LL Config File <{}> not found. Creating configuration file...",
    "ll.config.updating": "Updating configuration file...",
    "ll.config.warning.configOutdated": "LL Config File <{}> is outdated.",
    "ll.crashLogger.existsingDebuggerDetected": "Existing debugger detected. Builtin CrashLogger will not work.",
    "ll.crashLogger.wineDetected": "Wine Environment detected. Builtin CrashLogger will not work.",
    "ll.crashLogger.error.cannotCreateDaemonProcess": "Couldn't Create CrashLogger Daemon Process!",
    "ll.crashLogger.warning.crashLoggerDisabled.1": "Builtin CrashLogger is not enabled because the configuration disabled it.",
    "ll.crashLogger.warning.crashLoggerDisabled.2": "There will be no crash log when unhandled exception occurs,",
    "ll.crashLogger.warning.crashLoggerDisabled.3": "which makes it almost impossible to find out the reason for crash and the source of crash.",
    "ll.crashLogger.warning.crashLoggerDisabled.4": "We strongly recommend you to enable it to ensure server stability",
    "ll.crashLogger.warning.conflicts.1": "Builtin CrashLogger is not enabled because plugin <{}> conflicts with it",
    "ll.crashLogger.warning.conflicts.2": "There will be no crash log when unhandled exception occurs,",
    "ll.crashLogger.warning.conflicts.3": "which makes it almost impossible to find out the reason for crash and the source of crash.",
    "ll.crashLogger.warning.conflicts.4": "Since CrashLogger is an important component which ensures server stability",
    "ll.crashLogger.warning.conflicts.5": "We recommend you to think twice about the usage of plugin <{}>",
    "ll.crashLogger.init.fail.msg": "Builtin CrashLogger failed to start!",
    "ll.crashLogger.init.fail.tip": "There will be no crash log when unhandled exception occurs.",
    "ll.addonsHelper.error.addonConfigNotFound": "Addon config not found!",
    "ll.addonsHelper.error.addonFileNotFound": "Addon file \"{}\" not found!",
    "ll.addonsHelper.error.addonNotFound": "Addon <{}> not found!",
    "ll.addonsHelper.error.outOfRange": "Addon index {} out of range",
    "ll.addonsHelper.error.unsupportedFileType": "Unsupported type of file found!",
    "ll.addonsHelper.error.parsingEnabledAddonsList": "Error when parsing enabled addons list",
    "ll.addonsHelper.error.noAddonInstalled": "No addon was installed.",
    "ll.addonsHelper.error.installationAborted": "Install progress aborted!",
    "ll.addonsHelper.displayError": "Error: {}",
    "ll.addonsHelper.removeAddonFromList.fail": "Fail to remove addon <{}> from config file!",
    "ll.addonsHelper.removeAddonFromList.success": "Removed addon <{}> from config file.",
    "ll.addonsHelper.addAddonToList.invalidList": "Invalid Addon List File {}, backup to {} and reset to default",
    "ll.addonsHelper.addAddonToList.fail": "Fail to insert the addon {} into {}!",
    "ll.addonsHelper.addAddonToList.success": "Added addon <{}> to config file.",
    "ll.addonsHelper.install.installing": "Installing addon <{}>...",
    "ll.addonsHelper.install.error.failToUncompress.msg": "Fail to uncompress addon {}!",
    "ll.addonsHelper.install.error.failToUncompress.exitCode": "Exit Code: {}",
    "ll.addonsHelper.install.error.failToUncompress.programOutput": "Program Output:\n{}",
    "ll.addonsHelper.uninstall.success": "Addon <{}> uninstalled.",
    "ll.addonsHelper.autoInstall.tip.dirCreated": "Directory created. You can move compressed Addon files to {} to get installed at next launch.",
    "ll.addonsHelper.autoInstall.working": "{} new addon(s) found to install. Working...",
    "ll.addonsHelper.autoInstall.installed": "Addon {} has beed installed.",
    "ll.addonsHelper.autoInstall.installedCount": "{} addon(s) was installed.",
    "ll.addonsHelper.cmd.output.list.overview": "Addons: {} addon(s) installed:",
    "ll.loader.loadScriptEngine.error.versionNotMatch": "The file version <{}> of Script Engine for {} does not match the LiteLoader version <{}>",
    "ll.loader.loadScriptEngine.success": "* ScriptEngine for {} loaded",
    "ll.loader.loadDotNetEngine.warning.notFinished": "LiteLoader.NET is not finished yet!",
    "ll.loader.loadDotNetEngine.error.versionNotMatch": "The file version <{}> of LiteLoader.NET does not match the LiteLoader version <{}>",
    "ll.loader.loadDotNetEngine.success": "* .NET Engine loaded",
    "ll.loader.loadMain.loadingPlugins": "Loading plugins...",
    "ll.loader.loadMain.loadedShellLink": "ShellLinked Plugin <{} => {}> loaded",
    "ll.loader.loadMain.loadedPlugin": "Plugin <{}> loaded",
    "ll.loader.loadMain.done": "{} plugins loaded.",
    "ll.pluginManager.error.invalidFileType": "Invalid plugin file type {} in {}",
    "ll.pluginManager.error.noValidPluginFound": "No valid plugin found at {}!",
    "ll.pluginManager.error.failToRegisterPlugin": "Failed to register plugin {}!",
    "ll.pluginManager.error.hasBeenRegistered": "A plugin named {} has been registered",
    "ll.pluginManager.error.failToLoadPlugin": "Fail to load the plugin {}!",
    "ll.pluginManager.error.pluginNotFound": "Plugin <{}> is not found",
    "ll.pluginManager.warning.unloadDllNotFinished": "Unload function of dll plugins is not finished.",
    "ll.pluginManager.warning.reloadDllNotFinished": "Reload function of dll plugins is not finished.",
    "ll.pluginManager.reloadPlugin.fail": "Failed to reload plugin {}!"
}